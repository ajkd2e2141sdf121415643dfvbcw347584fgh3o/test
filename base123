-- AUTO-GENERATED COMPRESSED ROBLOX SCRIPT
-- Fixed Version - Compatible with all Roblox versions
-- สร้างโดย: Roblox Compression Pipeline v2

local SgcCQqZOZevS = '7gfuRF9AMkPnTBi'
local rCedVxKcpodr = 'sfIhkYYbnEfTGE0'
local ciGwKiyIRwih = 'cuTvM2xrp1U8sJ0'
local jeuJTiwyBgiC = '1msCdUlobvsxFI7'
local apnvRXUtjxXs = '--BloxFruit World3
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local TweenService = game:GetService("TweenService")
local VirtualInputManager = game:GetService("VirtualInputManager")
local GuiService = game:GetService("GuiService")
local VirtualUser = game:GetService("VirtualUser")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer.PlayerGui
local tween = game:service"TweenService"
local RunService = game:GetService("RunService")
local Mouse = LocalPlayer:GetMouse()
local _G = _G or getgenv()
repeat wait(0) until game.Players.LocalPlayer
local id = game.PlaceId if id == 7449423635 then World3 = true; else game:Shutdown() end; 

repeat wait() until game:IsLoaded() 
_G.Settings = {
    AutoFarm = false,
    NeareastFarm = false,
    AutoNewWorld = false,
    AutoSaber = false,
    AutoPole = false,
    TeleportIsland = false,

--[World 2]
    AutoThirdSea = false,
    AutoBartiloQuest = false,
    Auto_Evo_Race_V2 = false,
    AutoDarkCoat = false,
    AutoSwanGlasses = false,
    AutoTrueTriplKatana = false,
    AutoRengoku = false,
    AutoEctoplasm = false,
    AutoFactory = false,

    --[World 3]
    Mirage = false ,
    MirageHop = false,
    Auto_Gear = false,
    TeleportGear = false,
    AutoRainbowHaki = false,
    AutoBuyEnchanmentHakiHop = false,
    AutoBuyLegendarySwordHop = false,
    AutoEliteHunter = false,
    AutoMusketeerHat = false,
    AutoBuddySword = false,
    AutoFarmBone = false,
    AutoKenHakiV2 = false,
    AutoObservation = false,
    AutoObservation_Hop = false,
    AutoGodHuman = false,
    AutoCavander = false,
    AutoCursedDualKatana = false,
    AutoYamaSword = false,
    AutoTushitaSword = false,
    AutoSerpentBow = false,
    AutoDarkDagger = false,
    AutoCakePrince = false,
    AutoDoughV2 = false,
    AutoHolyTorch = false,
    AutoBuddySwords = false,
    AutoFarmBossHallow = false,
    AutoEvent = false,
    TPTOBOAT = false,
    AutoFarmMaterial = false,
    Teleporttop = false,
    AutoFarmChest = false,
    --[Boss]
    AutoAllBoss = false,
    AutoBossSelect = false,
    AutoFarmBoss = false,
    --[Mastery]
    AutoFarmFruitMastery = false,
    AutoFarmGunMastery = false,
    FarmMasterySwordList = false,
    --[Raids]
    AutoRaids = false,
    AutoNextPlace = false
}

function Vec(text)
    local Notification = require(game.ReplicatedStorage.Notification)
    local notification = Notification.new(text)
    notification.Duration = 10
    notification:Display()
end
Vec("<Color=Cyan>Vector Hub(BETA) Loading..<Color=/>")   
-- [Save Settings]
function LoadSettings()
    if readfile and writefile and isfile and isfolder then
        if not isfolder("VectorHub") then
            makefolder("VectorHub")
        end
        if not isfolder("VectorHub/Blox Fruits/") then
            makefolder("VectorHub/Blox Fruits/")
        end
        if not isfile("VectorHub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json") then
            writefile("VectorHub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json",
                game:GetService("HttpService"):JSONEncode(_G.Settings))
        else
            local Decode = game:GetService("HttpService"):JSONDecode(readfile("VectorHub/Blox Fruits/" ..
                game.Players.LocalPlayer.Name .. ".json"))
            for i, v in pairs(Decode) do
                _G.Settings[i] = v
            end
        end
    else
        return 
    end
end

function SaveSettings()
    if readfile and writefile and isfile and isfolder then
        if not isfile("VectorHub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json") then
            LoadSettings()
        else
            local Decode = game:GetService("HttpService"):JSONDecode(readfile("VectorHub/Blox Fruits/" ..
                game.Players.LocalPlayer.Name .. ".json"))
            local Array = {}
            for i, v in pairs(_G.Settings) do
                Array[i] = v
            end
            writefile("VectorHub/Blox Fruits/" .. game.Players.LocalPlayer.Name .. ".json",
                game:GetService("HttpService"):JSONEncode(Array))
        end
    else
        return 
    end
end

LoadSettings()
repeat wait(0) until game:IsLoaded()
pcall(function()
    if not game.Players.LocalPlayer.Team ~= nil  and game:GetService("Players").LocalPlayer.PlayerGui["Main (minimal)"]:FindFirstChild("ChooseTeam")  then
        repeat wait()
            if game:GetService("Players").LocalPlayer.PlayerGui:WaitForChild("Main (minimal)").ChooseTeam.Visible == true then
                if _G.Team == "Pirate" then
                    for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui["Main (minimal)"].ChooseTeam.Container.Pirates.Frame.TextButton.Activated)) do                                                                                                
                        v.Function()
                    end
                elseif _G.Team == "Marine" then
                    for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui["Main (minimal)"].ChooseTeam.Container.Marines.Frame.TextButton.Activated)) do                                                                                                
                        v.Function()
                    end
                else
                    for i, v in pairs(getconnections(game:GetService("Players").LocalPlayer.PlayerGui["Main (minimal)"].ChooseTeam.Container.Pirates.Frame.TextButton.Activated)) do                                                                                                
                        v.Function()
                    end
                end
            end
        until game.Players.LocalPlayer.Team ~= nil 
    end
end)

game:GetService("Players").LocalPlayer.Idled:connect(function()
game:GetService("VirtualUser"):Button2Down(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
wait(1)
game:GetService("VirtualUser"):Button2Up(Vector2.new(0, 0), workspace.CurrentCamera.CFrame)
end)

function UnEquipWeapon(Weapon)
    if game.Players.LocalPlayer.Character:FindFirstChild(Weapon) then
        _G.NotAutoEquip = true
        wait(.5)
        game.Players.LocalPlayer.Character:FindFirstChild(Weapon).Parent = game.Players.LocalPlayer.Backpack
        wait(.1)
        _G.NotAutoEquip = false
    end
end
function EquipWeapon(Tool)
	pcall(function()
		if game.Players.LocalPlayer.Backpack:FindFirstChild(Tool) then 
			local ToolHumanoid = game.Players.LocalPlayer.Backpack:FindFirstChild(Tool) 
			game.Players.LocalPlayer.Character.Humanoid:EquipTool(ToolHumanoid) 
		end
	end)
end
spawn(function()
    while wait() do
		pcall(function()
			if _G.Useskill then
				game:GetService("VirtualInputManager"):SendKeyEvent(true,"Z",false,game)
				wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(false,"Z",false,game)
                wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(true,"X",false,game)
				wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(false,"X",false,game)
                wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(true,"C",false,game)
				wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(false,"C",false,game)
                wait(0.1)
			end
		end)
    end
end)
function EquipAllWeapon()
    pcall(function()
        for _, v in pairs(LocalPlayer.Backpack:GetChildren()) do
            if v:IsA("Tool") then
                LocalPlayer.Character.Humanoid:EquipTool(v)
                _G.UseSkill = true
                task.wait(1)
            end
        end
    end)
end
function EquipBloxFruit()
    for i ,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
        if v.ToolTip == "Blox Fruit" then
           if game.Players.LocalPlayer.Backpack:FindFirstChild(tostring(v.Name)) then
                EquipWeapon(v.Name)
            end
        end
    end
end

Tabel = {}
	function GetCake_CFrame_Mon()
		local targetMonsters = {"Baking Staff", "Head Baker", "Cake Guard", "Cookie Crafter"}
		local enemySpawns = workspace.EnemySpawns:GetChildren()
		local randomSpawnIndex = math.random(1, #enemySpawns)
		local selectedSpawn = enemySpawns[randomSpawnIndex]
		
		for _,_v1 in pairs(targetMonsters) do
			local result = string.gsub(_v1, "Lv. ", "")
			local result2 = string.gsub(result, "[%[%]]", "")
			local result3 = string.gsub(result2, "%d+", "")
			local result4 = string.gsub(result3, "%s+", "")
			local monQName = result4
			
			if selectedSpawn.Name == result4 then
				return selectedSpawn.CFrame
			end
		end
	end
local EnemySpawns = Instance.new("Folder",workspace)
	EnemySpawns.Name = "EnemySpawns"
	for i, v in pairs(workspace._WorldOrigin.EnemySpawns:GetChildren()) do
		if v:IsA("Part") then
			local EnemySpawnsX2 = v:Clone()
			local result = string.gsub(v.Name, "Lv. ", "")
			local result2 = string.gsub(result, "[%[%]]", "")
			local result3 = string.gsub(result2, "%d+", "")
			local result4 = string.gsub(result3, "%s+", "")
			EnemySpawnsX2.Name = result4
			EnemySpawnsX2.Parent = workspace.EnemySpawns
			EnemySpawnsX2.Anchored = true
		end
	end
	for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
		if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
			local EnemySpawnsX2 = v.HumanoidRootPart:Clone()
			local result = string.gsub(v.Name, "Lv. ", "")
			local result2 = string.gsub(result, "[%[%]]", "")
			local result3 = string.gsub(result2, "%d+", "")
			local result4 = string.gsub(result3, "%s+", "")
			EnemySpawnsX2.Name = result4
			EnemySpawnsX2.Parent = workspace.EnemySpawns
			EnemySpawnsX2.Anchored = true
		end
	end
	for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
		if v:IsA("Model") and v:FindFirstChild("HumanoidRootPart") then
			local EnemySpawnsX2 = v.HumanoidRootPart:Clone()
			local result = string.gsub(v.Name, "Lv. ", "")
			local result2 = string.gsub(result, "[%[%]]", "")
			local result3 = string.gsub(result2, "%d+", "")
			local result4 = string.gsub(result3, "%s+", "")
			EnemySpawnsX2.Name = result4
			EnemySpawnsX2.Parent = workspace.EnemySpawns
			EnemySpawnsX2.Anchored = true
		end
	end

    
local AttackRandomType_MonCFrame = 1
local lastRandomUpdate = 0
local RANDOM_UPDATE_INTERVAL = 1 

local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer

local cachedQuestData = nil
local lastQuestCheck = 0
local QUEST_CACHE_DURATION = 2

local function QuestCheck()
    local currentTime = tick()
    
    -- Use cached data if still valid
    if cachedQuestData and (currentTime - lastQuestCheck) < QUEST_CACHE_DURATION then
        return cachedQuestData
    end
    
    local Lvl = LocalPlayer.Data.Level.Value
    
    -- Clear previous values
    local MobName, QuestName, QuestLevel, Mon, NPCPosition, LevelRequire, MobCFrame
    
    -- Handle low levels efficiently
    if Lvl >= 1 and Lvl <= 9 then
        if tostring(LocalPlayer.Team) == "Marines" then
            MobName = "Trainee"
            QuestName = "MarineQuest"
            QuestLevel = 1
            Mon = "Trainee"
            NPCPosition = CFrame.new(-2709.67944, 24.5206585, 2104.24585, -0.744724929, -3.97967455e-08, -0.667371571, 4.32403588e-08, 1, -1.07884304e-07, 0.667371571, -1.09201515e-07, -0.744724929)
        elseif tostring(LocalPlayer.Team) == "Pirates" then
            MobName = "Bandit"
            Mon = "Bandit"
            QuestName = "BanditQuest1"
            QuestLevel = 1
            NPCPosition = CFrame.new(1059.99731, 16.9222069, 1549.28162, -0.95466274, 7.29721794e-09, 0.297689587, 1.05190106e-08, 1, 9.22064114e-09, -0.297689587, 1.19340022e-08, -0.95466274)
        end
        
        cachedQuestData = {
            [1] = QuestLevel,
            [2] = NPCPosition,
            [3] = MobName,
            [4] = QuestName,
            [5] = LevelRequire,
            [6] = Mon,
            [7] = MobCFrame
        }
        lastQuestCheck = currentTime
        return cachedQuestData
    end

    -- Fixed Prisoner Quest Level 1
    if Lvl >= 190 and Lvl <= 209 then
        MobName = "Prisoner"
        QuestName = "PrisonerQuest"
        QuestLevel = 1
        Mon = "Prisoner"
        NPCPosition = CFrame.new(5308.93115, 1.65517521, 475.120514, -0.0894274712, -5.00292918e-09, -0.995993316, 1.60817859e-09, 1, -5.16744869e-09, 0.995993316, -2.06384709e-09, -0.0894274712)
        MobCFrame = getMobCFrame("Prisoner")
        
        cachedQuestData = {
            [1] = QuestLevel,
            [2] = NPCPosition,
            [3] = MobName,
            [4] = QuestName,
            [5] = LevelRequire,
            [6] = Mon,
            [7] = MobCFrame
        }
        lastQuestCheck = currentTime
        return cachedQuestData
    end

    -- Dangerous Prisoner for higher levels
    if Lvl >= 210 and Lvl <= 249 then
        MobName = "Dangerous Prisoner"
        QuestName = "PrisonerQuest"
        QuestLevel = 2
        Mon = "Dangerous Prisoner"
        NPCPosition = CFrame.new(5308.93115, 1.65517521, 475.120514, -0.0894274712, -5.00292918e-09, -0.995993316, 1.60817859e-09, 1, -5.16744869e-09, 0.995993316, -2.06384709e-09, -0.0894274712)
        MobCFrame = getMobCFrame("DangerousPrisoner")
        
        cachedQuestData = {
            [1] = QuestLevel,
            [2] = NPCPosition,
            [3] = MobName,
            [4] = QuestName,
            [5] = LevelRequire,
            [6] = Mon,
            [7] = MobCFrame
        }
        lastQuestCheck = currentTime
        return cachedQuestData
    end
    
    -- Continue with original quest logic but optimized
    local GuideModule = require(ReplicatedStorage.GuideModule)
    local Quests = require(ReplicatedStorage.Quests)
    
    for i,v in pairs(GuideModule["Data"]["NPCList"]) do
        for i1,v1 in pairs(v["Levels"]) do
            if Lvl >= v1 then
                if not LevelRequire then
                    LevelRequire = 0
                end
                if v1 > LevelRequire then
                    NPCPosition = i["CFrame"]
                    QuestLevel = i1
                    LevelRequire = v1
                end
                if #v["Levels"] == 3 and QuestLevel == 3 then
                    NPCPosition = i["CFrame"]
                    QuestLevel = 2
                    LevelRequire = v["Levels"][2]
                end
            end
        end
    end
    
    -- Fishman area teleportation
    if Lvl >= 375 and Lvl <= 449 then
        if _G.AutoFarm and NPCPosition and (NPCPosition.Position - LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 3000 then
            ReplicatedStorage.Remotes.CommF_:InvokeServer("requestEntrance",Vector3.new(61163.8515625, 11.6796875, 1819.7841796875))
        end
    end

    -- Get quest information
    for i,v in pairs(Quests) do
        for i1,v1 in pairs(v) do
            if v1["LevelReq"] == LevelRequire and i ~= "CitizenQuest" then
                QuestName = i
                for i2,v2 in pairs(v1["Task"]) do
                    MobName = i2
                    Mon = string.split(i2," [Lv. ".. v1["LevelReq"] .. "]")[1]
                end
            end
        end
    end
    
    -- Handle special cases
    if QuestName == "MarineQuest2" then
        QuestName = "MarineQuest2"
        QuestLevel = 1
        MobName = "Chief Petty Officer"
        Mon = "Chief Petty Officer"
        LevelRequire = 120
    elseif QuestName == "ImpelQuest" then
        QuestName = "PrisonerQuest"
        QuestLevel = 2
        MobName = "Dangerous Prisoner"
        Mon = "Dangerous Prisoner"
        LevelRequire = 210
        NPCPosition = CFrame.new(5310.60547, 0.350014925, 474.946594, 0.0175017118, 0, 0.999846935, 0, 1, 0, -0.999846935, 0, 0.0175017118)
    elseif QuestName == "SkyExp1Quest" then
        if QuestLevel == 1 then
            NPCPosition = CFrame.new(-4721.88867, 843.874695, -1949.96643, 0.996191859, -0, -0.0871884301, 0, 1, -0, 0.0871884301, 0, 0.996191859)
        elseif QuestLevel == 2 then
            NPCPosition = CFrame.new(-7859.09814, 5544.19043, -381.476196, -0.422592998, 0, 0.906319618, 0, 1, 0, -0.906319618, 0, -0.422592998)
        end
    elseif QuestName == "Area2Quest" and QuestLevel == 2 then
        QuestName = "Area2Quest"
        QuestLevel = 1
        MobName = "Swan Pirate"
        Mon = "Swan Pirate"
        LevelRequire = 775

    elseif QuestName == "TikiQuest1" and QuestLevel == 1 then
            QuestLevel = 1
            MobName = "Isle Outlaw"
            Mon = "Isle Outlaw"
            LevelRequire = 2450
    elseif QuestName == "TikiQuest1" and QuestLevel == 2 then
            QuestLevel = 2
            MobName = "Island Boy"
            Mon = "Island Boy"
            LevelRequire = 2475
    elseif QuestName == "TikiQuest2" and QuestLevel == 1 then
            QuestLevel = 1
            MobName = "Sun-kissed Warrior"
            Mon = "Sun-kissed Warrior"
            LevelRequire = 2500
    elseif QuestName == "TikiQuest2" and QuestLevel == 2 then
            QuestLevel = 2
            MobName = "Isle Champion"
            Mon = "Isle Championr"
            LevelRequire = 2525
    elseif QuestName == "TikiQuest3" and QuestLevel == 1 then
            QuestLevel = 1
            MobName = "Serpent Hunter"
            Mon = "Serpent Hunter"
            LevelRequire = 2550
    elseif QuestName == "TikiQuest3" and QuestLevel == 2 then
            QuestLevel = 2
            MobName = "Skull Slayer"
            Mon = "Skull Slayer"
            LevelRequire = 2575
    elseif QuestName == "SubmergedQuest1" and QuestLevel == 1 then
            QuestLevel = 1 
            MobName = "Reef Bandit"
            Mon = "Reef Bandit"
            LevelRequire = 2600
    elseif QuestName == "SubmergedQuest1" and QuestLevel == 2 then
            QuestLevel = 2
            MobName = "Coral Pirate"
            Mon = "Coral Pirate"
            LevelRequire = 2625
     elseif QuestName == "SubmergedQuest2" and QuestLevel == 1 then
            QuestLevel = 1 
            MobName = "Sea Chanter"
            Mon = "Sea Chanter"
            LevelRequire = 2650
    elseif QuestName == "SubmergedQuest2" and QuestLevel == 2 then
            QuestLevel = 2
            MobName = "Ocean Prophet"
            Mon = "Ocean Prophet"
            LevelRequire = 2675
    end
    
    -- Optimize mob name finding
    if MobName then
        MobName = MobName:sub(1,#MobName)
        if not MobName:find("Lv") then
            -- Check workspace enemies first
            for i,v in pairs(Workspace.Enemies:GetChildren()) do
                local MonLV = string.match(v.Name, "%d+")
                if v.Name:find(MobName) and #v.Name > #MobName and MonLV and tonumber(MonLV) <= Lvl + 50 then
                    MobName = v.Name
                    break -- Exit early when found
                end
            end
        end
        
        -- If still not found, check ReplicatedStorage
        if not MobName:find("Lv") then
            for i,v in pairs(ReplicatedStorage:GetChildren()) do
                local MonLV = string.match(v.Name, "%d+")
                if v.Name:find(MobName) and #v.Name > #MobName and MonLV and tonumber(MonLV) <= Lvl + 50 then
                    MobName = v.Name
                    Mon = v.Name
                    break -- Exit early when found
                end
            end
        end
    end

    -- Get mob CFrame efficiently
    MobCFrame = getMobCFrame(MobName)
    
    -- Cache the result
    cachedQuestData = {
        [1] = QuestLevel,
        [2] = NPCPosition,
        [3] = MobName,
        [4] = QuestName,
        [5] = LevelRequire,
        [6] = Mon,
        [7] = MobCFrame
    }
    lastQuestCheck = currentTime
    
    return cachedQuestData
end

-- Optimized function to get mob CFrame
function getMobCFrame(mobName)
    if not mobName then return {} end
    
    local matchingCFrames = {}
    local result = string.gsub(mobName, "Lv. ", "")
    local result2 = string.gsub(result, "[%[%]]", "")
    local result3 = string.gsub(result2, "%d+", "")
    local result4 = string.gsub(result3, "%s+", "")
    
    for i,v in pairs(Workspace.EnemySpawns:GetChildren()) do
        if v.Name == result4 then
            table.insert(matchingCFrames, v.CFrame)
        end
    end
    
    return matchingCFrames
end
--velocity
spawn(function()
    pcall(function()
        local Players = game:GetService("Players")
        local RunService = game:GetService("RunService")
        local LocalPlayer = Players.LocalPlayer
        local function setupCharacter(Character)
            if not Character then return end

            local HRP = Character:WaitForChild("HumanoidRootPart", 5)
            local Humanoid = Character:WaitForChild("Humanoid", 5)

            if not HRP or not Humanoid then
                warn("HumanoidRootPart or Humanoid not found!")
                return
            end
            local function enableAntiFall()
                Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
                Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, false)
            end

            local function disableAntiFall()
                Humanoid:SetStateEnabled(Enum.HumanoidStateType.FallingDown, true)
                Humanoid:SetStateEnabled(Enum.HumanoidStateType.Freefall, true)
            end

            local function cancelFallState()
                if Humanoid:GetState() == Enum.HumanoidStateType.FallingDown or 
                   Humanoid:GetState() == Enum.HumanoidStateType.Freefall then
                    Humanoid:ChangeState(Enum.HumanoidStateType.Running)
                end
            end
            local steppedConnection
            steppedConnection = RunService.Stepped:Connect(function()
                if not Character.Parent or not LocalPlayer.Character or LocalPlayer.Character ~= Character then
                    steppedConnection:Disconnect()
                    return
                end

                if _G.AutoFarm or _G.NeareastFarm or _G.TeleportIsland or
                   _G.AutoAllBoss or _G.AutoBossSelect or _G.AutoFarmBoss or
                   _G.AutoRainbowHaki or _G.AutoEliteHunter or _G.AutoCastleRaid or 
                   _G.AutoMusketeerHat or _G.AutoBuddySword or
                   _G.AutoFarmBone or _G.AutoKenHakiV2 or _G.AutoObservation or 
                   _G.AutoGodHuman or _G.AutoCavander or
                   _G.AutoCursedDualKatana or _G.AutoYamaSword or _G.AutoTushitaSword or 
                   _G.AutoSerpentBowor or _G.AutoDarkDagger or _G.AutoCakePrince or 
                   _G.AutoDoughV2 or _G.AutoHolyTorch or _G.AutoBuddySwords or 
                   _G.AutoFarmBossHallow or _G.TPTOBOAT or _G.Tushita_Quest2 or _G.Tushita_Quest1 or
                   _G.AutoFarmMaterial or _G.teleporttop or _G.AutoFarmChest or _G.ToDragonHunter or 
                   _G.TptoKisuneIsland or _G.AutoQuestDojo or _G.ToDojo or _G.AutoQuestDojo or 
                   _G.AutoQuestDragonHunter or _G.ncp or _G.TPB or _G.farmseaevent or 
                   _G.dragonhunterquest or _G.BuyBoat or _G.AutoFindIsland or _G.AutoSeabestFarm or 
                   _G.volcanoRocks or _G.AutoSeaBest or _G.Tnpc or _G.CollectBone or
                   --[Mastery]
                   _G.AutoFarmFruitMastery or _G.AutoFarmGunMastery or 
                   --[Raids]
                   _G.AutoRaids or _G.AutoNextPlace or _G.Auto_Kill_Law or _G.Auto_Kill_Players_Nearby then
                    _G.BringMob = true
                    if not Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                        local Noclip = Instance.new("BodyVelocity")
                        Noclip.Name = "BodyClip"
                        Noclip.Parent = Character.HumanoidRootPart
                        Noclip.MaxForce = Vector3.new(100000, 100000, 100000)
                        Noclip.Velocity = Vector3.new(0, 0, 0)
                    end
                    for _, v in pairs(Character:GetDescendants()) do
                        if v:IsA("BasePart") then
                            v.CanCollide = false    
                        end
                    end
                    if not Character:FindFirstChild("Highlight") then
                        local Highlight = Instance.new("Highlight")
                        Highlight.FillColor = Color3.new(0, 0, 0)
                        Highlight.OutlineColor = Color3.new(0, 0, 1) 
                        Highlight.FillTransparency = 0
                        Highlight.OutlineTransparency = 0 
                        Highlight.Parent = Character
                    end
                    enableAntiFall()
                    cancelFallState()
                else
                    _G.BringMob = false
                    if Character.HumanoidRootPart:FindFirstChild("BodyClip") then
                        Character.HumanoidRootPart:FindFirstChild("BodyClip"):Destroy()
                    end
                    if Character:FindFirstChild("Highlight") then
                        Character:FindFirstChild("Highlight"):Destroy()
                    end
                    disableAntiFall()
                end
            end)
        end
        if LocalPlayer.Character then
            setupCharacter(LocalPlayer.Character)
        end
        LocalPlayer.CharacterAdded:Connect(function(newCharacter)
            setupCharacter(newCharacter)
        end)
        LocalPlayer.AncestryChanged:Connect(function()
            if not LocalPlayer:IsDescendantOf(game) then
                if steppedConnection then
                    steppedConnection:Disconnect()
                end
            end
        end)
    end)
end)

-- [BringMon]
task.spawn(function()
    if setscriptable then setscriptable(game.Players.LocalPlayer, "SimulationRadius", true) end
    if sethiddenproperty then sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge) end
end)

function InMyNetWork(object)
    if isnetworkowner then return isnetworkowner(object) end
    return (object.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 500 -- ปรับระยะ
end

local LocalPlayer = game.Players.LocalPlayer

task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.BringMob then
                for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
                    if v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - PosMon.Position).magnitude <= 300 and not string.find(v.Name,"Boss")  then
                        if InMyNetWork(v.HumanoidRootPart) then
                        v.HumanoidRootPart.CFrame = PosMon
                        v.Humanoid.JumpPower = 0
                        v.Humanoid.WalkSpeed = 0
                        v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                        v.HumanoidRootPart.Transparency = 1
                        v.HumanoidRootPart.CanCollide = false
                        v.Head.CanCollide = false
                        if v.Humanoid:FindFirstChild("Animator") then
                            v.Humanoid.Animator:Destroy()
                        end
                        v.Humanoid:ChangeState(11)
                        v.Humanoid:ChangeState(14)
                        sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius",  math.huge)
                    end
                    end
                end
            end
        end)
    end
end)

if game.Players.LocalPlayer.Character:FindFirstChild("Stun") then
	game.Players.LocalPlayer.Character.Stun.Changed:connect(function()
		pcall(function()
			if game.Players.LocalPlayer.Character:FindFirstChild("Stun") then
				game.Players.LocalPlayer.Character.Stun.Value = 0
			end
		end)
	end)
end

function DisabledDamage()
    task.spawn(function()
        game:GetService('RunService').Stepped:Connect(function()
            pcall(function()
                if _G.Disdamage then
                    game:GetService("ReplicatedStorage").Assets.GUI.DamageCounter.Enabled = false
                else
                    game:GetService("ReplicatedStorage").Assets.GUI.DamageCounter.Enabled = true
                end
            end)
        end)
    end)
    spawn(function()
        game:GetService('RunService').Stepped:Connect(function()
            for i, v in pairs(game:GetService("Workspace")["_WorldOrigin"]:GetChildren()) do
                pcall(function()
                    if v.Name == "CurvedRing" or v.Name == "SlashHit" or v.Name == "SwordSlash" then
                        v:Destroy()
                    end
                end)
            end
        end)
    end)
    spawn(function()
        game:GetService('RunService').Stepped:Connect(function()
                for i, v in pairs(game:GetService("ReplicatedStorage").Effect.Container:GetChildren()) do
                    pcall(function()
                        if v.Name == "Death" then
                        v:Destroy() 
                    end
                end)
            end
        end)
    end)
end

function Com(com, ...)
local Remote = game:GetService('ReplicatedStorage').Remotes:FindFirstChild("Comm" .. com)
if Remote:IsA("RemoteEvent") then
Remote:FireServer(...)
elseif Remote:IsA("RemoteFunction") then
Remote:InvokeServer(...)
end
end

local activeTweens = {}

loadstring(game:HttpGet('https://raw.githubusercontent.com/7878wqz/sc1/refs/heads/main/fatbbff2'))()

function TPB(CFgo, vehicleSeat)
    local tween_s = game:GetService("TweenService")
    if vehicleSeat then
        print("TPB called to", CFgo.Position)
        local info = TweenInfo.new((vehicleSeat.CFrame.Position - CFgo.Position).Magnitude / 350, Enum.EasingStyle.Linear)
        local tween = tween_s:Create(vehicleSeat, info, {CFrame = CFgo})
        tween:Play()
        table.insert(activeTweens, tween)
        return { Stop = function() tween:Cancel() end }
    end
end


local tween 

local function GetIsLand(...)
    local RealtargetPos = { ... }
    local targetPos = RealtargetPos[1]
    local RealTarget
    
    if type(targetPos) == "vector" then
        RealTarget = targetPos
    elseif type(targetPos) == "userdata" then
        RealTarget = targetPos.Position
    elseif type(targetPos) == "number" then
        RealTarget = CFrame.new(unpack(RealtargetPos))
        RealTarget = RealTarget.Position
    end

    local ReturnValue
    local CheckInOut = math.huge
    
    if game.Players.LocalPlayer.Team then
        local teamSpawns = game.Workspace._WorldOrigin.PlayerSpawns:FindFirstChild(tostring(game.Players.LocalPlayer.Team))
        if teamSpawns then
            for i, v in pairs(teamSpawns:GetChildren()) do
                local ReMagnitude = (RealTarget - v:GetModelCFrame().Position).Magnitude 
                if ReMagnitude < CheckInOut then
                    CheckInOut = ReMagnitude
                    ReturnValue = v.Name
                end
            end
        end
        if ReturnValue then
            return ReturnValue
        end
    end
end

local GlobalEnv = (getgenv or getrenv or getfenv)()
local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")

GlobalEnv.hasRotated = GlobalEnv.hasRotated or false

local function toTarget(...)
    local RealtargetPos = { ... }
    local targetPos = RealtargetPos[1]
    local RealTarget
    
    if type(targetPos) == "vector" then
        RealTarget = CFrame.new(targetPos)
    elseif type(targetPos) == "userdata" then
        RealTarget = targetPos
    elseif type(targetPos) == "number" then
        RealTarget = CFrame.new(unpack(RealtargetPos))
    end

    -- ตรวจสอบว่าตัวละครตายหรือไม่
    if Players.LocalPlayer.Character:WaitForChild("Humanoid").Health == 0 then
        if tween then 
            tween:Cancel() 
        end
        repeat 
            wait() 
        until Players.LocalPlayer.Character:WaitForChild("Humanoid").Health > 0 
        wait(0.2)
    end

    local tweenfunc = {}
    local playerPos = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position
    local targetPos = RealTarget.Position
    
    local Distance = math.sqrt((targetPos.X - playerPos.X)^2 + (targetPos.Z - playerPos.Z)^2)
    local Speed
    
    if not GlobalEnv.hasRotated and Distance >= 200 then
        Players.LocalPlayer.Character.HumanoidRootPart.CFrame = Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 180, 0)
        GlobalEnv.hasRotated = true
       
    end

    if Distance < 5 then
        return {
            Stop = function() end,
            Wait = function() end
        }
    end
    
    if Distance < 50 then
        Speed = 1000
        RealTarget = RealTarget * CFrame.new(0, 0, 0)
    elseif Distance < 150 then
        Speed = 1000
        RealTarget = RealTarget * CFrame.new(0, 180, 0)
    elseif Distance < 250 then
        Speed = 600 
        RealTarget = RealTarget * CFrame.new(0, 180, 0)
    elseif Distance < 500 then
        Speed = 350
        RealTarget = RealTarget * CFrame.new(0, 180, 0)
    elseif Distance < 750 then
        Speed = 300
        RealTarget = RealTarget * CFrame.new(0, 180, 0)
    else 
        Speed = 250
        local currentPos = playerPos
        local newY = currentPos.Y + 180
        RealTarget = CFrame.new(RealTarget.Position.X, newY, RealTarget.Position.Z)
    end 

    local info = TweenInfo.new(
        Distance / Speed, 
        Enum.EasingStyle.Linear
    )
    
    local tweenw, err = pcall(function()
        tween = TweenService:Create(Players.LocalPlayer.Character["HumanoidRootPart"], info, { CFrame = RealTarget })
        tween:Play()
        
        spawn(function()
            while tween and tween.PlaybackState == Enum.PlaybackState.Playing do
                wait(0.1)
                local currentPos = Players.LocalPlayer.Character:WaitForChild("HumanoidRootPart").Position
                local currentDistance = math.sqrt((targetPos.X - currentPos.X)^2 + (targetPos.Z - currentPos.Z)^2)
                
                if currentDistance < 5 then
                    tween:Cancel()
                    break
                end
            end
            -- รีเซ็ต hasRotated เมื่อ Tween เสร็จสิ้น (ถ้าต้องการให้หมุนได้อีกครั้งใน Tween ถัดไป)
            GlobalEnv.hasRotated = false
        end)
    end)
    
    if not tweenw then
        warn("Tween creation failed: " .. tostring(err))
    end
    
    function tweenfunc:Stop()
        if tween then
            tween:Cancel()
        end
    end
    
    function tweenfunc:Wait()
        if tween then
            tween.Completed:Wait()
        end
    end

    return tweenfunc
end

function GetDistance(target)
	return math.floor((target.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude)
end

local activeTweens = {}

local function tweenModel(model, goToCFrame)
    activeTweens = {}

    local owner = model:FindFirstChild("Owner")
    if owner and owner:IsA("ObjectValue") and owner.Value then
        local ownerName = owner.Value.Name
        if ownerName == game.Players.LocalPlayer.Name then
            local TweenService = game:GetService("TweenService")
            for _, part in pairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    local info = TweenInfo.new((part.Position - goToCFrame.Position).Magnitude / 200, Enum.EasingStyle.Linear)
                    local tween = TweenService:Create(part, info, { CFrame = goToCFrame })
                    tween:Play()
                    table.insert(activeTweens, tween)
                end
            end
        end
    end
end

local function stopBoatF()
    for _, tween in pairs(activeTweens) do
        if tween then
            tween:Cancel()
        end
    end
    activeTweens = {} 
end

_G.stopBoatF = stopBoatF



function Hop()
repeat wait() until game:IsLoaded() and game.Players.LocalPlayer
local HttpService, TPService = game:GetService "HttpService", game:GetService "TeleportService";
local OtherServers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/r/games/" ..
game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
function joinNew()
if not isfile('servers.sss') then
writefile('servers.sss', HttpService:JSONEncode({}))
end
local dontJoin = readfile('servers.sss')
dontJoin = HttpService:JSONDecode(dontJoin)

for Index, Server in next, OtherServers["data"] do
if Server ~= game.JobId then
    local j = true
    for a, c in pairs(dontJoin) do
        if c == Server.id then
            j = false
        end
    end
    if j then
        table.insert(dontJoin, Server["id"])
        writefile("servers.sss", HttpService:JSONEncode(dontJoin))
        wait()
        return Server['id']
    end
end
end
end

local server = joinNew()
if not server then
writefile("servers.sss", HttpService:JSONEncode({}))
local server = joinNew()
TPService:TeleportToPlaceInstance(game.PlaceId, server)
else
TPService:TeleportToPlaceInstance(game.PlaceId, server)
end
end

function GetFightingStyle(Style)
ReturnText = ""
for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
if v:IsA("Tool") then
    if v.ToolTip == Style then
        ReturnText = v.Name
    end
end
end
for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
if v:IsA("Tool") then
    if v.ToolTip == Style then
        ReturnText = v.Name
    end
end
end
if ReturnText ~= "" then
return ReturnText
else
return "Not Have"
end
end

function CheckMasteryWeapon(NameWe, MasNum)
if game.Players.LocalPlayer.Backpack:FindFirstChild(NameWe) then
if tonumber(game.Players.LocalPlayer.Backpack:FindFirstChild(NameWe).Level.Value) < tonumber(MasNum) then
    return "true DownTo"
elseif tonumber(game.Players.LocalPlayer.Backpack:FindFirstChild(NameWe).Level.Value) >= tonumber(MasNum) then
    return "true UpTo"
end
end
if game.Players.LocalPlayer.Character:FindFirstChild(NameWe) then
if tonumber(game.Players.LocalPlayer.Character:FindFirstChild(NameWe).Level.Value) < tonumber(MasNum) then
    return "true DownTo"
elseif tonumber(game.Players.LocalPlayer.Character:FindFirstChild(NameWe).Level.Value) >= tonumber(MasNum) then
    return "true UpTo"
end
end
return "else"
end

local AllMaterial
if World3 then
    AllMaterial = {"Mini Tusk","Fish Tail","Scrap Metal","Dragon Scale","Conjured Cocoa","Demonic Wisp","Gunpowder",}
end

table.sort(AllMaterial)

local function CustomFindFirstChild(tablename)
for i, v in pairs(tablename) do
if game:GetService("Workspace").Enemies:FindFirstChild(v) then
    return true
end
end
return false
end


local AllMaterial
if World3 then
    AllMaterial = {"Mini Tusk","Fish Tail","Scrap Metal","Dragon Scale","Conjured Cocoa","Demonic Wisp","Gunpowder",}
end
table.sort(AllMaterial)
local function CustomFindFirstChild(tablename)
for i, v in pairs(tablename) do
if game:GetService("Workspace").Enemies:FindFirstChild(v) then
    return true
end
end
return false
end
local function CheckMaterial(v1)
if World3 then
    if (v1 == "Mini Tusk") then
        MaterialMob = { "Mythological Pirate" };
        CFrameMon = CFrame.new(-13545, 470, -6917);
    elseif (v1 == "Fish Tail") then
        MaterialMob = { "Fishman Raider", "Fishman Captain" };
        CFrameMon = CFrame.new(-10993, 332, -8940);
    elseif (v1 == "Scrap Metal") then
        MaterialMob = { "Jungle Pirate" };
        CFrameMon = CFrame.new(-12107, 332, -10549);
    elseif (v1 == "Dragon Scale") then
        MaterialMob = { "Dragon Crew Archer", "Dragon Crew Warrior" };
        CFrameMon = CFrame.new(6594, 383, 139);
    elseif (v1 == "Conjured Cocoa") then
        MaterialMob = { "Cocoa Warrior", "Chocolate Bar Battler", "Sweet Thief",
            "Candy Rebel" };
        CFrameMon = CFrame.new(620.6344604492188, 78.93644714355469, -12581.369140625);
    elseif (v1 == "Demonic Wisp") then
        MaterialMob = { "Demonic Soul" };
        CFrameMon = CFrame.new(-9507, 172, 6158);
    elseif (v1 == "Gunpowder") then
        MaterialMob = { "Pistol Billionaire" };
        CFrameMon = CFrame.new(-469, 74, 5904);
    end
    end
end
    local Update = loadstring(game:HttpGet("https://raw.githubusercontent.com/ajkd2e2141sdf121415643dfvbcw347584fgh3o/hmm/refs/heads/main/s2"))()
    local Library = Update:Window("Vector Hub","","",Enum.KeyCode.F1);
    local page15 = Library:Tab("Status\nสเตตัส","rbxassetid://16149111731")
    local page1 = Library:Tab("General\nหน้าหลัก","rbxassetid://6034798461")
    local page2 = Library:Tab("Settings\nตั้งค่า","rbxassetid://11446835336")
    local page3 = Library:Tab("Stats\nสแตค","rbxassetid://15011214293")
    local page4 = Library:Tab("Teleport\nเทเลพอร์ต","rbxassetid://12689978575")
    local page13 = Library:Tab("PvP\nต่อสู้","rbxassetid://7485051715")
    local page6 = Library:Tab("Mastery\nมาสเตอรี่","rbxassetid://93438777054599")
    local page7 = Library:Tab("DevilFruit\nผลปีศาจ","rbxassetid://130882646")
    local page8 = Library:Tab("Raid\nดันเจี้ยน","rbxassetid://13180179055")
    local page9 = Library:Tab("MirageIsland\nเกาะลับ","rbxassetid://12598594243")
    local page10 = Library:Tab("Race\nเผ่า","rbxassetid://7558782590")
    local page5 = Library:Tab("Items\nไอเท็ม","rbxassetid://12499842920")
    local page14 = Library:Tab("Sea Event\nอีเว้นท์ทะเล","rbxassetid://12242931738")
    local page16 = Library:Tab("Dragon Event\nอีเว้นท์มังกร","rbxassetid://12709225756")
    local page11 = Library:Tab("Shop\nร้านค้า","rbxassetid://6031265976")
    local page12 = Library:Tab("Other\nอื่นๆ","rbxassetid://11447063791")
    Time = page15:Label("..")
    page15:Label("[Username] : "..game.Players.LocalPlayer.DisplayName)
    function UpdateTime()
    local GameTime = math.floor(workspace.DistributedGameTime+0.5)
    local Hour = math.floor(GameTime/(60^2))%24
    local Minute = math.floor(GameTime/(60^1))%60
    local Second = math.floor(GameTime/(60^0))%60
    Time:Set("[GameTime] : Hour : "..Hour.." Minute : "..Minute.." Second : "..Second)
    end
    
    spawn(function()
        while task.wait() do
            pcall(function()
            UpdateTime()
            end)
        end
    end)
    
    Client = page15:Label1("Client")
    function UpdateClient()
    local Fps = workspace:GetRealPhysicsFPS()
    Client:Refresh("[Fps] : "..Fps)
    end
    
    spawn(function()
        while true do wait(.1)
        UpdateClient()
        end
    end)
    
    Client1 = page15:Label1("Client")
    function UpdateClient1()
    local Ping = game:GetService("Stats").Network.ServerStatsItem["Data Ping"]:GetValueString()
    Client1:Refresh("[Ping] : "..Ping)
    end
    spawn(function()
        while true do wait(.1)
        UpdateClient1()
        end
    end)
    
    local Mirragecheck = page15:Label('...')
spawn(function()
    pcall(function()
        while task.wait() do
            if game.Workspace._WorldOrigin.Locations:FindFirstChild('Mirage Island') then
                Mirragecheck:Set('Status MirageIsland : 🟢\nสถานะเกาะลับ')
            else
                Mirragecheck:Set('Status MirateIsland : 🔴\nสถานะเกาะลับ')
            end
        end
    end)
end)

local Kitsunecheck = page15:Label('...')
spawn(function()
    pcall(function()
        while task.wait() do
            if game.Workspace._WorldOrigin.Locations:FindFirstChild('Kitsune Island') then
                Kitsunecheck:Set('Status KitsuneIsland : 🟢\nสถานะเกาะจิ้งจอก')
            else
                Kitsunecheck:Set('Status KitsuneIsland : 🔴\nสถานะเกาะจิ้งจอก')
            end
        end
    end)
end)

local PrehistoricIslandcheck = page15:Label('...')
spawn(function()
    pcall(function() 
        while task.wait() do
            if game.Workspace._WorldOrigin.Locations:FindFirstChild('Prehistoric Island') then
                PrehistoricIslandcheck:Set('Status PrehistoricIsland : 🟢\nสถานะเกาะภูเขาไฟ')
            else
                PrehistoricIslandcheck:Set('Status PrehistoricIsland : 🔴\nสถานะเกาะภูเขาไฟ')
            end
        end
    end)
end)


local FM = page15:Label('...')
task.spawn(function()
    while task.wait() do
        pcall(function()
            if game:GetService("Lighting").Sky.MoonTextureId=="http://www.roblox.com/asset/?id=9709149431" then
                FM:Set("Status Moon : 5/5 🌕\nสถานะดวงจันทร์")
            elseif game:GetService("Lighting").Sky.MoonTextureId=="http://www.roblox.com/asset/?id=9709149052" then
                FM:Set("Status Moon : 4/5 🌖\nสถานะดวงจันทร์")
            elseif game:GetService("Lighting").Sky.MoonTextureId=="http://www.roblox.com/asset/?id=9709143733" then
                FM:Set("Status Moon : 3/5 🌗\nสถานะดวงจันทร์")
            elseif game:GetService("Lighting").Sky.MoonTextureId=="http://www.roblox.com/asset/?id=9709150401" then
                FM:Set("Status Moon : 2/5 🌘\nสถานะดวงจันทร์")
            elseif game:GetService("Lighting").Sky.MoonTextureId=="http://www.roblox.com/asset/?id=9709149680" then
                FM:Set("Status Moon : 1/5 🌘\nสถานะดวงจันทร์")
            else
                FM:Set("Status Moon : 0/5 🌘\nสถานะดวงจันทร์")
            end
        end)
    end
end)
page15:Label("Join Discord For News\nเข้าดิสคอร์ดเพื่อข่าวสารต่างๆ")
page15:Button("Copy Link Discord\nก็อปปี้ลิ้งดิสคอร์ด",function()
    setclipboard("https://discord.gg/977JQXX82w")
game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "คัดลอกเรียบร้อยแล้ว",Icon = "rbxassetid://16129235054",Duration = 3})
end)
page1:Seperator("🏠")
page1:Toggle("AutoFarmLevel\nออโต้ฟาร์มเลเวล", _G.Settings.AutoFarm, function(value)
    _G.AutoFarm = value
    _G.Settings.AutoFarm = value
    SaveSettings()
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)  

page1:Toggle("SafeMode\nเซฟโหมด", _G.Settings.SafeMode, function(value)
_G.SafeMode = value
_G.Settings.SafeMode = value
SaveSettings()
local HealthPercent = game.Players.LocalPlayer.Character.Humanoid.Health / game.Players.LocalPlayer.Character.Humanoid.MaxHealth * 100
if HealthPercent < 20 then
Vec("<Color=Cyan>SafeModeRunning..\nเซฟโหมดทำงาน..<Color=/>")  
end
spawn(function()
    while _G.Settings.SafeMode do task.wait()
        if game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("Humanoid") then
            if HealthPercent < 20 then
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 100, 0)
            end
        end
        task.wait()
    end
end)
end)
            
page1:Toggle("NeareastFarm\nฟาร์มมอนรอบๆ", _G.Settings.NeareastFarm, function(value)
    _G.NeareastFarm = value
    _G.Settings.NeareastFarm = value
    SaveSettings() 
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
    
spawn(function()
    while wait(.1) do
        if _G.Settings.NeareastFarm then
            pcall(function()
                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                    if v.Name and v:FindFirstChild("Humanoid") then
                        if v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 1500 then
                            repeat
                                game:GetService("RunService").Heartbeat:wait()
                                EquipWeapon(_G.SelectWeapon)
                                if not game.Players.LocalPlayer.Character:FindFirstChild("HasBuso") then
                                    local args = {
                                        [1] = "Buso"
                                    }
                                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                                end
                                PosMon = v.HumanoidRootPart.CFrame
                                v.HumanoidRootPart.CanCollide = false
                                v.Humanoid.WalkSpeed = 0
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                v.Humanoid:ChangeState(11)
                                v.Humanoid:ChangeState(14)
                                v.Humanoid:ChangeState(16)
                                BringMob = true
                                FastAttack = true
                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                if not FastAttack then
                                game:GetService 'VirtualUser':CaptureController()
                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                end
                                
                                PosMon = v.HumanoidRootPart.CFrame
                            until not _G.NeareastFarm or not v.Parent or v.Humanoid.Health == 0 or not game.Workspace.Enemies:FindFirstChild(v.Name)
                        end
                    end
                end
            end)
        end
    end
end)
            
     

AttackRandomType_MonCFrame = 1
spawn(function()
    while wait() do 
        AttackRandomType_MonCFrame = math.random(1,5)
        wait(0.2)
    end
end)     
_G.Auto_CFrame = true
local SetCFarme = 1
spawn(function()
    while task.wait() do
        local MyLevel = game.Players.LocalPlayer.Data.Level.Value
        local QuestC = game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest
        pcall(function()
            if _G.AutoFarm then  
                if QuestC.Visible == true then
                    if game:GetService("Workspace").Enemies:FindFirstChild(QuestCheck()[3]) then
                        for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                            if v.Name == QuestCheck()[3] then
                                if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                    repeat task.wait()
                                        if _G.Auto_CFrame then
                                            SetCFarme = 1
                                        end
                                        if not string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, QuestCheck()[6]) then
                                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                                        else
                                            PosMon = v.HumanoidRootPart.CFrame
                                            v.HumanoidRootPart.Size = Vector3.new(60,60,60)
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid.WalkSpeed = 0
                                            v.Head.CanCollide = false
                                            _G.BringMob = true
                                            EquipWeapon(_G.SelectWeapon)
                                            v.HumanoidRootPart.Transparency = 1
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        end
                                    until not _G.AutoFarm or not v.Parent or v.Humanoid.Health < 1 or QuestC.Visible == false or not v:FindFirstChild("HumanoidRootPart")
                                end
                            end
                        end
                    else
                        if _G.Auto_CFrame and not _G.AutoFarmFast then
                            toTarget(QuestCheck()[7][SetCFarme] * MethodFarm)
                            if (QuestCheck()[7][SetCFarme].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                if SetCFarme == nil or SetCFarme == '' then
                                    SetCFarme = 1
                                elseif SetCFarme >= #QuestCheck()[7] then
                                    SetCFarme = 1
                                end
                                SetCFarme =  SetCFarme + 1
                                wait(0.5)
                            end
                        else
                            if not _G.AutoFarmFast then
                                if AttackRandomType_MonCFrame == 1 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                                elseif AttackRandomType_MonCFrame == 2 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,-20))
                                elseif AttackRandomType_MonCFrame == 3 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(20,30,0))
                                elseif AttackRandomType_MonCFrame == 4 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,-20))
                                elseif AttackRandomType_MonCFrame == 5 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(-20,30,0))
                                else
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                                end
                            end
                        end
                    end
                else
                    toTarget(QuestCheck()[2])
                    if (QuestCheck()[2].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 1 then
                        _G.BringMob = false
                        wait(0.2)
                        game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer("StartQuest", QuestCheck()[4], QuestCheck()[1]) wait(0.5)
                        toTarget(QuestCheck()[7][1] * MethodFarm)
                        if AttackRandomType_MonCFrame == 1 then
                            toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                        elseif AttackRandomType_MonCFrame == 2 then 
                            toTarget(QuestCheck()[7][1] * CFrame.new(0,30 ,-20))
                        elseif AttackRandomType_MonCFrame == 3 then
                            toTarget(QuestCheck()[7][1] * CFrame.new(20,30 ,0))
                        elseif AttackRandomType_MonCFrame == 4 then
                            toTarget(QuestCheck()[7][1] * CFrame.new(0,30 ,-20))
                        elseif AttackRandomType_MonCFrame == 5 then
                            toTarget(QuestCheck()[7][1] * CFrame.new(-20,30 ,0))
                        else
                            toTarget(QuestCheck()[7][1] * CFrame.new(0,30 ,20))
                        end
                    end
                end
            end
        end)
    end
end)
    
    page1:Seperator("Chest/กล่อง")
    page1:Toggle("Auto Farm Chest [Tween]\nฟาร์มกล่อง [บินเก็บ]", _G.Settings.AutoFarmChest, function(value)
        _G.AutoFarmChest = value
        _G.Settings.AutoFarmChest = value
            SaveSettings()
        if value == false then
            toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        end
        end)
        page1:Toggle("Auto Farm Chest [Fast:Risk]\nฟาร์มกล่อง [เร็ว:เสี่ยง]", _G.ChestBypass, function(value)
        _G.ChestBypass = value
        end)
        
        local islands = {}
    if World3 then 
        islands = {
            "Boat Castle",
            "CakeLoaf",
            "CakeLoaf",
            "Fishmen",
            "ChocolateIsland",
            "Great Tree",
            "Haunted Castle",
            "Ice Cream Island",
            "MiniSky",
            "Peanut Island",
            "Port",
            "Temple of Time",
            "TikiOutpost",
            "Turtle",
            "Waterfall"
        }
        end
    _G.MagnitudeAdd = 0
    local function getDistance(objCFrame)
        local hrp = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if hrp and objCFrame then
            return (objCFrame.Position - hrp.Position).Magnitude
        end
        return math.huge
    end
    
    spawn(function()
        while task.wait() do
            if _G.AutoFarmChest or _G.ChestBypass then
                local workspace = game:GetService("Workspace")
                local hrp = game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if not hrp then wait() end
                local allChests = {}
                for _, islandName in pairs(islands) do
                    local island = workspace.Map:FindFirstChild(islandName)
                    if island then
                        for _, v in pairs(island:GetDescendants()) do
                            if string.find(v.Name, "Chest") and v:IsA("BasePart") then
                                table.insert(allChests, v)
                            end
                        end
                    end
                end
                local chestModels = workspace:FindFirstChild("ChestModels")
                if chestModels then
                    for _, v in pairs(chestModels:GetDescendants()) do
                        if string.find(v.Name, "Chest") and v:IsA("BasePart") then
                            table.insert(allChests, v)
                        end
                    end
                end
                table.sort(allChests, function(a, b)
                    return getDistance(a.CFrame) < getDistance(b.CFrame)
                end)
                for _, chest in ipairs(allChests) do
                    local distance = getDistance(chest.CFrame)
                    if distance <= (_G.MagnitudeAdd + 3000) then
                        if _G.AutoFarmChest then
                            local tweenFunc = toTarget(chest.CFrame)
                            tweenFunc:Wait()
                            _G.MagnitudeAdd = _G.MagnitudeAdd + 1500
                        elseif _G.ChestBypass then
                            hrp.CFrame = chest.CFrame
                            _G.MagnitudeAdd = _G.MagnitudeAdd + 1500
                        end
                        task.wait(0.5)
                    end
                end
            end
        end
    end)
    if World3 then 
        page1:Seperator("Status : World 3\nสถานะ : โลก 3")
            page1:Toggle("Auto RainbowHaki\nทำฮาคิสีรุ้ง", _G.AutoRainbowHaki,function(value)
                _G.AutoRainbowHaki = value
                    if value == false then
                        task.wait()
                        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
                        task.wait()
                    end
                end)
        task.spawn(function()
            while task.wait() do
                pcall(function()
                    if _G.AutoRainbowHaki then
                        if game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false then
                            toTarget(CFrame.new(-11892.0703125, 930.57672119141, -8760.1591796875))
                            if (Vector3.new(-11892.0703125, 930.57672119141, -8760.1591796875) - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 30 then
                                wait(1.5)
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("HornedMan","Bet")
                            end
                        elseif game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == true and string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Stone") then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Stone") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Stone" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoRainbowHaki or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                                        BringMob = false
                                        FastAttack = false
                                    end
                                end
                            else
                                toTarget(CFrame.new(-1086.11621, 38.8425903, 6768.71436, 0.0231462717,-0.592676699,0.805107772, 2.03251839e-05, 0.805323839, 0.592835128, -0.999732077,-0.0137055516, 0.0186523199))
                            end
                        elseif game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == true and string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Island Empress") then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Island Empress") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Island Empress" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoRainbowHaki or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                                        BringMob = false
                                        FastAttack = false
                                    end
                                end
                            else
                                toTarget(CFrame.new(5713.98877, 601.922974, 202.751251, -0.101080291, -0,-0.994878292, -0, 1, -0, 0.994878292, 0, -0.101080291))
                            end
                        elseif string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Kilo Admiral") then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Kilo Admiral") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Kilo Admiral" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoRainbowHaki or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                                        BringMob = false
                                        FastAttack = false
                                    end
                                end
                            else
                                toTarget(CFrame.new(2877.61743, 423.558685, -7207.31006, -0.989591599, -0,-0.143904909, -0, 1.00000012, -0, 0.143904924, 0, -0.989591479))
                            end
                        elseif string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Captain Elephant") then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Captain Elephant") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Captain Elephant" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoRainbowHaki or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                                        BringMob = false
                                            FastAttack = false
                                    end
                                end
                            else
                                toTarget(CFrame.new(-13485.0283, 331.709259, -8012.4873, 0.714521289,7.98849911e-08,0.69961375, -1.02065748e-07, 1, -9.94383065e-09, -0.69961375, -6.43015241e-08,0.714521289))
                            end
                        elseif string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Beautiful Pirate") then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Beautiful Pirate") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Beautiful Pirate" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoRainbowHaki or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                                        BringMob = false
                                        FastAttack = false
                                    end
                                end
                            else
                                toTarget(CFrame.new(5312.3598632813, 20.141201019287, -10.158538818359))
                            end
                        else
                            toTarget(CFrame.new(-11892.0703125, 930.57672119141, -8760.1591796875))
                            if (Vector3.new(-11892.0703125, 930.57672119141, -8760.1591796875) - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 30 then
                                wait(1.5)
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("HornedMan","Bet")
                            end
                        end
                    end
                end)
            end
        end)         
        
        page1:Toggle("Auto HolyTorch\nnจุดคบเพลิง", _G.AutoHolyTorch, function(value)
            _G.AutoHolyTorch = value
            if value == false then
                toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
            end
        end)
        
        spawn(function()
            while wait() do
                if _G.AutoHolyTorch then
                    if game.ReplicatedStorage:FindFirstChild("rip_indra True Form [Lv. 5000] [Raid Boss]") or game.Workspace.Enemies:FindFirstChild("rip_indra True Form [Lv. 5000] [Raid Boss]") and game:GetService("Workspace").Map.Turtle.TushitaGate.TushitaGate.Transparency == 1 then
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Holy Torch") then
                            EquipWeapon("Holy Torch")
                        elseif game.Players.LocalPlayer.Character:FindFirstChild("Holy Torch") then
                            if game:GetService("Workspace").Map.Turtle.QuestTorches.Torch1.Particles.Main.Enabled ~= true then
                                if (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch1.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 300 then
                                    HolyTorchtween = toTarget(game:GetService("Workspace").Map.Turtle.QuestTorches.Torch1.Position,game:GetService("Workspace").Map.Turtle.QuestTorches.Torch1.CFrame)
                                elseif (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch1.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 300 then
                                    if HolyTorchtween then
                                        HolyTorchtween:Stop()
                                    end
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Map.Turtle.QuestTorches.Torch1.CFrame
                                end
                            elseif game:GetService("Workspace").Map.Turtle.QuestTorches.Torch2.Particles.Main.Enabled ~= true then
                                if (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch2.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 300 then
                                    HolyTorchtween = toTarget(game:GetService("Workspace").Map.Turtle.QuestTorches.Torch2.Position,game:GetService("Workspace").Map.Turtle.QuestTorches.Torch2.CFrame)
                                elseif (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch2.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 300 then
                                    if HolyTorchtween then
                                        HolyTorchtween:Stop()
                                    end
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Map.Turtle.QuestTorches.Torch2.CFrame
                                end
                            elseif game:GetService("Workspace").Map.Turtle.QuestTorches.Torch3.Particles.Main.Enabled ~= true then
                                if (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch3.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 300 then
                                    HolyTorchtween = toTarget(game:GetService("Workspace").Map.Turtle.QuestTorches.Torch3.Position,game:GetService("Workspace").Map.Turtle.QuestTorches.Torch3.CFrame)
                                elseif (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch3.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 300 then
                                    if HolyTorchtween then
                                        HolyTorchtween:Stop()
                                    end
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Map.Turtle.QuestTorches.Torch3.CFrame
                                end
                            elseif game:GetService("Workspace").Map.Turtle.QuestTorches.Torch4.Particles.Main.Enabled ~= true then
                                if (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch4.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 300 then
                                    HolyTorchtween = toTarget(game:GetService("Workspace").Map.Turtle.QuestTorches.Torch4.Position,game:GetService("Workspace").Map.Turtle.QuestTorches.Torch4.CFrame)
                                elseif (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch4.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 300 then
                                    if HolyTorchtween then
                                        HolyTorchtween:Stop()
                                    end
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Map.Turtle.QuestTorches.Torch4.CFrame
                                end
                            elseif game:GetService("Workspace").Map.Turtle.QuestTorches.Torch5.Particles.Main.Enabled ~= true then
                                if (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch5.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 300 then
                                    HolyTorchtween = toTarget(game:GetService("Workspace").Map.Turtle.QuestTorches.Torch5.Position,game:GetService("Workspace").Map.Turtle.QuestTorches.Torch5.CFrame)
                                elseif (game:GetService("Workspace").Map.Turtle.QuestTorches.Torch5.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 300 then
                                    if HolyTorchtween then
                                        HolyTorchtween:Stop()
                                    end
                                    game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game.Workspace.Map.Turtle.QuestTorches.Torch5.CFrame
                                end
                            end
                        else
                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Map.Waterfall.SecretRoom.Room.Door.Door.Hitbox.CFrame
                        end
                    end
                end
            end
        end)
        
        function Elite()
                task.spawn(function()
                    while task.wait() do
                        pcall(function()
                            if _G.AutoEliteHunter then
                                if game.Players.LocalPlayer.PlayerGui.Main.Quest.Visible == true then
                                    if string.find(game.Players.LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Diablo") or string.find(game.Players.LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Urban") or string.find(game.Players.LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Deandre") then
                                        for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
                                            if string.find(v.Name, "Diablo") then
                                                EliteHunter = toTarget(v.HumanoidRootPart.CFrame)
                                                if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 150 then
                                                    if EliteHunter then
                                                        EliteHunter:Stop()
                                                    end
                                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v
                                                        .HumanoidRootPart.CFrame
                                                end
                                            end
                                            if string.find(v.Name, "Urban") then
                                                EliteHunter = toTarget(v.HumanoidRootPart.CFrame)
                                                if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 150 then
                                                    if EliteHunter then
                                                        EliteHunter:Stop()
                                                    end
                                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v
                                                        .HumanoidRootPart.CFrame
                                                end
                                            end
                                            if string.find(v.Name, "Deandre") then
                                                EliteHunter = toTarget(v.HumanoidRootPart.CFrame)
                                                if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 150 then
                                                    if EliteHunter then
                                                        EliteHunter:Stop()
                                                    end
                                                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v
                                                        .HumanoidRootPart.CFrame
                                                end
                                            end
                                        end
                                        for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
                                            if _G.AutoEliteHunter and string.find(v.Name, "Diablo") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                                repeat
                                                    task.wait()
                                                    if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 150 then
                                                        Farmtween = toTarget(v.HumanoidRootPart.CFrame)
                                                    elseif (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 150 then
                                                        if Farmtween then
                                                            Farmtween:Stop()
                                                        end
                                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v .HumanoidRootPart.CFrame * MethodFarm
                                                        FastAttack = true
                                                        EquipWeapon(_G.SelectWeapon)
                                                    end
                                                until not _G.AutoEliteHunter or not v.Parent or v.Humanoid.Health <= 0
                                                    FastAttack = false
                                            end
                                            if _G.AutoEliteHunter and string.find(v.Name, "Urban") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                                repeat
                                                    task.wait()
                                                    if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 150 then
                                                        Farmtween = toTarget(v.HumanoidRootPart.CFrame)
                                                    elseif (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 150 then
                                                        if Farmtween then
                                                            Farmtween:Stop()
                                                        end
                                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v .HumanoidRootPart.CFrame * MethodFarm
                                                        FastAttack = true
                                                        EquipWeapon(_G.SelectWeapon)
                                                    end
                                                until not _G.AutoEliteHunter or not v.Parent or v.Humanoid.Health <= 0
                                                    FastAttack = false
                                            end
                                            if _G.AutoEliteHunter and string.find(v.Name, "Deandre") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                                repeat
                                                    task.wait()
                                                    if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 150 then
                                                        Farmtween = toTarget(v.HumanoidRootPart.CFrame)
                                                    elseif (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 150 then
                                                        if Farmtween then
                                                            Farmtween:Stop()
                                                        end
                                                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v .HumanoidRootPart.CFrame * MethodFarm
                                                        FastAttack = true
                                                        EquipWeapon(_G.SelectWeapon)
                                                    end
                                                until not _G.AutoEliteHunter or not v.Parent or v.Humanoid.Health <= 0
                                                FastAttack = false
                                            end
                                        end
                                    else
                                        local string_1 = "EliteHunter";
                                        local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                                        Target:InvokeServer(string_1);
                                    end
                                else
                                    local string_1 = "EliteHunter";
                                    local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                                    Target:InvokeServer(string_1);
                                end
                            end
                        end)
                    end
                end)
            if _G.AutoEliteHunterHop then  
                if not (game.Workspace.Enemies:FindFirstChild("Deandre") or game.Workspace.Enemies:FindFirstChild("Urban") or game.Workspace.Enemies:FindFirstChild("Diablo") or game.ReplicatedStorage:FindFirstChild("Deandre") or game.ReplicatedStorage:FindFirstChild("Urban") or game.ReplicatedStorage:FindFirstChild("Diablo")) then
                    wait(10)
                    Hop()
                end
            end
        end       
        
        local Elite_Hunter_Status = page1:Label("Status : N/Q")
            task.spawn(function()
                while task.wait() do
                    pcall(function()
                        if game:GetService("ReplicatedStorage"):FindFirstChild("Diablo") or game:GetService("ReplicatedStorage"):FindFirstChild("Deandre") or game:GetService("ReplicatedStorage"):FindFirstChild("Urban") or game:GetService("Workspace").Enemies:FindFirstChild("Diablo") or game:GetService("Workspace").Enemies:FindFirstChild("Deandre") or game:GetService("Workspace").Enemies:FindFirstChild("Urban") then
                            Elite_Hunter_Status:Set("Status : 🟢\nสถานะ") 
                        else
                            Elite_Hunter_Status:Set("Status : 🔴\nสถานะ") 
                        end
                    end)
                end
            end)
        local EliteProgress = page1:Label("")
        spawn(function()
            pcall(function()
                while task.wait() do
                    EliteProgress:Set("Killed : " .. game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EliteHunter", "Progress"))
                end
            end)
        end)
        
    page1:Toggle("Auto EliteHunter Hop\nออโต้ตี อีลิทฮันเตอร์ ย้ายเซิฟ", _G.AutoEliteHunterHop, function(value)
            _G.AutoEliteHunterHop = value 
            Elite()
            if value == false then
                toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
            end
        end)
        
        page1:Toggle("Auto EliteHunter\nออโต้ตี อีลิทฮันเตอร์", _G.AutoEliteHunter,function(value)
        _G.AutoEliteHunter = value
        Elite()
            if value == false then
                toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
            end
        end)
        
        page1:Toggle("Auto CastleRaid\nออโต้ตีโจรเกาะกลาง", _G.AutoCastleRaid, function(value)
            _G.AutoCastleRaid = value
            if value == false then
                toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
            end
        end)
        
        spawn(function()
            while wait() do
                pcall(function()
                    if _G.AutoCastleRaid then
                        if (CFrame.new(-5118.48682, 314.54129, -2958.64404, -0.387232125, 1.81507858e-08, 0.921982229, -7.54388907e-08, 1, -5.13709999e-08, -0.921982229, -8.94458196e-08, -0.387232125).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 2000 then
                            for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
                                if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position-game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 1000 then
                                    repeat wait()
                                        PosMon = v.HumanoidRootPart.CFrame
                                        EquipWeapon(_G.SelectWeapon)
                                        v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)  
                                        BringMob = true
                                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                    until not _G.AutoCastleRaid or not v.Parent or v.Humanoid.Health <= 0
                                    BringMob = false
                                end
                            end
                        else
                            if (CFrame.new(-5118.48682, 314.54129, -2958.64404, -0.387232125, 1.81507858e-08, 0.921982229, -7.54388907e-08, 1, -5.13709999e-08, -0.921982229, -8.94458196e-08, -0.387232125).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 2000 then
                                for i,v in pairs(game.ReplicatedStorage:GetChildren()) do
                                    if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position-game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 1000 then
                                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                    end
                                end
                            end
                            toTarget(CFrame.new(-5118.48682, 314.54129, -2958.64404, -0.387232125, 1.81507858e-08, 0.921982229, -7.54388907e-08, 1, -5.13709999e-08, -0.921982229, -8.94458196e-08, -0.387232125))
                        end
                    end
                end)  
            end
        end)
        
        local count_number = 0
        local count_stack = page1:Label('Bone : ' .. count_number, true)
        spawn(function()
            while task.wait() do
                local boneStatus = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Bones", "Check")
                count_stack:Set('Bone : ' .. boneStatus)
                wait(1) 
            end
        end)
        
        page1:Toggle("Auto FarmBone\nฟาร์มกระดูก", _G.Settings.AutoFarmBone , function(value)
            _G.AutoFarmBone  = value
            _G.Settings.AutoFarmBone = value
            SaveSettings() 
        
            if value == false then
                task.wait()
                toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
                task.wait()
            end
        end)
        
        page1:Toggle("Auto RandomBone\nสุ่มกระดูก", _G.AutoRandomBone, function(value)
            _G.AutoRandomBone = value
        end)
        
        spawn(function()
            while wait(.1) do
                if _G.AutoRandomBone then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Bones", "Buy", 1, 1)
                end
            end
        end)
        
        spawn(function()
            game:GetService("RunService").Heartbeat:Connect(function()
                pcall(function()
                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if _G.BringMob and _G.AutoFarmBone and StartMagnetBoneMon and (v.Name == "Reborn Skeleton" or v.Name == "Living Zombie" or v.Name == "Demonic Soul" or v.Name == "Posessed Mummy") and (v.HumanoidRootPart.Position - PosMonBone.Position).magnitude <= 1000 then
                            v.HumanoidRootPart.CFrame = PosMonBone
                            v.HumanoidRootPart.CanCollide = false
                            v.Humanoid.JumpPower = 0
                            v.Humanoid.WalkSpeed = 0
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius",  math.huge)
                        end
                    end
                end)
            end)
        end)
        
        local Number2 = 1
        local BoneTabel = {
            ["Mon"] = {"Reborn Skeleton","Demonic Soul","Living Zombie","Posessed Mummy"},
            ["Boss"] = {"Soul Reaper"},
            ["Item"] = "Hallow Essence",
        }
        
        local SetCFarmeBone = 1
        function GetBone_CFrame_Mon()
            local matchingCFrames = {}
        
            for _, Mon in ipairs(BoneTabel["Mon"]) do
                local result = Mon:gsub("Lv. ", ""):gsub("[%[%]]", ""):gsub("%d+", ""):gsub("%s+", "")
                
                for _, v in ipairs(game.workspace.EnemySpawns:GetChildren()) do
                    if v.Name == result then
                        table.insert(matchingCFrames, v.CFrame)
                    end
                end
            end
            
            return matchingCFrames
        end
        
        spawn(function()
            while wait() do
                pcall(function()
                    if _G.AutoFarmBone then
                        for _, _Boss in ipairs(BoneTabel["Boss"]) do
                            local _Item = BoneTabel["Item"]
                            if game:GetService("Workspace").Enemies:FindFirstChild(_Boss) or game:GetService("ReplicatedStorage"):FindFirstChild(_Boss) then
                                for _, _r in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if string.find(_r.Name, _Boss) then
                                        if _r:FindFirstChild("Humanoid") and _r:FindFirstChild("HumanoidRootPart") and _r.Humanoid.Health > 0 then
                                            repeat wait()
                                                EquipWeapon(_G.SelectWeapon)
                                                _r.HumanoidRootPart.Size = Vector3.new(60, 60, 60)  
                                                BringMob = true
                                                toTarget(_r.HumanoidRootPart.CFrame * MethodFarm)
                                                if (_r.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                    _G.FastAttack = true
                                                end
                                            until not _G.AutoFarmBone or _r.Humanoid.Health <= 0 or not _r.Parent or _r.Humanoid.Health <= 0
                                            BringMob = false
                                        end
                                    end
                                end
                            else
                                if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(_Item) or game:GetService("Players").LocalPlayer.Character:FindFirstChild(_Item) then
                                    EquipWeapon(_Item)
                                    toTarget(workspace.Map["Haunted Castle"].Summoner.Detection.CFrame)
                                else
                                    for _, _Mon in next, BoneTabel["Mon"] do
                                            if game:GetService("Workspace").Enemies:FindFirstChild("Reborn Skeleton") or game:GetService("Workspace").Enemies:FindFirstChild("Living Zombie") or game:GetService("Workspace").Enemies:FindFirstChild("Demonic Soul") or game:GetService("Workspace").Enemies:FindFirstChild("Posessed Mummy") then
                                                for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                                    if string.find(v.Name, _Mon) then
                                                        if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                                            repeat wait()
                                                                PosMon = v.HumanoidRootPart.CFrame
                                                                EquipWeapon(_G.SelectWeapon)
                                                                v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)  
                                                                BringMob = true
                                                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                                if (v.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                                    _G.FastAttack = true
                                                                end
                                                            until not _G.AutoFarmBone or v.Humanoid.Health <= 0 or not v.Parent or v.Humanoid.Health <= 0
                                                        elseif (CFrame.new(-9513.88477, 172.1306, 6073.37061, -0.906221628, 7.55508509e-08, 0.422802985, 5.79426853e-08, 1, -5.44980487e-08, -0.422802985, -2.48889691e-08, -0.906221628).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false and _G.AceetpQuestBone  then 
                                                            local CFrameMon = CFrame.new(-9513.88477, 172.1306, 6073.37061, -0.906221628, 7.55508509e-08, 0.422802985, 5.79426853e-08, 1, -5.44980487e-08, -0.422802985, -2.48889691e-08, -0.906221628)
                                                            repeat wait() toTarget(CFrameMon) until (CFrameMon.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 20 or  not _G.AutoFarmBone
                                                        end
                                                    end
                                                end
                                            else
                                            if _G.Auto_CFrame then
                                                toTarget(GetBone_CFrame_Mon()[SetCFarmeBone] * MethodFarm)
                                                if (GetBone_CFrame_Mon()[SetCFarmeBone].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                    if SetCFarmeBone == nil or SetCFarmeBone == '' then
                                                        SetCFarmeBone = 1
                                                    elseif SetCFarmeBone >= #GetBone_CFrame_Mon() then
                                                        SetCFarmeBone = 1
                                                    end
                                                    SetCFarmeBone =  SetCFarmeBone + 1
                                                    wait(0.5)
                                                end
                                            else
                                                if AttackRandomType_MonCFrame == 1 then
                                                    toTarget(GetBone_CFrame_Mon()[1] * CFrame.new(0,30,20))
                                                elseif AttackRandomType_MonCFrame == 2 then
                                                    toTarget(GetBone_CFrame_Mon()[1] * CFrame.new(0,30,-20))
                                                elseif AttackRandomType_MonCFrame == 3 then
                                                    toTarget(GetBone_CFrame_Mon()[1] * CFrame.new(20,30,0))
                                                elseif AttackRandomType_MonCFrame == 4 then
                                                    toTarget(GetBone_CFrame_Mon()[1] * CFrame.new(0,30,-20))
                                                elseif AttackRandomType_MonCFrame == 5 then
                                                    toTarget(GetBone_CFrame_Mon()[1] * CFrame.new(-20,30,0))
                                                else
                                                    toTarget(GetBone_CFrame_Mon()[1] * CFrame.new(0,30,20))
                                                end
                                            end
                                        end
                                    end
                                end
                            end
                        end
                    end
                end)
            end
        end)
        
        local MobKilledLabel = page1:Label("Need to kill : Loading...", true)
        spawn(function()
        while true do
            pcall(function()
                local cakeStatus = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CakePrinceSpawner")
                if string.len(cakeStatus) == 88 then
                    MobKilledLabel:Set("Need to kill : " .. string.sub(cakeStatus, 39, 41))
                elseif string.len(cakeStatus) == 87 then
                    MobKilledLabel:Set("Need to kill : " .. string.sub(cakeStatus, 39, 40))
                elseif string.len(cakeStatus) == 86 then
                    MobKilledLabel:Set("Need to kill : " .. string.sub(cakeStatus, 39, 39))
                else
                    MobKilledLabel:Set("Katakuri Spawned\nคาตาคุริเกิดแล้ว")
                end
            end)
            wait(1)
        end
        end)
        page1:Toggle("Auto Katakuri\nตีคาตาคุริ", _G.AutoCakePrince ,function(value)
            _G.AutoCakePrince  = value
            if value == false then
                toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
            end
        end)
            spawn(function()
                while wait() do
                    if _G.AutoCakePrince then
                        pcall(function()
                            if game.ReplicatedStorage:FindFirstChild("Cake Prince") or game:GetService("Workspace").Enemies:FindFirstChild("Cake Prince") or  game.ReplicatedStorage:FindFirstChild("Dough King") or game:GetService("Workspace").Enemies:FindFirstChild("Dough King") then   
                                if not game:GetService("Workspace").Enemies:FindFirstChild("Cake Prince") then
                                    for _,x in pairs(game.ReplicatedStorage:GetChildren()) do 
                                        if x.Name == "Cake Prince" or x.Name == "Dough King" then
                                            if (x.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 then
                                                wait(1.5)
                                                toTarget(CFrame.new(-2145.89722, 70.0088272, -12399.6016, 0.99999702, 1.58276379e-08, 0.00245277886, -1.57982978e-08, 1, -1.19813057e-08, -0.00245277886, 1.19425199e-08, 0.99999702))
                                                return
                                            end
                                        end
                                    end
                                end
        
                                for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Cake Prince" then
                                        if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                            repeat task.wait()
                                                if (v.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 then
                                                    toTarget(CFrame.new(-2145.89722, 70.0088272, -12399.6016, 0.99999702, 1.58276379e-08, 0.00245277886, -1.57982978e-08, 1, -1.19813057e-08, -0.00245277886, 1.19425199e-08, 0.99999702))
                                                    return
                                                end
                                                EquipWeapon(_G.SelectWeapon)
                                                v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)  
                                                BringMob = true
                                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                if (v.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                    _G.FastAttack = true
                                                end
                                                sethiddenproperty(game.Players.LocalPlayer,"SimulationRadius",math.huge)
                                            until not _G.AutoCakePrince or not v.Parent or v.Humanoid.Health <= 0
                                        end
                                    else
                                        for _,x in pairs(game.ReplicatedStorage:GetChildren()) do 
                                            if x.Name == "Cake Prince" or x.Name == "Dough King" then
                                                if (x.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 then
                                                    toTarget(CFrame.new(-2145.89722, 70.0088272, -12399.6016, 0.99999702, 1.58276379e-08, 0.00245277886, -1.57982978e-08, 1, -1.19813057e-08, -0.00245277886, 1.19425199e-08, 0.99999702))
                                                    return
                                                end
                                            end
                                        end
                                    end
                                end
                            else 
                                if game:GetService("Workspace").Enemies:FindFirstChild("Cake Prince") or game.ReplicatedStorage:FindFirstChild("Cake Prince") then
                                    for _,x in pairs(game.ReplicatedStorage:GetChildren()) do 
                                        if x.Name == "Cake Prince" or x.Name == "Dough King" then
                                            if (x.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude > 1000 then
                                                toTarget(CFrame.new(-2145.89722, 70.0088272, -12399.6016, 0.99999702, 1.58276379e-08, 0.00245277886, -1.57982978e-08, 1, -1.19813057e-08, -0.00245277886, 1.19425199e-08, 0.99999702))
                                                return
                                            end
                                        end
                                    end
                                else
                                    if game.Workspace.Enemies:FindFirstChild("Baking Staff") or game.Workspace.Enemies:FindFirstChild("Head Baker") or game.Workspace.Enemies:FindFirstChild("Cake Guard") or game.Workspace.Enemies:FindFirstChild("Cookie Crafter")  then
                                        for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do  
                                            if (v.Name == "Baking Staff" or v.Name == "Head Baker" or v.Name == "Cake Guard" or v.Name == "Cookie Crafter") and v.Humanoid.Health > 0 then
                                                repeat wait()
                                                    PosMon = v.HumanoidRootPart.CFrame
                                                    EquipWeapon(_G.SelectWeapon)
                                                    v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)  
                                                    BringMob = true
                                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                    if (v.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                        _G.FastAttack = true
                                                    end
                                                until _G.AutoCakePrince == false or game:GetService("ReplicatedStorage"):FindFirstChild("Cake Prince") or not v.Parent or v.Humanoid.Health <= 0
                                            end
                                        end
                                    else
                                        BringMob = false
                                        toTarget(GetCake_CFrame_Mon() * MethodFarm)
                                        wait(0.5)
                                    end
                                end
                            end
                        end)
                    end
                end
            end)
        end
        page1:Seperator("Material/วัสดุ")
        page1:Dropdown("Select Material\nเลือกวัสดุ",AllMaterial, function(value)
            SelectModeMaterial = value
        end)
        page1:Toggle("Auto FarmMaterial\nฟาร์มวัสดุ",AutoFarmMaterial, function(value)
            AutoFarmMaterial = value
            spawn(function()
                while wait() do 
                    if AutoFarmMaterial then 
                        pcall(function()
                            if (SelectModeMaterial~="") then 
                                CheckMaterial(SelectModeMaterial)
                                if CustomFindFirstChild(MaterialMob) then
                                    for v0,v1 in pairs(game:GetService("Workspace").Enemies:GetChildren()) do 
                                        if (AutoFarmMaterial and table.find(MaterialMob,v1.Name) and v1:FindFirstChild("HumanoidRootPart") and v1:FindFirstChild("Humanoid") and (v1.Humanoid.Health > 0)) then 
                                            repeat task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                                if not game.Players.LocalPlayer.Character:FindFirstChild("HasBuso") then
                                                    local args = {
                                                        [1] = "Buso"
                                                    }
                                                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                                                end
                                                PosMon = v1.HumanoidRootPart.CFrame
                                                v1.HumanoidRootPart.CanCollide = false
                                                v1.Humanoid.WalkSpeed = 0
                                                v1.Head.CanCollide = false
                                                v1.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                                v1.Humanoid:ChangeState(11)
                                                v1.Humanoid:ChangeState(14)
                                                v1.Humanoid:ChangeState(16)
                                                BringMob = true
                                                FastAttack = true
                                                toTarget(v1.HumanoidRootPart.CFrame * MethodFarm)
                                                if not FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                                end
                                                
                                                PosMon = v.HumanoidRootPart.CFrame
                                            until not CustomFindFirstChild(MaterialMob) or not AutoFarmMaterial or (v1.Humanoid.Health <= 0) or not v1.Parent 
                                            FastAttack = false;
                                        end 
                                    end 
                                else 
                                    FastAttack = false
                                    toTarget(CFrameMon)
                                end 
                            end
                        end)
                    else
                        break;
                    end
                end
            end)
        end)
                                                     
page2:Seperator("⚙️")
Weapon = {"Melee","Sword","Fruit"}
page2:Dropdown("Select Weapon\nเลือกอาวุธ",Weapon, function(value)
SelectWeapon = value
end)
task.spawn(function()
while wait() do
pcall(function()
    if SelectWeapon == "Melee" then
        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v.ToolTip == "Melee" then
                if game.Players.LocalPlayer.Backpack:FindFirstChild(tostring(v.Name)) then
                    _G.SelectWeapon = v.Name
                end
            end
        end
    elseif SelectWeapon == "Sword" then
        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v.ToolTip == "Sword" then
                if game.Players.LocalPlayer.Backpack:FindFirstChild(tostring(v.Name)) then
                    _G.SelectWeapon = v.Name
                end
            end
        end
    elseif SelectWeapon == "Fruit" then
        for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v.ToolTip == "Blox Fruit" then
                if game.Players.LocalPlayer.Backpack:FindFirstChild(tostring(v.Name)) then
                    _G.SelectWeapon = v.Name
                end
            end
        end
    else
        for i ,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
            if v.ToolTip == "Melee" then
                if game.Players.LocalPlayer.Backpack:FindFirstChild(tostring(v.Name)) then
                    _G.SelectWeapon = v.Name
                end
            end
        end
    end
end)
end
end)

local Method = {"Upper","Behind","Below"}
if _G.Method == nil then
_G.Method = "Upper"
end
if  _G.DistanceAutoFarm == nil then
    _G.DistanceAutoFarm = 30
end
  
page2:Dropdown("Select Method\nเลือกตำแหน่งการฟาร์ม",Method, function(value)
    _G.Method = value
end)
    
page2:Slider("Select Distance\nเลือกระยะการฟาร์ม",1,80,30,function(value)
 _G.DistanceAutoFarm = value
end)
    
task.spawn(function()
    while task.wait(0.1) do
        pcall(function()
            local randomOffsetX = math.random(-30, 30)  -- สุ่ม X เล็กน้อย
            local randomOffsetY = math.random(-30, 30)  -- สุ่ม Y
            local randomOffsetZ = math.random(-30, 30)  -- สุ่ม Z
                if _G.Method == "Behind" then
                    MethodFarm = CFrame.new(randomOffsetX, randomOffsetY, _G.DistanceAutoFarm + randomOffsetZ)
                elseif _G.Method == "Below" then
                    MethodFarm = CFrame.new(randomOffsetX, -(_G.DistanceAutoFarm + randomOffsetY), randomOffsetZ) * CFrame.Angles(math.rad(90), 0, 0)
                elseif _G.Method == "Upper" then
                    MethodFarm = CFrame.new(randomOffsetX, _G.DistanceAutoFarm + randomOffsetY, randomOffsetZ) * CFrame.Angles(math.rad(0), 0, 0)
                else
                    MethodFarm = CFrame.new(randomOffsetX, _G.DistanceAutoFarm + randomOffsetY, randomOffsetZ)
                end
        end)
    end
end)

page2:Toggle("Auto UseHaki\nออโต้เปิดฮาคิ", true, function(value)
_G.AutoHaki = value
end)
task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoHaki then
                if not game.Players.LocalPlayer.Character:FindFirstChild("HasBuso") then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Buso")
                end
            end
        end)
    end
end)
page2:Toggle("Auto UseHakiObservation\nออโต้เปิดฮาคิสังเกต", true, function(value)
_G.AutoKen = value
end)
spawn(function()
    while wait() do
        if _G.AutoKen then
            local args = {
                [1] = "Ken",
                [2] = true
            }
        
            game:GetService("ReplicatedStorage").Remotes.CommE:FireServer(unpack(args))
        end
    end
end)

page2:Toggle("White Screen\nจอขาว", false, function(value)
_G.WhiteScreen = value
if value then
    game:GetService("RunService"):Set3dRenderingEnabled(false)
else
    game:GetService("RunService"):Set3dRenderingEnabled(true)
end
end)

page2:Toggle("Black Screen\nจอดำ", false, function(value)
_G.BlackScreen = value
if value then
    game:GetService("RunService"):Set3dRenderingEnabled(false)
    game:GetService("Players").LocalPlayer.PlayerGui.Main.Blackscreen.Size = UDim2.new(500, 0, 500, 500)
else
   game:GetService("RunService"):Set3dRenderingEnabled(true)
    game:GetService("Players").LocalPlayer.PlayerGui.Main.Blackscreen.Size = UDim2.new(1, 0, 500, 500)
end
end)

page2:Toggle("HideNotification\nซ่อนข้อความการแจ้งเตือน", false, function(value)
game:GetService("Players").LocalPlayer.PlayerGui.Notifications.Enabled = not game:GetService("Players").LocalPlayer.PlayerGui.Notifications.Enabled
end)

page2:Toggle("BringMon\nรวมศัตรู", true, function(value)
    _G.BringMob = value
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if _G.BringMob then
                QuestCheck()
                for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                    if _G.AutoFarm and _G.BringMob and v.Name == QuestCheck()[3] and (QuestCheck()[3] == "Factory Staff" or QuestCheck()[3] == "Monkey" or QuestCheck()[3] == "Dragon Crew Warrior" or QuestCheck()[3] == "Dragon Crew Archer") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 220 then
                        v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                        v.HumanoidRootPart.CFrame = PosMon
                        v.Humanoid:ChangeState(14)
                        v.HumanoidRootPart.CanCollide = false
                        v.Head.CanCollide = false
                        if v.Humanoid:FindFirstChild("Animator") then
                            v.Humanoid.Animator:Destroy()
                        end
                        sethiddenproperty(game:GetService("Players").LocalPlayer,"SimulationRadius",math.huge)
                    elseif _G.AutoFarm and _G.BringMob and v.Name == QuestCheck()[3] and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.BringMode then
                        v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                        v.HumanoidRootPart.CFrame = PosMon
                        v.Humanoid:ChangeState(14)
                        v.HumanoidRootPart.CanCollide = false
                        v.Head.CanCollide = false
                        if v.Humanoid:FindFirstChild("Animator") then
                            v.Humanoid.Animator:Destroy()
                        end
                        sethiddenproperty(game:GetService("Players").LocalPlayer,"SimulationRadius",math.huge)
                    end
                end
            end
        end)
    end
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if _G.BringMob then
               QuestCheck()
                for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                    if _G.AutoFarm and _G.BringMob  and v.Name == QuestCheck()[3] and (QuestCheck()[3] == "Factory Staff" or QuestCheck()[3] == "Monkey" or QuestCheck()[3] == "Dragon Crew Warrior" or QuestCheck()[3] == "Dragon Crew Archer") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 250 then
                        v.HumanoidRootPart.Size = Vector3.new(150,150,150)
                        v.HumanoidRootPart.CFrame = PosMon
                        v.Humanoid:ChangeState(14)
                        v.HumanoidRootPart.CanCollide = false
                        v.Head.CanCollide = false
                        if v.Humanoid:FindFirstChild("Animator") then
                            v.Humanoid.Animator:Destroy()
                        end
                        sethiddenproperty(game:GetService("Players").LocalPlayer,"SimulationRadius",math.huge)
                    elseif _G.AutoFarm and _G.BringMob  and v.Name == QuestCheck()[3] and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.BringMode then
                        v.HumanoidRootPart.Size = Vector3.new(150,150,150)
                        v.HumanoidRootPart.CFrame = PosMon
                        v.Humanoid:ChangeState(14)
                        v.HumanoidRootPart.CanCollide = false
                        v.Head.CanCollide = false
                        if v.Humanoid:FindFirstChild("Animator") then
                            v.Humanoid.Animator:Destroy()
                        end
                        sethiddenproperty(game:GetService("Players").LocalPlayer,"SimulationRadius",math.huge)
                    end
                    if _G.AutoEctoplasm and StartEctoplasmMagnet then
                        if string.find(v.Name, "Ship") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 and (v.HumanoidRootPart.Position - EctoplasmMon.Position).Magnitude <= _G.BringMode then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.HumanoidRootPart.CFrame = EctoplasmMon
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoRengoku and StartRengokuMagnet then
                        if (v.Name == "Snow Lurker" or v.Name == "Arctic Warrior") and (v.HumanoidRootPart.Position - RengokuMon.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(1500,1500,1500)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = RengokuMon
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoMusketeerHat and StartMagnetMusketeerhat then
                        if v.Name == "Forest Pirate" and (v.HumanoidRootPart.Position - MusketeerHatMon.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = MusketeerHatMon
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoObservationHakiV2 and Mangnetcitzenmon then
                        if v.Name == "Forest Pirate" and (v.HumanoidRootPart.Position - MusketeerHatMon.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = PosHee
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.Auto_EvoRace and StartEvoMagnet then
                        if v.Name == "Zombie" and (v.HumanoidRootPart.Position - PosMonEvo.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = PosMonEvo
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoBartilo and AutoBartiloBring then
                        if v.Name == "Swan Pirate" and (v.HumanoidRootPart.Position - PosMonBarto.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = PosMonBarto
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoFarmFruitMastery and StartMasteryFruitMagnet then
                        if v.Name == "Monkey" then
                            if (v.HumanoidRootPart.Position - PosMonMasteryFruit.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                                v.Humanoid:ChangeState(14)
                                v.HumanoidRootPart.CanCollide = false
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.CFrame = PosMonMasteryFruit
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                            end
                        elseif v.Name == "Factory Staff" then
                            if (v.HumanoidRootPart.Position - PosMonMasteryFruit.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                                v.Humanoid:ChangeState(14)
                                v.HumanoidRootPart.CanCollide = false
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.CFrame = PosMonMasteryFruit
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                            end
                        elseif v.Name == Mon then
                            if (v.HumanoidRootPart.Position - PosMonMasteryFruit.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                                v.Humanoid:ChangeState(14)
                                v.HumanoidRootPart.CanCollide = false
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.CFrame = PosMonMasteryFruit
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                            end
                        end
                    end
                    if _G.AutoFarmGunMastery and StartMasteryGunMagnet then
                        if v.Name == "Monkey" then
                            if (v.HumanoidRootPart.Position - PosMonMasteryGun.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                                v.Humanoid:ChangeState(14)
                                v.HumanoidRootPart.CanCollide = false
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.CFrame = PosMonMasteryGun
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                            end
                        elseif v.Name == "Factory Staff" then
                            if (v.HumanoidRootPart.Position - PosMonMasteryGun.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                                v.Humanoid:ChangeState(14)
                                v.HumanoidRootPart.CanCollide = false
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.CFrame = PosMonMasteryGun
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                            end
                        elseif v.Name == QuestCheck()[3] then
                            if (v.HumanoidRootPart.Position - PosMonMasteryGun.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                                v.Humanoid:ChangeState(14)
                                v.HumanoidRootPart.CanCollide = false
                                v.Head.CanCollide = false
                                v.HumanoidRootPart.CFrame = PosMonMasteryGun
                                if v.Humanoid:FindFirstChild("Animator") then
                                    v.Humanoid.Animator:Destroy()
                                end
                                sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                            end
                        end
                    end
                    if _G.Auto_Bone and StartMagnetBoneMon then
                        if (v.Name == "Reborn Skeleton" or v.Name == "Living Zombie" or v.Name == "Demonic Soul" or v.Name == "Posessed Mummy") and (v.HumanoidRootPart.Position - PosMonBone.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = PosMonBone
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoFarmCandy and StartCandyMagnet then
                        if (v.Name == "Ice Cream Chef" or v.Name == "Ice Cream Commander") and (v.HumanoidRootPart.Position - CandyMon.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = CandyMon
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if StardFarm and FarmMag then
                        if (v.Name == "Cocoa Warrior" or v.Name == "Chocolate Bar Battler" or v.Name == "Sweet Thief" or v.Name == "Candy Rebel") and (v.HumanoidRootPart.Position - PosGG.Position).Magnitude <= 250 and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = PosGG
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.Farmfast and StardMag then
                        if (v.Name == "Shanda" or v.Name == "Shanda") and (v.HumanoidRootPart.Position - FastMon.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = FastMon
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                    if _G.AutoDoughtBoss and MagnetDought then
                        if (v.Name == "Cookie Crafter" or v.Name == "Cake Guard" or v.Name == "Baking Staff" or v.Name == "Head Baker") and (v.HumanoidRootPart.Position - PosMonDoughtOpenDoor.Position).Magnitude <= _G.BringMode and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(50,50,50)
                            v.Humanoid:ChangeState(14)
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.CFrame = PosMonDoughtOpenDoor
                            if v.Humanoid:FindFirstChild("Animator") then
                                v.Humanoid.Animator:Destroy()
                            end
                            sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius", math.huge)
                        end
                    end
                end
            end
        end)
    end
end)

task.spawn(function()
	while true do wait()
		if setscriptable then
			setscriptable(game.Players.LocalPlayer, "SimulationRadius", true)
		end
		if sethiddenproperty then
			sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
		end
	end
end)


task.spawn(function()
	while task.wait() do
		pcall(function()
			if  _G.BringMob then
				for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
					if not string.find(v.Name,"Boss") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.BringMode then
						if InMyNetWork(v.HumanoidRootPart) then
							v.HumanoidRootPart.CFrame = PosGay
							v.Humanoid.JumpPower = 0
							v.Humanoid.WalkSpeed = 0
							v.HumanoidRootPart.Size = Vector3.new(60,60,60)
							v.HumanoidRootPart.Transparency = 1
							v.HumanoidRootPart.CanCollide = false
							v.Head.CanCollide = false
							if v.Humanoid:FindFirstChild("Animator") then
								v.Humanoid.Animator:Destroy()
							end
							v.Humanoid:ChangeState(11)
							v.Humanoid:ChangeState(14)
						end
					end
				end
			end
		end)
	end
end)
task.spawn(function()
	while task.wait() do
		pcall(function()
			if _G.AutoSwordMastery and AutoSwordMasteryMag and _G.BringMob then
				for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
					if not string.find(v.Name,"Boss") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.BringMode then
						if InMyNetWork(v.HumanoidRootPart) then
							v.HumanoidRootPart.CFrame = PosMon
							v.Humanoid.JumpPower = 0
							v.Humanoid.WalkSpeed = 0
							v.HumanoidRootPart.Size = Vector3.new(60,60,60)
							v.HumanoidRootPart.Transparency = 1
							v.HumanoidRootPart.CanCollide = false
							v.Head.CanCollide = false
							if v.Humanoid:FindFirstChild("Animator") then
								v.Humanoid.Animator:Destroy()
							end
							v.Humanoid:ChangeState(11)
							v.Humanoid:ChangeState(14)
						end
					end
				end
			end
		end)
	end
end)
task.spawn(function()
	while task.wait() do
		pcall(function()
			if _G.BringMob then
				for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
					if not string.find(v.Name,"Boss") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.BringMode then
						if InMyNetWork(v.HumanoidRootPart) then
							v.HumanoidRootPart.CFrame = PosNarathiwat
							v.Humanoid.JumpPower = 0
							v.Humanoid.WalkSpeed = 0
							v.HumanoidRootPart.Size = Vector3.new(60,60,60)
							v.HumanoidRootPart.Transparency = 1
							v.HumanoidRootPart.CanCollide = false
							v.Head.CanCollide = false
							if v.Humanoid:FindFirstChild("Animator") then
								v.Humanoid.Animator:Destroy()
							end
							v.Humanoid:ChangeState(11)
							v.Humanoid:ChangeState(14)
						end
					end
				end
			end
		end)
	end
end)
task.spawn(function()
	while task.wait() do
		pcall(function()
			if _G.AutoFarmNearest and _G.BringMob then
				for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
					if not string.find(v.Name,"Boss") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= _G.BringMode then
						if InMyNetWork(v.HumanoidRootPart) then
							v.HumanoidRootPart.CFrame = PosMon
							v.Humanoid.JumpPower = 0
							v.Humanoid.WalkSpeed = 0
							v.HumanoidRootPart.Size = Vector3.new(60,60,60)
							v.HumanoidRootPart.Transparency = 1
							v.HumanoidRootPart.CanCollide = false
							v.Head.CanCollide = false
							if v.Humanoid:FindFirstChild("Animator") then
								v.Humanoid.Animator:Destroy()
							end
							v.Humanoid:ChangeState(11)
							v.Humanoid:ChangeState(14)
						end
					end
				end
			end
		end)
	end
end)
_G.BringMode = 150

_G.Auto_CFrame = true
page2:Toggle("DisableDamage\nปิดดาเมจ",  true, function(value)
_G.Disdamage = value
DisabledDamage()
end)

page3:Seperator("📊")
page3:Dropdown("Select Stats\nเลือกสแตค",{"Melee","Defense","Sword","Gun","Fruit"},function(value)
    _G.SelectStats = value
end)

page3:Toggle("Auto Stats\nออโต้อัพสแตค", _G.EnabledAutoStats, function(value)
    _G.EnabledAutoStats = value
end)

spawn(function()
    pcall(function()
        while task.wait() do
            if _G.EnabledAutoStats then
                if _G.SelectStats == "Melee" then
                    local args = {
                        [1] = "AddPoint",
                        [2] = "Melee",
                        [3] = 1000
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                elseif _G.SelectStats == "Defense" then
                    local args = {
                        [1] = "AddPoint",
                        [2] = "Defense",
                        [3] = 1000
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                elseif _G.SelectStats == "Sword" then
                    local args = {
                        [1] = "AddPoint",
                        [2] = "Sword",
                        [3] = 1000
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                elseif _G.SelectStats == "Gun" then
                    local args = {
                        [1] = "AddPoint",
                        [2] = "Gun",
                        [3] = 1000
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                '
local runjvdupAemE = 'elseif _G.SelectStats == "Fruit" then
                    local args = {
                        [1] = "AddPoint",
                        [2] = "Demon Fruit",
                        [3] = 1000
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                end
            end
        end
    end)
end)

page3:Toggle("Auto Stats Kaitun\nอัพสแตคแบบไก่ตัน", true, function(value)
    _G.AutoStatsKaitun = value
end)

spawn(function()
    while task.wait() do
        if _G.AutoStatsKaitun then
            if game:GetService("Players").LocalPlayer.Data.Stats.Melee.Level.Value <= 2649 then
                local args = {
                    [1] = "AddPoint",
                    [2] = "Melee",
                    [3] = 1000
                }
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
            else
                local args = {
                    [1] = "AddPoint",
                    [2] = "Defense",
                    [3] = 1000
                }
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
            end
        end
    end
end)

page3:Toggle("Auto Redeem Code\nออโต้ใส่โค้ด", _G.EnabledAutoRedeemCode, function(value)
    _G.EnabledAutoRedeemCode = value
end)

spawn(function()
    while task.wait() do
        if _G.EnabledAutoRedeemCode or _G.AutoFarm then
            function UseCode(Text)
                game:GetService("ReplicatedStorage").Remotes.Redeem:InvokeServer(Text)
            end
            UseCode("ADMINFIGHT")
            UseCode("GIFTING_HOURS")
            UseCode("NOMOREHACK")
            UseCode("EARN_FRUITS")
            UseCode("FIGHT4FRUIT")
            UseCode("NOEXPLOITER")
            UseCode("NOOB2ADMIN")
            UseCode("CODESLIDE")
            UseCode("ADMINHACKED")
            UseCode("ADMINDARES")
            UseCode("fruitconcepts")
            UseCode("krazydares")
            UseCode("TRIPLEABUSE")
            UseCode("SEATROLLING")
            UseCode("24NOADMIN")
            UseCode("REWARDFUN")
            UseCode("NEWTROLL")
            UseCode("SECRET_ADMIN")
            UseCode("BANEXPLOIT")
            UseCode("NOMOREHACK")
            UseCode("GetPranked")
            UseCode("EARN_FRUITS") 
            UseCode("NOEXPLOIT")
            UseCode("FIGHT4FRUIT")
            UseCode("NOOB2ADMIN")
            UseCode("CODESLIDE")
            UseCode("KITT_RESET")
            UseCode("Sub2CaptainMaui")
        end
    end
end)

function GetAllMeleeFarm()
    if SupComplete == false then
    local args = {
        [1] = "BuySuperhuman"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    if CheckMasteryWeapon("Superhuman", 400) == "true UpTo" then
        SupComplete = true
    end
    end
    wait(.5)
    if EClawComplete == false then
    local string_1 = "BuyElectricClaw";
    local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
    Target:InvokeServer(string_1);
    
    if CheckMasteryWeapon("Electric Claw", 400) == "true UpTo" then
        EClawComplete = true
    end
    end
    wait(.5)
    if TalComplete == false then
    game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon")
    
    if CheckMasteryWeapon("Dragon Talon", 400) == "true UpTo" then
        TalComplete = true
    end
    end
    wait(.5)
    if SharkComplete == false then
    local args = {
        [1] = "BuySharkmanKarate"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    
    if CheckMasteryWeapon("Sharkman Karate", 400) == "true UpTo" then
        SharkComplete = true
    end
    end
    wait(.5)
    if DeathComplete == false then
    local args = {
        [1] = "BuyDeathStep"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    
    if CheckMasteryWeapon("Death Step", 400) == "true UpTo" then
        DeathComplete = true
    end
    end
    if GodComplete == false then
    local args = {
        [1] = "BuyGodhuman"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    
    if CheckMasteryWeapon("Godhuman", 350) == "true UpTo" then
        GodComplete = true
    end
    end
    end
page3:Seperator("🥋") 
page3:Toggle("Auto GodHuman\nออโต้ทำหมัดก็อตฮิวแมน", _G.AutoGodHuman, function(value)
    _G.AutoGodHuman = value
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman", true)
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman")
    BuyGodhuman = tonumber(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman", true))
    if BuyGodhuman then
        if BuyGodhuman ~= 1 then
            GetAllMeleeFarm()
        end
    end
end)
spawn(function()
    while task.wait() do
        if _G.Auto_God_Human then
            pcall(function()
                if game.Players.LocalPlayer.Character:FindFirstChild("Superhuman") or game.Players.LocalPlayer.Backpack:FindFirstChild("Superhuman") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Black Leg") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Black Leg") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Death Step") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Death Step") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Fishman Karate") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Fishman Karate") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Sharkman Karate") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Sharkman Karate") or game.Players.LocalPlayer.Backpack:FindFirstChild("Electro") or game.Players.LocalPlayer.Character:FindFirstChild("Electro") or game.Players.LocalPlayer.Backpack:FindFirstChild("Electric Claw") or game.Players.LocalPlayer.Character:FindFirstChild("Electric Claw") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dragon Claw") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dragon Claw") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dragon Talon") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dragon Talon") or game.Players.LocalPlayer.Character:FindFirstChild("Godhuman") or game.Players.LocalPlayer.Backpack:FindFirstChild("Godhuman") then
                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySuperhuman",true) == 1 then
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Superhuman") and game.Players.LocalPlayer.Backpack:FindFirstChild("Superhuman").Level.Value >= 400 or game.Players.LocalPlayer.Character:FindFirstChild("Superhuman") and game.Players.LocalPlayer.Character:FindFirstChild("Superhuman").Level.Value >= 400 then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep")
                        end
                    else
                        game.StarterGui:SetCore("SendNotification", {Title = "Notification", Text = "Not Have Superhuman" ,Icon = "http://www.roblox.com/asset/?id=16129235054",Duration = 2.5})
                    end
                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep",true) == 1 then
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Death Step") and game.Players.LocalPlayer.Backpack:FindFirstChild("Death Step").Level.Value >= 400 or game.Players.LocalPlayer.Character:FindFirstChild("Death Step") and game.Players.LocalPlayer.Character:FindFirstChild("Death Step").Level.Value >= 400 then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
                        end
                    else
                        game.StarterGui:SetCore("SendNotification", {Title = "Notification", Text = "Not Have Death Step" ,Icon = "http://www.roblox.com/asset/?id=16129235054",Duration = 2.5})
                    end
                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate",true) == 1 then
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Sharkman Karate") and game.Players.LocalPlayer.Backpack:FindFirstChild("Sharkman Karate").Level.Value >= 400 or game.Players.LocalPlayer.Character:FindFirstChild("Sharkman Karate") and game.Players.LocalPlayer.Character:FindFirstChild("Sharkman Karate").Level.Value >= 400 then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw")
                        end
                    else
                        game.StarterGui:SetCore("SendNotification", {Title = "Notification", Text = "Not Have SharkMan Karate" ,Icon = "http://www.roblox.com/asset/?id=16129235054",Duration = 2.5})
                    end
                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw",true) == 1 then
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Electric Claw") and game.Players.LocalPlayer.Backpack:FindFirstChild("Electric Claw").Level.Value >= 400 or game.Players.LocalPlayer.Character:FindFirstChild("Electric Claw") and game.Players.LocalPlayer.Character:FindFirstChild("Electric Claw").Level.Value >= 400 then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon")
                        end
                    else
                        game.StarterGui:SetCore("SendNotification", {Title = "Notification", Text = "Not Have Electric Claw" ,Icon = "http://www.roblox.com/asset/?id=16129235054",Duration = 2.5})
                    end
                    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon",true) == 1 then
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Talon") and game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Talon").Level.Value >= 400 or game.Players.LocalPlayer.Character:FindFirstChild("Dragon Talon") and game.Players.LocalPlayer.Character:FindFirstChild("Dragon Talon").Level.Value >= 400 then
                            if string.find(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman",true), "Bring") then
                                game.StarterGui:SetCore("SendNotification", {Title = "Notification", Text = "Not Have Enough Material" ,Icon = "http://www.roblox.com/asset/?id=16129235054",Duration = 2.5})
                            else
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman")
                            end
                        end
                    else
                        game.StarterGui:SetCore("SendNotification", {Title = "Notification", Text = "Not Have Dragon Talon" ,Icon = "http://www.roblox.com/asset/?id=16129235054",Duration = 2.5})
                    end
                else
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySuperhuman")
                end
            end)
        end
    end
end)


page3:Toggle("Auto SuperHuman\nออโต้ทำหมัดชุปเปอร์ฮิวแมน", _G.AutoSuperhuman, function(value)
    _G.AutoSuperhuman = value
end)

task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoSuperhuman then
               
                    if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Combat") then
                        local args = {
                            [1] = "BuyBlackLeg"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end
                    -- Step 1: Black Leg Level 300 → Electro
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg").Level.Value >= 300 then
                        local args = {
                            [1] = "BuyElectro"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Character:FindFirstChild("Black Leg").Level.Value >= 300 then
                        local args = {
                            [1] = "BuyElectro"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end

                    -- Step 2: Electro Level 300 → Fishman Karate
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Electro") and game.Players.LocalPlayer.Backpack:FindFirstChild("Electro").Level.Value >= 300 then
                        local args = {
                            [1] = "BuyFishmanKarate"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Electro") and game.Players.LocalPlayer.Character:FindFirstChild("Electro").Level.Value >= 300 then
                        local args = {
                            [1] = "BuyFishmanKarate"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end

                    -- Step 3: Fishman Karate Level 300 → Dragon Claw (ต้อง 1500 Fragments)
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate") and game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate").Level.Value >= 300 then
                        local args = {
                            [1] = "BlackbeardReward",
                            [2] = "DragonClaw",
                            [3] = "2"
                        }
                        HaveDragonClaw = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                        
                        -- ถ้าไม่มี Fragments พอ ไป Raid
                        if _G.AutoSuperhuman and game.Players.LocalPlayer.Data.Fragments.Value <= 1500 and HaveDragonClaw == 0 then
                            if game.Players.LocalPlayer.Data.Level.Value > 1100 then
                                _G.SelectRaids = "Flame"
                                _G.AutoRaids = true
                                if _G.AutoFarm then _G.AutoFarm = false end
                            end
                        else
                            _G.AutoRaids = false
                            if _G.AutoFarm then _G.AutoFarm = true end
                            local args = {
                                [1] = "BlackbeardReward",
                                [2] = "DragonClaw",
                                [3] = "2"
                            }
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                            _G.AutoRaids = false
                            if _G.AutoFarm then _G.AutoFarm = true end
                        end
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Fishman Karate") and game.Players.LocalPlayer.Character:FindFirstChild("Fishman Karate").Level.Value >= 300 then
                        local args = {
                            [1] = "BlackbeardReward",
                            [2] = "DragonClaw",
                            [3] = "2"
                        }
                        HaveDragonClaw = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                        
                        -- ถ้าไม่มี Fragments พอ ไป Raid
                        if _G.AutoSuperhuman and game.Players.LocalPlayer.Data.Fragments.Value <= 1500 and HaveDragonClaw == 0 then
                            if game.Players.LocalPlayer.Data.Level.Value > 1100 then
                                _G.Get_Fruit = true
                                _G.SelectRaids = "Flame"
                                _G.AutoRaids = true
                                if _G.AutoFarm then _G.AutoFarm = false end
                            end
                        else
                            _G.AutoRaids = false
                            _G.Get_Fruit = false
                            if _G.AutoFarm then _G.AutoFarm = true end
                            local args = {
                                [1] = "BlackbeardReward",
                                [2] = "DragonClaw",
                                [3] = "2"
                            }
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                            _G.AutoRaids = false
                            if _G.AutoFarm then _G.AutoFarm = true end
                        end
                    end

                    -- Step 4: Dragon Claw Level 300 → Superhuman
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Claw") and game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Claw").Level.Value >= 300 then
                        local args = {
                            [1] = "BuySuperhuman"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Dragon Claw") and game.Players.LocalPlayer.Character:FindFirstChild("Dragon Claw").Level.Value >= 300 then
                        local args = {
                            [1] = "BuySuperhuman"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                    end
            end
        end)
    end
end)


if _G.Get_Fruit then
if Inventory_Fruit then
    Inventory_Fruit = nil
end
TabelDevilFruitStore = {}

for i, v in pairs(game:GetService("ReplicatedStorage").Remotes["CommF_"]:InvokeServer("getInventoryFruits")) do
    for i1, r in pairs(v) do
        if i1 == "Name" then
            table.insert(TabelDevilFruitStore, r)
            end
        end
    end

fruit = game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("getInventoryFruits")
for i1, v in pairs(TabelDevilFruitStore) do
    if not game.Players.LocalPlayer.Backpack:FindFirstChild(TabelDevilFruitStore) then
        for i,v in pairs(fruit) do
    if v["Price"] < 10000000 then
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LoadFruit",v["Name"])
                end
        end
    end
    end
end

page3:Toggle("Auto ElectricClaw\nออโต้ทำหมัดสายฟ้า", _G.AutoElectricClaw, function(value)
    _G.AutoElectricClaw = value
    if _G.AutoElectricClaw then
        Com("F_", "BuyElectro")
    end
end)
task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoElectricClaw then
                if game.Players.LocalPlayer:FindFirstChild("WeaponAssetCache") then
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Electro") and game.Players.LocalPlayer.Backpack:FindFirstChild("Electro").Level.Value < 400 then
                        _G.SelectWeapon = "Electro"
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Electro") and game.Players.LocalPlayer.Character:FindFirstChild("Electro").Level.Value < 400 then
                        _G.SelectWeapon = "Electro"
                    end
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Electro") and game.Players.LocalPlayer.Backpack:FindFirstChild("Electro").Level.Value >= 400 then
                        local r75 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw", true);
                        if r75 == 4 then
                            local r76 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw",
                                "Start");
                            if r76 == nil then
                                game.Players.localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-12548,
                                    337, -7481)
                            end
                        else
                            local string_1 = "BuyElectricClaw";
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                            Target:InvokeServer(string_1);
                        end
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Electro") and game.Players.LocalPlayer.Character:FindFirstChild("Electro").Level.Value >= 400 then
                        local r75 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw", true);
                        if r75 == 4 then
                            local r76 = game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyElectricClaw",
                                "Start");
                            if r76 == nil then
                                game.Players.localPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(-12548,
                                    337, -7481)
                            end
                        else
                            local string_1 = "BuyElectricClaw";
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                            Target:InvokeServer(string_1);
                        end
                    end
                end
            end
        end)
    end
end)
  
page3:Toggle("Auto DeathStep\nออโต้ทำหมัดขาดำ", _G.AutoDeathStep, function(value)
    _G.AutoDeathStep = value
    if _G.AutoDeathStep then
        Com("F_", "BuyBlackLeg")
    end
end)
task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoDeathStep then
                if game.Players.LocalPlayer:FindFirstChild("WeaponAssetCache") then
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg").Level.Value >= 400 then
                        local args = {
                            [1] = "BuyDeathStep"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                        _G.SelectWeapon = "Death Step"
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Character:FindFirstChild("Black Leg").Level.Value >= 400 then
                        local args = {
                            [1] = "BuyDeathStep"
                        }
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))

                        _G.SelectWeapon = "Death Step"
                    end
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg").Level.Value < 400 then
                        _G.SelectWeapon = "Black Leg"
                    end
                end
            elseif _G.AutoFullyDeathStep then
                if game.Players.LocalPlayer.Character:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Character:FindFirstChild("Black Leg").Level.Value >= 400 or game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg").Level.Value >= 400 then
                    if game:GetService("Workspace").Map.IceCastle.Hall.LibraryDoor.PhoeyuDoor.Transparency == 0 then
                        if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Library Key") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Library Key") then
                            EquipWeapon("Library Key")
                            repeat
                                task.wait()
                                toTarget(CFrame.new(6371.2001953125, 296.63433837890625, -6841.18115234375))
                            until (CFrame.new(6371.2001953125, 296.63433837890625, -6841.18115234375).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 3 or not _G.AutoDeathStep
                            if (CFrame.new(6371.2001953125, 296.63433837890625, -6841.18115234375).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 3 then
                                wait(1.2)
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep",true)
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep")
                                wait(0.5)
                            end
                        elseif game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Backpack:FindFirstChild("Black Leg").Level.Value >= 450 or game.Players.LocalPlayer.Character:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Character:FindFirstChild("Black Leg").Level.Value >= 450 then
                            if game:GetService("ReplicatedStorage"):FindFirstChild("Awakened Ice Admiral") or game:GetService("Workspace").Enemies:FindFirstChild("Awakened Ice Admiral") then
                                if game:GetService("Workspace").Enemies:FindFirstChild("Awakened Ice Admiral") then
                                    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                        if v.Name == "Awakened Ice Admiral" then
                                            repeat
                                                task.wait() task.wait()
                                                if game.Workspace.Enemies:FindFirstChild(v.Name) then
                                                    if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 200 then
                                                        Farmtween = toTarget(v.HumanoidRootPart.CFrame)
                                                    elseif (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 200 then
                                                        if Farmtween then Farmtween:Stop() end
                                                        FastAttack = true
                                                        if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                            task.wait()
                                                            EquipWeapon(_G.SelectWeapon)
                                                        end
                                                        if not _G.FastAttack then
                                                            game:GetService 'VirtualUser':CaptureController()
                                                            game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                                        end
                                                        v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)
                                                        v.Humanoid.JumpPower = 0
                                                        v.Humanoid.WalkSpeed = 0
                                                        v.HumanoidRootPart.CanCollide = false
                                                        v.Humanoid:ChangeState(11)
                                                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                        if game.Players.LocalPlayer.Character:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Character:FindFirstChild("Black Leg").Level.Value >= 150 then
                                                            game:service('VirtualInputManager'):SendKeyEvent(true, "V", false, game)
                                                            game:service('VirtualInputManager'):SendKeyEvent(false, "V", false, game)
                                                        end
                                                    end
                                                end
                                            until not v.Parent or v.Humanoid.Health <= 0 or _G.AutoDeathStep == false or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Library Key") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Library Key")
                                            FastAttack = false
                                        end
                                    end
                                else
                                    toTarget(game:GetService("ReplicatedStorage"):FindFirstChild("Awakened Ice Admiral").HumanoidRootPart.CFrame)
                                end
                            end
                        end
                    end
                else
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBlackLeg")
                end
            end
        end)
    end
end)
  
page3:Toggle("Auto SharkmanKarate\nออโต้ทำหมัดมนุษย์เงือก",_G.AutoSharkManKarate, function(value)
    _G.AutoSharkManKarate = value
    if _G.AutoSharkManKarate then
        Com("F_", "BuySharkmanKarate")
    end
end)
task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoSharkManKarate then
                if game.Players.LocalPlayer:FindFirstChild("WeaponAssetCache") then
                    if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Fishman Karate") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Fishman Karate") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Sharkman Karate") or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Sharkman Karate") then
                        if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Fishman Karate") and game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Fishman Karate").Level.Value >= 400 then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
                                _G.SelectWeapon  = "Sharkman Karate"
                        end
                        if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Fishman Karate") and game:GetService("Players").LocalPlayer.Character:FindFirstChild("Fishman Karate").Level.Value >= 400 then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
                                _G.SelectWeapon  = "Sharkman Karate"
                        end
                        if game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Fishman Karate") and game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Fishman Karate").Level.Value <= 400 then
                            _G.SelectWeapon = "Fishman Karate"
                        end
                    else
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyFishmanKarate")
                    end
                end
            elseif _G.AutoFullySharkManKarate then
                if game.Players.LocalPlayer.Character:FindFirstChild("Fishman Karate") and game.Players.LocalPlayer.Character:FindFirstChild("Fishman Karate").Level.Value >= 400 or game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate") and game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate").Level.Value >= 400 then
                    if string.find(game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate"), "keys") then
                        if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Water Key") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Water Key") then
                            repeat
                                task.wait()
                                toTarget(-2604.6958, 239.432526, -10315.1982, 0.0425701365, 0, -0.999093413,0, 1,0, 0.999093413, 0, 0.0425701365)
                            until (CFrame.new(-2604.6958, 239.432526, -10315.1982, 0.0425701365, 0, -0.999093413, 0, 1, 0, 0.999093413, 0, 0.0425701365).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 3 or not _G.Auto_Fully_SharkMan_Karate
                            if (CFrame.new(-2604.6958, 239.432526, -10315.1982, 0.0425701365, 0, -0.999093413, 0, 1, 0, 0.999093413, 0, 0.0425701365).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 3 then
                                wait(1.2)
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate", true)
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
                                wait(0.5)
                            end
                        elseif game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate") and game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate").Level.Value >= 400 or game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate") and game.Players.LocalPlayer.Backpack:FindFirstChild("Fishman Karate").Level.Value >= 400 then
                            if game:GetService("ReplicatedStorage"):FindFirstChild("Tide Keeper") or game:GetService("Workspace").Enemies:FindFirstChild("Tide Keeper") then
                                if game:GetService("Workspace").Enemies:FindFirstChild("Tide Keeper") then
                                    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                        if v.Name == "Tide Keeper" then
                                            repeat
                                                task.wait()
                                                if game.Workspace.Enemies:FindFirstChild(v.Name) then
                                                    if (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude > 200 then
                                                        Farmtween = toTarget(v.HumanoidRootPart.CFrame)
                                                    elseif (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 200 then
                                                        if Farmtween then Farmtween:Stop() end
                                                        FastAttack = true
                                                        if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                            task.wait()
                                                            EquipWeapon(_G.SelectWeapon)
                                                        end
                                                        if not _G.FastAttack then
                                                            game:GetService 'VirtualUser':CaptureController()
                                                            game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                                        end
                                                        v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)
                                                        v.Humanoid.JumpPower = 0
                                                        v.Humanoid.WalkSpeed = 0
                                                        v.HumanoidRootPart.CanCollide = false
                                                        v.Humanoid:ChangeState(11)
                                                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                        if game.Players.LocalPlayer.Character:FindFirstChild("Black Leg") and game.Players.LocalPlayer.Character:FindFirstChild("Black Leg").Level.Value >= 150 then
                                                            game:service('VirtualInputManager'):SendKeyEvent(true, "V", false, game)
                                                            game:service('VirtualInputManager'):SendKeyEvent(false, "V", false, game)
                                                        end
                                                    end
                                                end
                                            until not v.Parent or v.Humanoid.Health <= 0 or _G.AutoDeathStep == false or game:GetService("Players").LocalPlayer.Character:FindFirstChild("Library Key") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Library Key")
                                                FastAttack = false 
                                        end
                                    end
                                else
                                    toTarget(game:GetService("ReplicatedStorage"):FindFirstChild("Tide Keeper").HumanoidRootPart.CFrame)
                                end
                            end
                        end
                    else
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
                    end
                else
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyFishmanKarate")
                end
            end
        end)
    end
end)
      
page3:Toggle("Auto DragonTalon\nออโต้ทำหมัดมังกร",  _G.AutoDragonTalon , function(value)
    _G.AutoDragonTalon = value
    if _G.AutoDragonTalon then
        Com("F_", "BlackbeardReward", "DragonClaw", "2")
    end
end)
task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoDragonTalon then
                if game.Players.LocalPlayer:FindFirstChild("WeaponAssetCache") then
                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Claw") and game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Claw").Level.Value <= 399 and game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
                        _G.SelectWeapon = "Dragon Claw"
                    end
                    if game.Players.LocalPlayer.Character:FindFirstChild("Dragon Claw") and game.Players.LocalPlayer.Character:FindFirstChild("Dragon Claw").Level.Value <= 399 and game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
                        _G.SelectWeapon = "Dragon Claw"
                    end

                    if game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Claw") and game.Players.LocalPlayer.Backpack:FindFirstChild("Dragon Claw").Level.Value >= 400 and game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
                        _G.SelectWeapon = "Dragon Claw"
                        if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) == 3 then
                            local string_1 = "Bones";
                            local string_2 = "Buy";
                            local number_1 = 1;
                            local number_2 = 1;
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                            Target:InvokeServer(string_1, string_2, number_1, number_2);

                            local string_1 = "BuyDragonTalon";
                            local bool_1 = true;
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                            Target:InvokeServer(string_1, bool_1);
                        elseif game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) == 1 then
                            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon")
                        else
                            local string_1 = "BuyDragonTalon";local bool_1 = true;
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];Target:InvokeServer(string_1, bool_1);
                            local string_1 = "BuyDragonTalon";
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];Target:InvokeServer(string_1);
                        end
                    end

                    if game.Players.LocalPlayer.Character:FindFirstChild("Dragon Claw") and game.Players.LocalPlayer.Character:FindFirstChild("Dragon Claw").Level.Value >= 400 and game.Players.LocalPlayer.Character.Humanoid.Health > 0 then
                        _G.SelectWeapon = "Dragon Claw"
                        if game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) == 3 then
                            local string_1 = "Bones";
                            local string_2 = "Buy";
                            local number_1 = 1;
                            local number_2 = 1;
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];Target:InvokeServer(string_1, string_2, number_1, number_2);

                            local string_1 = "BuyDragonTalon";
                            local bool_1 = true;
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];Target:InvokeServer(string_1, bool_1);
                        elseif game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon", true) == 1 then
                            game.ReplicatedStorage.Remotes.CommF_:InvokeServer("BuyDragonTalon")
                        else
                            local string_1 = "BuyDragonTalon";
                            local bool_1 = true;
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];Target:InvokeServer(string_1, bool_1);
                            local string_1 = "BuyDragonTalon";
                            local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];Target:InvokeServer(string_1);
                        end
                    end
                end
            end
        end)
    end
end)

page4:Seperator("🚀")

page4:Button("Teleport To World1\nเทเลพอร์ตไปทะเล 1", function(value)
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelMain")
end)

page4:Button("Teleport To World2\nเทเลพอร์ตไปทะเล 2", function(value)
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelDressrosa")
end)

page4:Button("Teleport To World3\nเทเลพอร์ตไปทะเล 3", function(value)
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("TravelZou")
end)

TeleportTable = {}
if World3 then
TeleportTable = { "Port Town", "Hydra Island", "Gaint Tree", "Mansion", "Castle on the Sea", "Haunted Castle","Icecream Island", "Peanut Island", "Cake Loaf", "Candy Isand", "TikiOutpost" }
end
page4:Seperator("🏝️")

page4:Dropdown("SelectIsland\nเลือกเกาะ",TeleportTable, function(value)
_G.SelectLocalTeleport = value
end)

page4:Toggle("Teleport To Selected\nเทเลพอร์ตไปที่เลือกไว้", _G.TeleportIsland,function(value)
_G.TeleportIsland = value
if _G.TeleportIsland then
if World3  then
    if _G.SelectLocalTeleport == "Port Town" then
        toTarget(CFrame.new(-275.21615600586, 43.755737304688, 5451.0659179688))
    end
    if _G.SelectLocalTeleport == "Mansion" then
        local args = {
            [1] = "requestEntrance",
            [2] = Vector3.new(-12548.595703125, 337.17001342773, -7554.6103515625)
        }
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    end
    if _G.SelectLocalTeleport == "Castle on the Sea" then
        local args = {
            [1] = "requestEntrance",
            [2] = Vector3.new(-5079.44677734375, 313.7293395996094, -3151.065185546875)
        }
        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    end
    if _G.SelectLocalTeleport == "Hydra Island" then
        toTarget(CFrame.new(5541.2685546875, 668.30456542969, 195.48069763184))
    end
    if _G.SelectLocalTeleport == "Gaint Tree" then
        toTarget(CFrame.new(2276.0859375, 25.87850189209, -6493.03125))
    end
    if _G.SelectLocalTeleport == "Haunted Castle" then
        toTarget(CFrame.new(-9515.07324, 142.130615, 5537.58398))
    end
    if _G.SelectLocalTeleport == "Icecream Island" then
        toTarget(CFrame.new(-880.894531, 118.245354, -11030.7607, -0.867174983, 1.48501234e-09, 0.498003572,
            2.70457789e-08, 1, 4.41129586e-08, -0.498003572, 5.1722548e-08, -0.867174983))
    end
    if _G.SelectLocalTeleport == "Peanut Island" then
        toTarget(CFrame.new(-2124.06738, 44.0723495, -10179.8281, -0.623125494, -2.55908191e-07, -0.782121837,
            -1.40530574e-07, 1, -2.15235005e-07, 0.782121837, -2.42063933e-08, -0.623125494))
    end
    if _G.SelectLocalTeleport == "Lab" then
        toTarget(CFrame.new(-5057.146484375, 314.54132080078, -2934.7995605469))
    end
    if _G.SelectLocalTeleport == "Cake Loaf" then
        toTarget(CFrame.new(-1977.36767578125, 251.509521484375, -12380.4189453125))
    end
    if _G.SelectLocalTeleport == "Candy Isand" then
        toTarget(CFrame.new(-1067.02246, 14.6404228, -14448.1455, 0.907635272, -7.29340499e-08, 0.419759721, 6.73669618e-08, 1, 2.8086113e-08, -0.419759721, 2.78598944e-09, 0.907635272) * CFrame.new(0,100,0))
    end
    if _G.SelectLocalTeleport == "TikiOutpost" then
        toTarget(CFrame.new(-16753.5977, 189.528107, 451.797333, -0.777145505, 0, -0.629321039, 0, 1, 0, 0.629321039, 0, -0.777145505))
    end
end
end
end)
 
page4:Button("Stop Teleport\nหยุดการเทเลพอร์ต", function(value)
    toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
end)

page1:Seperator("Observation/ฮาคิสังเกต")
local ObservationRange = page1:Label("...")
spawn(function()
        while wait() do
            pcall(function()
                ObservationRange:Set("LvObservation : "..math.floor(game:GetService("Players").LocalPlayer.VisionRadius.Value))
            end)
        end
    end)

    page1:Toggle("Auto ObservationV2\nทำฮาคิสังเกตขั้นสอง",_G.AutoKenHakiV2, function(value)
        _G.AutoKenHakiV2 = value
            if value == false then
                task.wait()
                toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
                task.wait()
            end
        end)
    task.spawn(function()
        while task.wait() do
            pcall(function()
                if _G.AutoKenHakiV2 then
                    if game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false then
                        repeat
                            toTarget(CFrame.new(-12444.78515625, 332.40396118164, -7673.1806640625))
                            task.wait()
                        until not _G.AutoKenHakiV2 or (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(-12444.78515625, 332.40396118164, -7673.1806640625)).Magnitude <= 10
                        wait(.5)
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CitizenQuestProgress","Citizen")
                        wait(1)
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StartQuest","CitizenQuest", 1)
                    else
                        if game.Players.LocalPlayer.Backpack:FindFirstChild("Banana") and game.Players.LocalPlayer.Backpack:FindFirstChild("Apple") and game.Players.LocalPlayer.Backpack:FindFirstChild("Pineapple") then
                            repeat
                                toTarget(CFrame.new(-12444.78515625, 332.40396118164, -7673.1806640625))
                                task.wait()
                            until not _G.AutoKenHakiV2 or (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(-12444.78515625, 332.40396118164, -7673.1806640625)).Magnitude <= 10
                            wait(.5)
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CitizenQuestProgress", "Citizen")
                        elseif game.Players.LocalPlayer.Backpack:FindFirstChild("Fruit Bowl") or game.Players.LocalPlayer.Character:FindFirstChild("Fruit Bowl") then
                            repeat
                                toTarget(CFrame.new(-10920.125, 624.20275878906, -10266.995117188))
                                task.wait()
                            until not _G.AutoKenHakiV2 or (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(-10920.125, 624.20275878906, -10266.995117188)).Magnitude <= 10
                            wait(.5)
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("KenTalk2","Start")
                            wait(1)
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("KenTalk2","Buy")
                        elseif string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Defeat 50 Forest Pirates") then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Forest Pirate") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Forest Pirate" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoKenHakiV2 or v.Humanoid.Health <= 0
                                        BringMob = false
                                        FastAttack = false
                                    end
                                end
                            else
                                repeat
                                    toTarget(CFrame.new(-13277.568359375, 370.34185791016, -7821.1572265625))
                                    task.wait()
                                until not _G.AutoKenHakiV2 or (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(-13277.568359375, 370.34185791016, -7821.1572265625)).Magnitude <= 10
                            end
                        elseif game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text == "Defeat  Captain Elephant (0/1)" then
                            if game:GetService("Workspace").Enemies:FindFirstChild("Captain Elephant") then
                                for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                    if v.Name == "Captain Elephant" then
                                        repeat
                                            task.wait()
                                            BringMob = true
                                            FastAttack = true
                                            if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                                task.wait()
                                                EquipWeapon(_G.SelectWeapon)
                                            end
                                            PosMon = v.HumanoidRootPart.CFrame
                                            if not _G.FastAttack then
                                                game:GetService 'VirtualUser':CaptureController()
                                                game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                            end
                                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                            v.Humanoid.JumpPower = 0
                                            v.Humanoid.WalkSpeed = 0
                                            v.HumanoidRootPart.CanCollide = false
                                            v.Humanoid:ChangeState(11)
                                            v.Humanoid:ChangeState(14)
                                            v.Humanoid:ChangeState(16)
                                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        until not _G.AutoKenHakiV2 or v.Humanoid.Health <= 0
                                        BringMob = false
                                        FastAttack = false
                                    end
                                end
                            else
                                repeat
                                    toTarget(CFrame.new(-13493.12890625, 318.89553833008, -8373.7919921875))
                                    task.wait()
                                until not _G.AutoKenHakiV2 or (game.Players.LocalPlayer.Character.HumanoidRootPart.Position - Vector3.new(-13493.12890625, 318.89553833008, -8373.7919921875)).Magnitude <= 10
                            end
                        else
                            for i, v in pairs(game.Workspace:GetDescendants()) do
                                if v.Name == "Apple" or v.Name == "Banana" or v.Name == "Pineapple" then
                                    v.Handle.CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, 1, 10)
                                        task.wait()
                                    firetouchinterest(game.Players.LocalPlayer.Character.HumanoidRootPart,v.Handle, 0)
                                        task.wait()
                                end
                            end
                        end
                    end
                end
            end)
        end
    end)
page1:Toggle("Auto FarmObservation\nฟาร์มฮาคิสังเกต",_G.Settings.AutoObservation,function(value)
    _G.AutoObservation = value
    _G.Settings.AutoObservation = value
    SaveSettings() 
    if value == false then
        task.wait()
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        task.wait()
    end
end)

spawn(function()
while wait() do
    pcall(function()
            if _G.Settings.AutoObservation then
                repeat
                    task.wait()
                    if not game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("ImageLabel") then
                        wait(5)
                        game:GetService("VirtualUser"):CaptureController()
                        game:GetService("VirtualUser"):SetKeyDown("0x65")
                        wait(2)
                        game:GetService("VirtualUser"):SetKeyUp("0x65")
                    end
                until game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("ImageLabel") or not _G.AutoObservation
            end
        end)
    end
end)

page1:Toggle("Auto FarmObservation Hop\nฟาร์มฮาคิสังเกตย้ายเซิฟ", _G.AutoObservation_Hop, function(value)
    _G.AutoObservation_Hop = value
end)

spawn(function()
        pcall(function()
                while wait() do
                    if _G.Settings.AutoObservation then
                        if game:GetService("Players").LocalPlayer.VisionRadius.Value >= 6000 then
                            game:GetService("StarterGui"):SetCore("SendNotification",{Icon = "rbxassetid://16129235054",Title = "Observation",Text = "You Have Max Observation"})
                            wait(2)
                        else
                           if World3 then
                                if game:GetService("Workspace").Enemies:FindFirstChild("Giant Islander") then
                                    if
                                        game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("ImageLabel")
                                     then
                                        repeat
                                            task.wait()
                                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =
                                                game:GetService("Workspace").Enemies:FindFirstChild("Giant Islander").HumanoidRootPart.CFrame * CFrame.new(3, 0, 0)
                                        until _G.AutoObservation == false or
                                            not game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("ImageLabel")
                                    else
                                        repeat
                                            task.wait()
                                            game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame =
                                                game:GetService("Workspace").Enemies:FindFirstChild("Giant Islander").HumanoidRootPart.CFrame * CFrame.new(0, 50, 0)
                                            wait(1)
                                            if
                                                not game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("ImageLabel") and _G.AutoObservation_Hop == true
                                             then
                                                game:GetService("TeleportService"):Teleport(game.PlaceId,game:GetService("Players").LocalPlayer)
                                            end
                                        until _G.AutoObservation == false or
                                            game:GetService("Players").LocalPlayer.PlayerGui.ScreenGui:FindFirstChild("ImageLabel")
                                    end
                                else
                                    toTarget(CFrame.new(4530.3540039063, 656.75695800781, -131.60952758789))
                                end
                            end
                        end
                    end
                end
            end)
        end)

page1:Seperator("Boss\nบอส") 
local Boss = {}
local BossName = page1:Dropdown("SelectBoss\nเลือกบอส",Boss, function(value)
    _G.SelectBoss = value
end)
page1:Button("Refresh\nรีเฟรช",function()
BossName:Clear()
    for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
        if v.Name == "Cyborg" or v.Name == "The Gorilla King" or v.Name == "Wysper" or v.Name == "Thunder God" or v.Name == "Mob Leader" or v.Name == "Bobby" or v.Name == "Saber Expert" or v.Name == "Warden" or v.Name == "Chief Warden" or v.Name == "Swan" or v.Name == "Magma Admiral"  or v.Name == "Fishman Lord" or v.Name == "Wysper" or v.Name == "Ice Admiral" or v.Name == "Diamond" or v.Name == "Jeremy" or v.Name == "Fajita" or v.Name == "Don Swan" or v.Name == "Smoke Admiral" or v.Name == "Awakened Ice Admiral" or v.Name == "Tide Keeper" or v.Name == "Darkbeard" or v.Name == "Stone" or v.Name == "Island Empress" or v.Name == "Kilo Admiral" or v.Name == "Captain Elephant" or v.Name == "Beautiful Pirate" or v.Name == "Longma" or v.Name == "Cake Queen" or v.Name == "Greybeard" or v.Name == "Order" or v.Name == "Cursed Captain" or v.Name == "Soul Reaper" or v.Name == "Rip indra" or v.Name == "Mihawk Boss" or v.Name == "Cake Prince" or v.Name == "Dough King" or v.Name == "Cursed Skeleton Boss" or v.Name == "Factory"  then
        table.insert(Boss, v.Name)
        BossName:Add(v.Name) 
        end
    end
end)

page1:Toggle("Auto FarmBoss\nฟาร์มบอส", _G.AutoFarmBoss, function(value)
_G.AutoFarmBoss = value
    if value == false then
        task.wait()
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        task.wait()
    end
end)

task.spawn(function()
    while task.wait() do
        if _G.AutoFarmBoss then
            pcall(function()
                if game:GetService("Workspace").Enemies:FindFirstChild(_G.SelectBoss) then
                    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == _G.SelectBoss then
                            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                repeat
                                    task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                    BringMob = true
                                    FastAttack = true
                                    v.HumanoidRootPart.CanCollide = false
                                    v.Humanoid.WalkSpeed = 0
                                    v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                    sethiddenproperty(game:GetService("Players").LocalPlayer, "SimulationRadius",math.huge)
                                until not _G.AutoFarmBoss or not v.Parent or v.Humanoid.Health <= 0
                            end
                        end
                    end
                else
                    if game:GetService("ReplicatedStorage"):FindFirstChild(_G.SelectBoss) then
                        toTarget(game:GetService("ReplicatedStorage"):FindFirstChild(_G.SelectBoss).HumanoidRootPart.CFrame * CFrame.new(0, 35, 0))
                    end
                end
            end)
        end
    end
end)

page1:Toggle("Auto FarmBossAll\nฟาร์มบอสทั้งหมด", _G.AutoAllBoss, function(value)
    _G.AutoAllBoss = value
        if value == false then
        task.wait()
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        task.wait()
    end
end)

task.spawn(function()
    while task.wait() do
        if _G.AutoAllBoss then
            pcall(function()
                for i, v in pairs(game.ReplicatedStorage:GetChildren()) do
                    if v.Name == "Cyborg" or v.Name == "The Gorilla King" or v.Name == "Wysper" or v.Name == "Thunder God" or v.Name == "Mob Leader" or v.Name == "Bobby" or v.Name == "Saber Expert" or v.Name == "Warden" or v.Name == "Chief Warden" or v.Name == "Swan" or v.Name == "Magma Admiral"  or v.Name == "Fishman Lord" or v.Name == "Wysper" or v.Name == "Ice Admiral" or v.Name == "Diamond" or v.Name == "Jeremy" or v.Name == "Fajita" or v.Name == "Don Swan" or v.Name == "Smoke Admiral" or v.Name == "Awakened Ice Admiral" or v.Name == "Tide Keeper" or v.Name == "Darkbeard" or v.Name == "Stone" or v.Name == "Island Empress" or v.Name == "Kilo Admiral" or v.Name == "Captain Elephant" or v.Name == "Beautiful Pirate" or v.Name == "Cake Queen" or v.Name == "Greybeard" or v.Name == "Order" or v.Name == "Cursed Captain" or v.Name == "Soul Reaper" or v.Name == "Rip indra" or v.Name == "Mihawk Boss" or v.Name == "Cake Prince" or v.Name == "Dough King" or v.Name == "Cursed Skeleton Boss" or v.Name == "Factory" 
                    then
                        repeat
                            task.wait()
                            BringMob = true
                            FastAttack = true
                            EquipWeapon(_G.SelectWeapon)
                            v.Humanoid.WalkSpeed = 0
                            v.HumanoidRootPart.CanCollide = false
                            v.Head.CanCollide = false
                            v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                            toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                            if not FastAttack then 
                            game:GetService 'VirtualUser':CaptureController()
                            game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                            end
                            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
                        until v.Humanoid.Health <= 0 or _G.AutoAllBoss == false or not v.Parent 
                    end
                end
            end)
        end
    end
end)
local SupComplete = false
local EClawComplete = false
local TalComplete = false
local SharkComplete = false
local DeathComplete = false
local GodComplete = false

page5:Seperator("💼")


local map
local trophies
local tablets
local targetCFrame = CFrame.new(-9544.26855, 6.13136721, 6035.39209, -0.974126697, -8.00623567e-09, 0.226002619, -1.48549617e-08, 1, -2.86031163e-08, -0.226002619, -3.12203206e-08, -0.974126697)
local trophySegmentMap = {
    {trophy = "Trophy1", segment = "Segment1"},
    {trophy = "Trophy2", segment = "Segment3"},
    {trophy = "Trophy3", segment = "Segment4"},
    {trophy = "Trophy4", segment = "Segment7"},
    {trophy = "Trophy5", segment = "Segment10"}
}

local trophyRotations = {}
local segmentTargets = {
    Segment1 = {target = nil, done = false},
    Segment2 = {target = Vector3.new(0, 0, 0), done = false},
    Segment3 = {target = nil, done = false},
    Segment4 = {target = nil, done = false},
    Segment5 = {target = Vector3.new(0, 0, 0), done = false},
    Segment6 = {target = Vector3.new(0, 0, 0), done = false},
    Segment7 = {target = nil, done = false},
    Segment8 = {target = Vector3.new(0, 0, 0), done = false},
    Segment9 = {target = Vector3.new(0, 0, 0), done = false},
    Segment10 = {target = nil, done = false}
}

local labTargets = {
    Part3 = {target = Color3.fromRGB(163, 75, 75), done = false},
    Part4 = {target = Color3.fromRGB(51, 88, 130), done = false},
    Part6 = {target = Color3.fromRGB(44, 101, 29), done = false},
    Part8 = {target = Color3.fromRGB(163, 75, 75), done = false},
    Part10 = {target = Color3.fromRGB(51, 88, 130), done = false}
}

-- ฟังก์ชันเพื่อรอให้ Haunted Castle โหลด
local function waitForHauntedCastle()
    local maxAttempts = 30
    local attempt = 0

    while not Workspace.Map:FindFirstChild("Haunted Castle") and attempt < maxAttempts do
        print("Haunted Castle not loaded, moving to target position")
        toTarget(targetCFrame)
        task.wait(1)
        attempt = attempt + 1
    end

    map = Workspace.Map:FindFirstChild("Haunted Castle")
    if not map then
        warn("Failed to load Haunted Castle after " .. maxAttempts .. " attempts")
        return false
    end

    trophies = map:WaitForChild("Trophies", 5):FindFirstChild("Quest")
    tablets = map:WaitForChild("Tablet", 5)
    if not trophies or not tablets then
        warn("Trophies or Tablets not found in Haunted Castle")
        return false
    end

    print("Haunted Castle loaded successfully")
    return true
end

-- ประมวลผล trophy และ segment
local function initializeTrophies()
    for _, pair in ipairs(trophySegmentMap) do
        local success, result = pcall(function()
            local trophy = trophies:FindFirstChild(pair.trophy)
            if trophy and trophy:FindFirstChild("Handle") then
                local rotation = trophy.Handle.Rotation
                trophyRotations[pair.segment] = rotation
                
                if rotation == Vector3.new(0, -90, 0) or rotation == Vector3.new(0, 90, 0) then
                    segmentTargets[pair.segment].target = Vector3.new(180, 0, 0)
                elseif rotation == Vector3.new(0, 0, 0) then
                    segmentTargets[pair.segment].target = Vector3.new(0, 0, -90)
                else
                    segmentTargets[pair.segment].target = rotation
                end
            else
                warn(pair.trophy .. " or Handle not found")
            end
        end)
        if not success then
            warn("Error processing trophy " .. pair.trophy .. ": " .. result)
        end
    end
end

local function adjustSegment(segmentName, targetData)
    local success, result = pcall(function()
        local segment = tablets:FindFirstChild(segmentName)
        if segment and segment:FindFirstChild("Line") then
            if targetData.done then
                return true
            elseif segment.Line.Rotation == targetData.target then
                print(segmentName .. ": สำเร็จ")
                targetData.done = true
                return true
            else
                print(segmentName .. ": ไม่สำเร็จ Fireclickdetector อีกรอบ")
                local clickDetector = segment:FindFirstChild("ClickDetector")
                if clickDetector then
                    fireclickdetector(clickDetector)
                else
                    warn(segmentName .. ": ClickDetector not found")
                end
                return false
            end
        else
            warn(segmentName .. ": Segment or Line not found")
            return false
        end
    end)
    if not success then
        warn("Error adjusting segment " .. segmentName .. ": " .. result)
        return false
    end
    return result
end

local function adjustLabPart(partName, targetData)
    local success, result = pcall(function()
        local part = Workspace.Map["Haunted Castle"]["Lab Puzzle"].ColorFloor.Model:FindFirstChild(partName)
        if part then
            toTarget(part.CFrame)
            task.wait(0.5)
            if targetData.done then
                return true
            elseif part.Color == targetData.target then
                print(partName .. ": สีสำเร็จ")
                targetData.done = true
                return true
            else
                print(partName .. ": สีไม่สำเร็จ Fireclickdetector อีกรอบ")
                local clickDetector = part:FindFirstChild("ClickDetector")
                if clickDetector then
                    fireclickdetector(clickDetector)
                else
                    warn(partName .. ": ClickDetector not found")
                end
                return false
            end
        else
            warn(partName .. ": Part not found")
            return false
        end
    end)
    if not success then
        warn("Error adjusting lab part " .. partName .. ": " .. result)
        return false
    end
    return result
end

-- Toggle สำหรับ AutoSoulGuitar
page5:Toggle("AutoSoulGuitar\nออโต้หากีต้าร์บรู๊ค", _G.AutoSoulGuitar, function(value)
    _G.AutoSoulGuitar = value
    spawn(function()
        while task.wait(0.5) do
            if not _G.AutoSoulGuitar then break end
            pcall(function()
                local player = Players.LocalPlayer
                local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
                if not rootPart then return end
                
                local distanceToCastle = (CFrame.new(-9681.46, 6.14, 6341.37).Position - rootPart.Position).Magnitude
                if distanceToCastle > 5000 then
                    print("Too far from Haunted Castle, moving to position")
                    toTarget(CFrame.new(-9681.46, 6.14, 6341.37))
                    return
                end
                
                -- ตรวจสอบและโหลด Haunted Castle
                if not map and not waitForHauntedCastle() then
                    print("Cannot proceed: Haunted Castle failed to load")
                    return
                end

                -- เริ่มต้น trophy และ segment ครั้งแรกเท่านั้น
                if not GlobalEnv.trophiesInitialized then
                    initializeTrophies()
                    GlobalEnv.trophiesInitialized = true
                end

                -- ตรวจสอบ Skeleton Machine
                if Workspace.NPCs:FindFirstChild("Skeleton Machine") then
                    ReplicatedStorage.Remotes.CommF_:InvokeServer("soulGuitarBuy", true)
                    return
                end

                -- จัดการ gravestoneEvent
                local graveResult = ReplicatedStorage.Remotes.CommF_:InvokeServer("gravestoneEvent", 2)
                if graveResult and graveResult:find("Nothing") then
                    print("Wait Next Night")
                elseif graveResult then
                    print("Go to Grave")
                    toTarget(CFrame.new(-8653.21, 140.98, 6160.03))
                else
                    ReplicatedStorage.Remotes.CommF_:InvokeServer("gravestoneEvent", 2, true)
                end

                -- จัดการ Ghost และ Living Zombie
                if Workspace.NPCs:FindFirstChild("Ghost") then
                    ReplicatedStorage.Remotes.CommF_:InvokeServer("GuitarPuzzleProgress", "Ghost")
                elseif Workspace.Enemies:FindFirstChild("Living Zombie") then
                    for _, v in pairs(Workspace.Enemies:GetChildren()) do
                        if v.Name == "Living Zombie" and v.Humanoid.Health > 0 then
                            v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)
                            v.HumanoidRootPart.Transparency = 1
                            v.Humanoid.JumpPower = 0
                            v.Humanoid.WalkSpeed = 0
                            v.HumanoidRootPart.CanCollide = false
                            toTarget(v.HumanoidRootPart.CFrame * CFrame.new(0, 20, 0))
                            VirtualUser:Button1Down(Vector2.new(1280, 672))
                        end
                    end
                else
                    toTarget(CFrame.new(-10160.79, 138.66, 5955.03))
                end

                -- ตรวจสอบ Candles และส่วนที่เกี่ยวข้องกับ Haunted Castle
                local success, result = pcall(function()
                    if map.Candles.Candle1.Transparency == 0 then
                        if map.Placard1.Left.Part.Transparency == 0 then
                            local placardOrder = {"Placard7.Left", "Placard6.Left", "Placard5.Left", "Placard4.Right", "Placard3.Left", "Placard2.Right", "Placard1.Right"}
                            toTarget(CFrame.new(-8762.69, 176.85, 6171.31))
                            if (rootPart.Position - Vector3.new(-8762.69, 176.85, 6171.31)).Magnitude <= 3 then
                                for _, placard in ipairs(placardOrder) do
                                    local parts = placard:split(".")
                                    local obj = map[parts[1]][parts[2]]
                                    if obj:FindFirstChild("ClickDetector") then
                                        fireclickdetector(obj.ClickDetector)
                                        task.wait(1)
                                    end
                                end
                            end
                        end

                        if map.Tablet.Segment1:FindFirstChild("ClickDetector") then
                            toTarget(targetCFrame)
                            local allSegmentsDone = true
                            for segmentName, targetData in pairs(segmentTargets) do
                                if not adjustSegment(segmentName, targetData) then
                                    allSegmentsDone = false
                                end
                                task.wait(0.5)
                            end
                            if allSegmentsDone then
                                print("ทุก Segment สำเร็จ!")
                            end
                            
                            if allSegmentsDone and map["Lab Puzzle"].ColorFloor.Model.Part1:FindFirstChild("ClickDetector") then
                                local allLabDone = true
                                for partName, targetData in pairs(labTargets) do
                                    if not adjustLabPart(partName, targetData) then
                                        allLabDone = false
                                    end
                                end
                                if allLabDone then
                                    print("ทุก Lab Puzzle สีสำเร็จ!")
                                end
                            end
                        end
                    end
                end)
                if not success then
                    warn("Error in Haunted Castle puzzle section: " .. result)
                    toTarget(targetCFrame) -- เคลื่อนไปยัง Haunted Castle ถ้ามีข้อผิดพลาด
                end
            end)
        end
    end)
end)

page5:Toggle("Auto Hallow Scythe\nออโต้หาเคียวผี", _G.AutoFarmBossHallow, function(value)
    _G.AutoFarmBossHallow = value
    if value == false then
        task.wait()
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        task.wait()
        task.spawn(function()
            while task.wait() do
                pcall(function()
                    if _G.AutoFarmBossHallow then
                        if game:GetService("Workspace").Enemies:FindFirstChild("Soul Reaper") then
                            for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                if string.find(v.Name , "Soul Reaper") then
                                    repeat task.wait()
                                        BringMob = true
                                        FastAttack = true
                                        EquipWeapon(_G.SelectWeapon)
                                        PosMon = v.HumanoidRootPart.CFrame
                                        if not _G.FastAttack then
                                            game:GetService'VirtualUser':CaptureController()
                                            game:GetService'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                        end
                                        v.HumanoidRootPart.Size = Vector3.new(60,60,60)
                                        v.Humanoid.JumpPower = 0
                                        v.Humanoid.WalkSpeed = 0
                                        v.HumanoidRootPart.CanCollide = false
                                        v.Humanoid:ChangeState(11)
                                        v.Humanoid:ChangeState(14)
                                        v.Humanoid:ChangeState(16)
                                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                    until v.Humanoid.Health <= 0 or not _G.AutoFarmBossHallow
                                    BringMob = false
                                    FastAttack = false
                                end
                            end
                        else
                            toTarget(CFrame.new(-9524.7890625, 315.80429077148, 6655.7192382813))
                        end
                    end
                end)
            end
        end)
    end
end)
page5:Toggle("Auto Buddy Swords\nออโต้หาดาบบิ๊กมัม", _G.AutoBuddySwords, function(value)
_G.AutoBuddySwords = value
if value == false then
toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
end
task.spawn(function()
while task.wait() do
pcall(function()
    if _G.AutoBuddySwords then
        if game:GetService("Workspace").Enemies:FindFirstChild("Cake Queen") then
            for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                if v.Name == ("Cake Queen" or v.Name == "Cake Queen") and v.Humanoid.Health > 0 and v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                    repeat
                        task.wait()
                        BringMob = true
                        FastAttack = true
                        if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                            task.wait()
                            EquipWeapon(_G.SelectWeapon)
                        end
                        PosMon = v.HumanoidRootPart.CFrame
                        if not _G.FastAttack then
                            game:GetService 'VirtualUser':CaptureController()
                            game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                        end
                        v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                        v.Humanoid.JumpPower = 0
                        v.Humanoid.WalkSpeed = 0
                        v.HumanoidRootPart.CanCollide = false
                        v.Humanoid:ChangeState(11)
                        v.Humanoid:ChangeState(14)
                        v.Humanoid:ChangeState(16)
                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                    until not _G.AutoBuddySwords or v.Humanoid.Health <= 0
                    BringMob = false
                    FastAttack = false
                end
            end
        end
    end
end)
end
end)
end)

page5:Toggle("Auto MusketeerHat\nออโต้หาหมวกมัสเก็ตเตียร์", _G.AutoMusketeerHat, function(value)
_G.AutoMusketeerHat = value
if value == false then
task.wait()
toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
task.wait()
end
task.spawn(function()
while task.wait() do
pcall(function()
    if _G.AutoMusketeerHat then
        if game:GetService("Players").LocalPlayer.Data.Level.Value >= 1800 and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CitizenQuestProgress").KilledBandits == false then
            if string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Forest Pirate") and string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "50") and game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == true then
                if game:GetService("Workspace").Enemies:FindFirstChild("Forest Pirate") then
                    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Forest Pirate" then
                            repeat
                                task.wait()
                                BringMob = true
                                FastAttack = true
                                if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                    task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                end
                                PosMon = v.HumanoidRootPart.CFrame
                                if not _G.FastAttack then
                                    game:GetService 'VirtualUser':CaptureController()
                                    game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                end
                                v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                v.Humanoid.JumpPower = 0
                                v.Humanoid.WalkSpeed = 0
                                v.HumanoidRootPart.CanCollide = false
                                v.Humanoid:ChangeState(11)
                                v.Humanoid:ChangeState(14)
                                v.Humanoid:ChangeState(16)
                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                            until not _G.AutoMusketeerHat or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                            BringMob = false
                            FastAttack = false
                        end
                    end
                else
                    toTarget(CFrame.new(-13206.452148438, 425.89199829102, -7964.5537109375))
                end
            else
                toTarget(CFrame.new(-12443.8671875, 332.40396118164, -7675.4892578125))
                if (Vector3.new(-12443.8671875, 332.40396118164, -7675.4892578125) - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 30 then
                    wait(1.5)
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StartQuest","CitizenQuest", 1)
                end
            end
        elseif game:GetService("Players").LocalPlayer.Data.Level.Value >= 1800 and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CitizenQuestProgress").KilledBoss == false then
            if game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible and string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, "Captain Elephant") and game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == true then
                if game:GetService("Workspace").Enemies:FindFirstChild("Captain Elephant") then
                    for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Captain Elephant" then
                            OldCFrameElephant = v.HumanoidRootPart.CFrame
                            repeat
                                task.wait()
                                BringMob = true
                                FastAttack = true
                                if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                                    task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                end
                                PosMon = v.HumanoidRootPart.CFrame
                                if not _G.FastAttack then
                                    game:GetService 'VirtualUser':CaptureController()
                                    game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                                end
                                v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                v.Humanoid.JumpPower = 0
                                v.Humanoid.WalkSpeed = 0
                                v.HumanoidRootPart.CanCollide = false
                                v.Humanoid:ChangeState(11)
                                v.Humanoid:ChangeState(14)
                                v.Humanoid:ChangeState(16)
                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                            until not _G.AutoMusketeerHat or v.Humanoid.Health <= 0 or not v.Parent or game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Visible == false
                            BringMob = false
                            FastAttack = false
                        end
                    end
                else
                    toTarget(CFrame.new(-13374.889648438, 421.27752685547, -8225.208984375))
                end
            else
                toTarget(CFrame.new(-12443.8671875, 332.40396118164, -7675.4892578125))
                if (CFrame.new(-12443.8671875, 332.40396118164, -7675.4892578125).Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 4 then
                    wait(1.5)
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CitizenQuestProgress", "Citizen")
                end
            end
        elseif game:GetService("Players").LocalPlayer.Data.Level.Value >= 1800 and game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("CitizenQuestProgress", "Citizen") == 2 then
            toTarget(CFrame.new(-12512.138671875, 340.39279174805, -9872.8203125))
        end
    end
end)
end
end)
end)

page5:Toggle("Auto Cavander\nออโต้หาดาบคาเวนเดอร์", _G.AutoCavander, function(value)
_G.AutoCavander = value
if value == false then
task.wait()
toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
task.wait()
end
task.spawn(function()
while task.wait() do
pcall(function()
    if _G.AutoCavander then
        if game:GetService("Workspace").Enemies:FindFirstChild("Beautiful Pirate") then
            for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                if v.Name == ("Beautiful Pirate") and v.Humanoid.Health > 0 and v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                    repeat
                        task.wait()
                        BringMob = true
                        FastAttack = true
                        if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                            task.wait()
                            EquipWeapon(_G.SelectWeapon)
                        end
                        PosMon = v.HumanoidRootPart.CFrame
                        if not _G.FastAttack then
                            game:GetService 'VirtualUser':CaptureController()
                            game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                        end
                        v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                        v.Humanoid.JumpPower = 0
                        v.Humanoid.WalkSpeed = 0
                        v.HumanoidRootPart.CanCollide = false
                        v.Humanoid:ChangeState(11)
                        v.Humanoid:ChangeState(14)
                        v.Humanoid:ChangeState(16)
                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                    until not _G.AutoCavander or v.Humanoid.Health <= 0
                    BringMob = false
                    FastAttack = false
                end
            end
        else
            toTarget(CFrame.new(5283.609375, 22.56223487854, -110.78285217285))
        end
    end
end)
end
end)
end)

page5:Toggle("Auto Yama Sword\nออโต้หาดาบยามะ", _G.AutoYamaSword, function(value)
_G.AutoYamaSword = value
spawn(function()
while task.wait() do
if _G.AutoYamaSword then
    if game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("EliteHunter", "Progress") >= 30 then
        repeat
            task.wait()
            fireclickdetector(game:GetService("Workspace").Map.Waterfall.SealedKatana.Handle.ClickDetector)
        until game.Players.LocalPlayer.Backpack:FindFirstChild("Yama") or not AutoYama
    end
end
end
end)
end)

page5:Toggle("Auto Tushita Sword\nออโต้หาดาบทูชิตะ", _G.AutoTushitaSword, function(value)
_G.AutoTushitaSword = value
if value == false then
task.wait()
toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
task.wait()
end
task.spawn(function()
while task.wait() do
if _G.AutoTushitaSword then
    if game:GetService("Workspace").Enemies:FindFirstChild("Longma") then
        for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
            if v.Name == ("Longma" or v.Name == "Longma") and v.Humanoid.Health > 0 and v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                repeat
                    task.wait()
                    BringMob = true
                    FastAttack = true
                    if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                        task.wait()
                        EquipWeapon(_G.SelectWeapon)
                    end
                    PosMon = v.HumanoidRootPart.CFrame
                    if not _G.FastAttack then
                        game:GetService 'VirtualUser':CaptureController()
                        game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                    end
                    v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                    v.Humanoid.JumpPower = 0
                    v.Humanoid.WalkSpeed = 0
                    v.HumanoidRootPart.CanCollide = false
                    v.Humanoid:ChangeState(11)
                    v.Humanoid:ChangeState(14)
                    v.Humanoid:ChangeState(16)
                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                until not _G.AutoTushitaSword or not v.Parent or v.Humanoid.Health <= 0
                BringMob = false
                FastAttack = false
            end
        end
    else
        toTarget(CFrame.new(-10238.875976563, 389.7912902832, -9549.7939453125))
    end
end
end
end)
end)

page5:Toggle("Auto Serpent Bow\nออโต้หาธนูงูพิษ", _G.AutoSerpentBow, function(value)
_G.AutoSerpentBow = value
if value == false then
task.wait()
toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
task.wait()
end
task.spawn(function()
while task.wait() do
if _G.AutoSerpentBow then
    if game:GetService("Workspace").Enemies:FindFirstChild("Island Empress") then
        for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
            if v.Name == ("Island Empress" or v.Name == "Island Empress") and v.Humanoid.Health > 0 and v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                repeat
                    task.wait()
                    BringMob = true
                    FastAttack = true
                    if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                        task.wait()
                        EquipWeapon(_G.SelectWeapon)
                    end
                    PosMon = v.HumanoidRootPart.CFrame
                    if not _G.FastAttack then
                        game:GetService 'VirtualUser':CaptureController()
                        game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                    end
                    v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                    v.Humanoid.JumpPower = 0
                    v.Humanoid.WalkSpeed = 0
                    v.HumanoidRootPart.CanCollide = false
                    v.Humanoid:ChangeState(11)
                    v.Humanoid:ChangeState(14)
                    v.Humanoid:ChangeState(16)
                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                until not _G.AutoSerpentBow or not v.Parent or v.Humanoid.Health <= 0
                BringMob = false
                FastAttack = false
            end
        end
    else
        toTarget(CFrame.new(5543.86328125, 668.97399902344, 199.0341796875))
    end
end
end
end)
end)
page5:Toggle("Auto Dark Dagger\nออโต้หาโยรุจิ๋ว", _G.AutoDarkDagger, function(value)
_G.AutoDarkDagger = value
if value == false then
task.wait()
toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
task.wait()
end
task.spawn(function()
while task.wait() do
pcall(function()
    if _G.AutoDarkDagger then
        if game:GetService("Workspace").Enemies:FindFirstChild("rip_indra True Form") then
            for i, v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                if v.Name == ("rip_indra True Form" or v.Name == "rip_indra True Form") and v.Humanoid.Health > 0 and v:IsA("Model") and v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") then
                    repeat
                        task.wait()
                        BringMob = true
                        FastAttack = true
                        if not game.Players.LocalPlayer.Character:FindFirstChild(_G.SelectWeapon) then
                            task.wait()
                            EquipWeapon(_G.SelectWeapon)
                        end
                        PosMon = v.HumanoidRootPart.CFrame
                        if not _G.FastAttack then
                            game:GetService 'VirtualUser':CaptureController()
                            game:GetService 'VirtualUser':Button1Down(Vector2.new(1280, 672))
                        end
                        v.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                        v.Humanoid.JumpPower = 0
                        v.Humanoid.WalkSpeed = 0
                        v.HumanoidRootPart.CanCollide = false
                        v.Humanoid:ChangeState(11)
                        v.Humanoid:ChangeState(14)
                        v.Humanoid:ChangeState(16)
                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                    until not _G.AutoDarkDagger or not v.Parent or v.Humanoid.Health <= 0
                    BringMob = false
                        FastAttack = false
                end
            end
        else
            toTarget(CFrame.new(-5344.822265625, 423.98541259766, -2725.0930175781))
        end
    end
end)
end
end)
end)

spawn(function()
	local gg = getrawmetatable(game)
	local old = gg.__namecall
	setreadonly(gg,false)
	gg.__namecall = newcclosure(function(...)
		local method = getnamecallmethod()
		local args = {...}
		if tostring(method) == "FireServer" then
			if tostring(args[1]) == "RemoteEvent" then
				if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
					if _G.UseSkill and _G.AutoFarmFruitMastery then
						if type(args[2]) == "vector" then 
							args[2] = PositionSkillMasteryDevilFruit
						else
							args[2] = CFrame.new(PositionSkillMasteryDevilFruit)
						end
						return old(unpack(args))
					end
				end
			end
		end
		return old(...)
	end)
end)

spawn(function()
	local gt = getrawmetatable(game)
	local old = gt.__namecall
	setreadonly(gt,false)
	gt.__namecall = newcclosure(function(...)
		local args = {...}
		if getnamecallmethod() == "InvokeServer" then 
			if _G.SelectWeaponGun then
				if _G.SelectWeaponGun == "Soul Guitar" then
					if tostring(args[2]) == "TAP" then
						if AutoFarmGunMastery and _G.UseSkill then
							args[3] = PositionSkillMasteryGun
						end
					end
				end
			end
		end
		return old(unpack(args))
	end)
	setreadonly(gt,true)
end)

task.spawn(function()
	while wait() do
		for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do  
			if v:IsA("Tool") then
				if v:FindFirstChild("RemoteFunctionShoot") then 
					_G.SelectWeaponGun = v.Name
				end
			end
		end
	end
end)
spawn(function()
    while wait() do
        for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do  
            if v:IsA("Tool") then
                if v.ToolTip == "Gun" then
                    _G.SelectWeaponGun = v.Name
                end
            end
        end
        for i,v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do  
            if v:IsA("Tool") then
                if v.ToolTip == "Gun" then
                    _G.SelectWeaponGun = v.Name
                end
            end
        end
    end
end)

local Cam = workspace.CurrentCamera
local hotkey = true
function lookAt(target, eye)
    Cam.CFrame = CFrame.new(target, eye)
end
function CheckMonFF(trg_part)
    local nearest = nil
    local last = math.huge
    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
        if v.Name == QuestCheck()[3] then
            local ePos, vissss = workspace.CurrentCamera:WorldToViewportPoint(v[trg_part].Position)
            local AccPos = Vector2.new(ePos.x, ePos.y)
            local mousePos = Vector2.new(workspace.CurrentCamera.ViewportSize.x / 2, workspace.CurrentCamera.ViewportSize.y / 2)
            local distance = (AccPos - mousePos).magnitude
            if distance < last and vissss and hotkey == true and distance < 1500 then
                last = distance
                nearest = v
            end
        end
    end
    return nearest
end
spawn(function()
    while wait() do
        if _G.AutoFarmGunMastery and _G.UseSkill == true then
            local closest = CheckMonFF("HumanoidRootPart")
            lookAt(Cam.CFrame.p, closest:FindFirstChild("HumanoidRootPart").Position)
            local args = {
                [1] = PositionSkillMasteryGun
            }
            
            game:GetService("Players").LocalPlayer.Character[_G.SelectWeaponGun].Remotepage14:FireServer(unpack(args))
            if not string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, QuestCheck()[6]) then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
            end
        end
    end
end)
spawn(function()
    while wait() do
        if _G.AutoFarmGunMastery and _G.UseSkill == true then
            local args = {
                [1] = PositionSkillMasteryGun,
                [2] = MonHumanoidRootPart
            }
            game:GetService("Players").LocalPlayer.Character[_G.SelectWeaponGun].RemoteFunctionShoot:InvokeServer(unpack(args))
        end
    end
end)
spawn(function()
    while wait() do
        if _G.AutoFarmGunMastery then
            game:GetService("VirtualUser"):CaptureController()
            game:GetService("VirtualUser"):Button1Down(Vector2.new(1280, 672))
        end
    end
end)

page6:Seperator("✨")
_G.HealthMs = 25
page6:Toggle("Auto FarmGunMastery\nฟาร์มมาสเตอรี่ปืน", _G.Settings.AutoFarmGunMastery, function(value)
_G.AutoFarmGunMastery = value
_G.Settings.AutoFarmGunMastery = value
SaveSettings()
    if value == false then
    toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
    spawn(function()
        while wait() do
            local MyLevel = game.Players.LocalPlayer.Data.Level.Value
            local QuestC = game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest
            pcall(function()
                if _G.AutoFarmGunMastery then
                    if not string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, QuestCheck()[6]) then
                        game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                    end
                    if QuestC.Visible == true then
                        if game:GetService("Workspace").Enemies:FindFirstChild(QuestCheck()[3]) then
                            for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                                if v.Name == QuestCheck()[3] then
                                    if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                        PosMon = v.HumanoidRootPart.CFrame
                                        MonHumanoidRootPart = v.HumanoidRootPart
                                        PositionSkillMasteryGun = v.HumanoidRootPart.Position
                                        repeat task.wait()
                                            v.HumanoidRootPart.CFrame = PosMon
                                            if v.Humanoid.Health <= v.Humanoid.MaxHealth * _G.HealthMs/100 then 
                                                _G.UseSkill = true
                                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                v.HumanoidRootPart.Size = Vector3.new(120,120,120)
                                                v.HumanoidRootPart.CanCollide = false
                                                v.Head.CanCollide = false
                                                BringMob = true
                                                v.HumanoidRootPart.Transparency = 1
                                                EquipWeapon(_G.SelectWeaponGun)
                                                if game:GetService("Players").LocalPlayer.Character:FindFirstChild(_G.SelectWeaponGun) and game:GetService("Players").LocalPlayer.Character:FindFirstChild(_G.SelectWeaponGun):FindFirstChild("RemoteFunctionShoot") then
                                                    mouse1click()
                                                        local args = {
                                                            [1] = v.HumanoidRootPart.Position,
                                                            [2] = v.HumanoidRootPart
                                                        }
                                                        game:GetService("Players").LocalPlayer.Character[_G.SelectWeaponGun].RemoteFunctionShoot:InvokeServer(unpack(args))
                                                    end
                                                    if _G.SkillZ and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                                    game:service('VirtualInputManager'):SendKeyEvent(true, "Z", false, game)
                                                    wait(.1)
                                                    game:service('VirtualInputManager'):SendKeyEvent(false, "Z", false, game)
                                                end
                                                if _G.SkillX and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 then
                                                    game:service('VirtualInputManager'):SendKeyEvent(true, "X", false, game)
                                                    wait(.1)
                                                    game:service('VirtualInputManager'):SendKeyEvent(false, "X", false, game)
                                                end
                                            else
                                                _G.UseSkill = false
                                                v.HumanoidRootPart.Size = Vector3.new(120,120,120)
                                                v.HumanoidRootPart.CanCollide = false
                                                v.Head.CanCollide = false
                                                BringMob = true
                                                FastAttack = true
                                                EquipWeapon(_G.SelectWeapon)
                                                v.HumanoidRootPart.Transparency = 1
                                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                if (v.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                    game:GetService("VirtualUser"):CaptureController()
                                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                                end
                                            end
                                        until not _G.AutoFarmGunMastery or not v.Parent or v.Humanoid.Health <= 0 or QuestC.Visible == false or not v:FindFirstChild("HumanoidRootPart")
                                    end
                                end
                            end
                        else
                            _G.UseSkill = false
                            if _G.Auto_CFrame then
                                toTarget(QuestCheck()[7][SetCFarme] * CFrame.new(0,30,5)) 
                                if (QuestCheck()[7][SetCFarme].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                    if SetCFarme == nil or SetCFarme == '' then
                                        SetCFarme = 1
                                        print(SetCFarme)
                                    elseif SetCFarme >= #QuestCheck()[7] then
                                        SetCFarme = 1
                                        print(SetCFarme)
                                    end
                                    SetCFarme =  SetCFarme + 1
    
                                    print(SetCFarme)
                                    wait(0.5)
                                end
                            else
                                if AttackRandomType_MonCFrame == 1 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                                elseif AttackRandomType_MonCFrame == 2 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,-20))
                                elseif AttackRandomType_MonCFrame == 3 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(20,30,0))
                                elseif AttackRandomType_MonCFrame == 4 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,-20))
                                elseif AttackRandomType_MonCFrame == 5 then
                                    toTarget(QuestCheck()[7][1] * CFrame.new(-20,30,0))
                                else
                                    toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                                end
                            end
                        end
                    else
                        toTarget(QuestCheck()[2])
                        if (QuestCheck()[2].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 1 then
                            BringMob = false
                            wait(0.2)
                            game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer("StartQuest", QuestCheck()[4], QuestCheck()[1]) wait(0.5)
                            toTarget(QuestCheck()[7][1] * CFrame.new(0,30,5))
                        end
                    end
                end
            end)
        end
    end)
end)

page6:Toggle("Auto FarmFruitMastery\nฟาร์มมาสเตอรี่ผลปีศาจ", _G.Settings.AutoFarmFruitMastery, function(value)
_G.AutoFarmFruitMastery = value
_G.Settings.AutoFarmFruitMastery = value
SaveSettings()
if value == false then
    toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
end
spawn(function()
    while wait() do
        local MyLevel = game.Players.LocalPlayer.Data.Level.Value
        local QuestC = game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest
        pcall(function()
            if _G.AutoFarmFruitMastery then
                if not string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, QuestCheck()[6]) then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                end
                if QuestC.Visible == true then
                    if game:GetService("Workspace").Enemies:FindFirstChild(QuestCheck()[3]) then
                        for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                            if v.Name == QuestCheck()[3] then
                                if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                    PositionSkillMasteryDevilFruit = v.HumanoidRootPart.Position
                                    repeat task.wait()
                                        if not string.find(game:GetService("Players").LocalPlayer.PlayerGui.Main.Quest.Container.QuestTitle.Title.Text, QuestCheck()[6]) then
                                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("AbandonQuest")
                                        else
                                            if v.Humanoid.Health <= v.Humanoid.MaxHealth * _G.HealthMs/100 then 
                                                _G.UseSkill = true
                                                EquipBloxFruit()
                                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                PosMon = v.HumanoidRootPart.CFrame
                                                v.HumanoidRootPart.Size = Vector3.new(60,60,60)
                                                v.HumanoidRootPart.CanCollide = false
                                                v.Humanoid.WalkSpeed = 0
                                                v.Head.CanCollide = false
                                                BringMob = true
                                                v.HumanoidRootPart.Transparency = 1
                                                if game:GetService("Players").LocalPlayer.Character:FindFirstChild(game.Players.LocalPlayer.Data.DevilFruit.Value) then
                                                    MasteryDevilFruit = require(game:GetService("Players").LocalPlayer.Character[game.Players.LocalPlayer.Data.DevilFruit.Value].Data)
                                                    DevilFruitMastery = game:GetService("Players").LocalPlayer.Character[game.Players.LocalPlayer.Data.DevilFruit.Value].Level.Value
                                                elseif game:GetService("Players").LocalPlayer.Backpack:FindFirstChild(game.Players.LocalPlayer.Data.DevilFruit.Value) then
                                                    MasteryDevilFruit = require(game:GetService("Players").LocalPlayer.Backpack[game.Players.LocalPlayer.Data.DevilFruit.Value].Data)
                                                    DevilFruitMastery = game:GetService("Players").LocalPlayer.Backpack[game.Players.LocalPlayer.Data.DevilFruit.Value].Level.Value
                                                end
                                                if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dragon-Dragon") then
                                                    if _G.SkillZ and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.Z then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "Z", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "Z", false, game)
                                                    end
                                                    if _G.SkillZ and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.X then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "X", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "X", false, game)
                                                    end
                                                elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild("Human-Human: Buddha") then
                                                    if _G.SkillZ and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and game.Players.LocalPlayer.Character.HumanoidRootPart.Size == Vector3.new(7.6, 7.676, 3.686) and DevilFruitMastery >= MasteryDevilFruit.Lvl.Z then
                                                    print(1)
                                                    else
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "Z", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "Z", false, game)
                                                    end
                                                    if _G.SkillX and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.X then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "X", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "X", false, game)
                                                    end
                                                    if _G.SkillC and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.C then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "C", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "C", false, game)
                                                    end
                                                elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild("Venom-Venom") then
                                                    if _G.SkillZ and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.Z then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "Z", false, game)
                                                        wait(4)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "Z", false, game)
                                                    end
                                                    if _G.SkillX and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.X then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "X", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "X", false, game)
                                                    end
                                                    if _G.SkillC and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.C then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "C", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "C", false, game)
                                                    end
                                                elseif game:GetService("Players").LocalPlayer.Character:FindFirstChild(game.Players.LocalPlayer.Data.DevilFruit.Value) then
                                                    game:GetService("Players").LocalPlayer.Character:FindFirstChild(game.Players.LocalPlayer.Data.DevilFruit.Value).MousePos.Value = v.HumanoidRootPart.Position
                                                    if _G.SkillZ and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.Z then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "Z", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "Z", false, game)
                                                    end
                                                    if _G.SkillX and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.X then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "X", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "X", false, game)
                                                    end
                                                    if _G.SkillC and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.C then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "C", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "C", false, game)
                                                    end
                                                    if _G.SkillV and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.V then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "V", false, game)
                                                        wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "V", false, game)
                                                    end
                                                    if _G.SkillF and v:FindFirstChild("HumanoidRootPart") and v:FindFirstChild("Humanoid") and v.Humanoid.Health > 0 and DevilFruitMastery >= MasteryDevilFruit.Lvl.F then
                                                        game:service('VirtualInputManager'):SendKeyEvent(true, "F", false, game)
                                                            wait(.1)
                                                        game:service('VirtualInputManager'):SendKeyEvent(false, "F", false, game)
                                                    end
                                                end
                                            else
                                                _G.UseSkill = false
                                                PosMon = v.HumanoidRootPart.CFrame
                                                v.HumanoidRootPart.Size = Vector3.new(60,60,60)
                                                v.HumanoidRootPart.CanCollide = false
                                                v.Head.CanCollide = false
                                                BringMob = true
                                                FastAttack = true
                                                EquipWeapon(_G.SelectWeapon)
                                                v.HumanoidRootPart.Transparency = 1
                                                toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                                if (v.HumanoidRootPart.CFrame.Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                                    game:GetService("VirtualUser"):CaptureController()
                                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                                end
                                            end
                                        end
                                    until not _G.AutoFarmFruitMastery or not v.Parent or v.Humanoid.Health <= 0 or QuestC.Visible == false or not v:FindFirstChild("HumanoidRootPart")
                                end
                            end
                        end
                    else
                        _G.UseSkill = false
                        if _G.Auto_CFrame then
                            toTarget(QuestCheck()[7][SetCFarme] * CFrame.new(0,30,5))
                            if (QuestCheck()[7][SetCFarme].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 50 then
                                if SetCFarme == nil or SetCFarme == '' then
                                    SetCFarme = 1
                                    print(SetCFarme)
                                elseif SetCFarme >= #QuestCheck()[7] then
                                    SetCFarme = 1
                                    print(SetCFarme)
                                end
                                SetCFarme =  SetCFarme + 1

                                print(SetCFarme)
                                wait(0.5)
                            end
                        else
                            if AttackRandomType_MonCFrame == 1 then
                                toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                            elseif AttackRandomType_MonCFrame == 2 then
                                toTarget(QuestCheck()[7][1] * CFrame.new(0,30,-20))
                            elseif AttackRandomType_MonCFrame == 3 then
                                toTarget(QuestCheck()[7][1] * CFrame.new(20,30,0))
                            elseif AttackRandomType_MonCFrame == 4 then
                                toTarget(QuestCheck()[7][1] * CFrame.new(0,30,-20))
                            elseif AttackRandomType_MonCFrame == 5 then
                                toTarget(QuestCheck()[7][1] * CFrame.new(-20,30,0))
                            else
                                toTarget(QuestCheck()[7][1] * CFrame.new(0,30,20))
                            end
                        end
                    end
                else
                    toTarget(QuestCheck()[2])
                    if (QuestCheck()[2].Position - game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 1 then
                        BringMob = false
                        wait(0.2)
                        game:GetService('ReplicatedStorage').Remotes.CommF_:InvokeServer("StartQuest", QuestCheck()[4], QuestCheck()[1]) wait(0.5) 
                        toTarget(QuestCheck()[7][1] * CFrame.new(0,30,5))
                    end
                end
            end
        end)
    end
end)
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if _G.AutoFarmFruitMastery then
                local On = {
                    [1] = FruitPos.Position
                }
                game:GetService("Players").LocalPlayer.Character[game:GetService("Players").LocalPlayer.Data.DevilFruit.Value].Remotepage14:FireServer(unpack(On))
            else
               local Off = {
                    [1] = nil
                }
                game:GetService("Players").LocalPlayer.Character[game:GetService("Players").LocalPlayer.Data.DevilFruit.Value].Remotepage14:FireServer(unpack(Off)) 
            end
        end)
    end
end)
page6:Slider("Kill At (%)\nฆ่าเมื่อ (%)",1,100,25,function(value)
    _G.HealthMs = value
end)

page6:Seperator("Skill\nรายการสกิล")
page6:Toggle("Skill Z\nสกิล Z", _G.SkillZ, function(value)
_G.SkillZ = value
end)
page6:Toggle("Skill X\nสกิล X", _G.SkillX, function(value)
_G.SkillX = value
end)

page6:Toggle("Skill C\nสกิล C", _G.SkillC, function(value)
_G.SkillC = value
end)

page6:Toggle("Skill V\nสกิล V", _G.SkillV, function(value)
_G.SkillV = value
end)

page6:Toggle("Skill F\nสกิล F", _G.SkillF, function(value)
_G.SkillF = value
end)

if _G.AutoFarmGunMastery or _G.AutoFarmFruitMastery then
_G.FastType = "Slow"
else
_G.FastType = "Fast"
end
page7:Seperator("🍈")

page7:Toggle("Auto BringFruit\nดึงผลไม้ปีศาจ",_G.Auto_Bring_Fruit , function(value)
     _G.Auto_Bring_Fruit  = value
end)
page7:Toggle("Auto RandomFruits\nสุ่มผลไม้ปีศาจ", _G.AutoBuyRandomFruits, function(value)
_G.AutoBuyRandomFruits = value
end)

spawn(function()
    while task.wait() do
        if _G.AutoBuyRandomFruits then
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Cousin", "Buy")
        end
    end
end)

page7:Toggle("Auto StoreFruits\nเก็บผลไม้ปีศาจเข้ากระเป๋า", _G.AutoStoreFruits, function(value)
_G.AutoStoreFruits = value
end)

spawn(function()
    while wait() do
        if _G.Auto_Bring_Fruit then
            pcall(function()
                for i,v in pairs(game:GetService("Workspace"):GetChildren()) do
                    if v:IsA("Tool") and string.find(v.Name,"Fruit") then 
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = v.Handle.CFrame 
                    end
                end
            end)
        end
    end
end)

spawn(function()
while task.wait() do
    if _G.AutoStoreFruits then
        pcall(function()
            task.wait()
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Bomb Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bomb Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Bomb-Bomb",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Bomb Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bomb Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Spike Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Spike Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Spike-Spike",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Spike Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Spike Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Chop Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Chop Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Chop-Chop",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Chop Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Chop Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Spring Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Spring Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Spring-Spring",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Spring Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Spring Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Kilo Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Kilo Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Kilo-Kilo",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Kilo Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Kilo Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Smoke Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Smoke Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Smoke-Smoke",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Smoke Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Smoke Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Spin Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Spin Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Spin-Spin",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Spin Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Spin Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Flame Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Flame Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Flame-Flame",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Flame Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Flame Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Bird: Falcon Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bird: Falcon Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Bird-Bird: Falcon",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Bird: Falcon Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bird: Falcon Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Ice Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Ice Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Ice-Ice",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Ice Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Ice Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Sand Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Sand Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Sand-Sand",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Sand Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Sand Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dark Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dark Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Dark-Dark",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dark Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dark Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Revive Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Revive Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Revive-Revive",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Revive Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Revive Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Diamond Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Diamond Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Diamond-Diamond",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Diamond Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Diamond Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Light Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Light Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Light-Light",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Light Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Light Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Love Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Love Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Love-Love",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Love Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Love Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Rubber Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Rubber Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Rubber-Rubber",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Rubber Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Rubber Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Barrier Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Barrier Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Barrier-Barrier",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Barrier Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Barrier Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Magma Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Magma Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Magma-Magma",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Magma Fruit") or
                    game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Magma Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Door Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Door Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Door-Door",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Door Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Door Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Quake Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Quake Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Quake-Quake",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Quake Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Quake Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Human-Human: Buddha Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Human-Human: Buddha Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Human-Human: Buddha",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Human-Human: Buddha Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Human-Human: Buddha Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("String Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("String Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "String-String",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("String Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("String Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Bird: Phoenix Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bird: Phoenix Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Bird-Bird: Phoenix",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Bird: Phoenix Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Bird: Phoenix Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Rumble Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Rumble Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Rumble-Rumble",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Rumble Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Rumble Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Paw Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Paw Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Paw-Paw",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Paw Fruit") or
                    game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Paw Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Gravity Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Gravity Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Gravity-Gravity",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Gravity Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Gravity Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dough Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dough Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Dough-Dough",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dough Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dough Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Shadow Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Shadow Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Shadow-Shadow",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Shadow Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Shadow Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Venom Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Venom Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Venom-Venom",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Venom Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Venom Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Control Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Control Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Control-Control",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Control Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Control Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dragon Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dragon Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Dragon-Dragon",
                game:GetService("Players").LocalPlayer.Character:FindFirstChild("Dragon Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Dragon Fruit"))
            end
            if game:GetService("Players").LocalPlayer.Character:FindFirstChild("Leopard Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Leopard Fruit") then
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("StoreFruit", "Leopard-Leopard",
                    game:GetService("Players").LocalPlayer.Character:FindFirstChild("Leopard Fruit") or game:GetService("Players").LocalPlayer.Backpack:FindFirstChild("Leopard Fruit"))
            end
        end)
    end
end
end)

local Remote_GetFruits = game.ReplicatedStorage:FindFirstChild("Remotes").CommF_:InvokeServer("GetFruits");
	
Table_DevilFruitSniper = {}
ShopDevilSell = {}

for i,v in next,Remote_GetFruits do
    table.insert(Table_DevilFruitSniper,v.Name)
    if v.OnSale then 
        table.insert(ShopDevilSell,v.Name)
    end
end

page7:Dropdown("Select DevilFruits\nเลือกผลไม้ปีศาจ",Table_DevilFruitSniper,function(value)
    _G.Select_Devil_Fruit = value
end)
page7:Toggle("Auto Buy DevilFruits Selected\nออโต้ซื้อผลไม้ปีศาจที่เลือก",_G.Auto_Buy_Devil_Fruit,function(value)
    _G.Auto_Buy_Devil_Fruit = value 
end)


spawn(function()
    while wait() do
        if _G.Auto_Buy_Devil_Fruit then
            pcall(function()
                local string_1 = "PurchaseRawFruit";
                local string_2 = _G.Select_Devil_Fruit;
                local Target = game:GetService("ReplicatedStorage").Remotes["CommF_"];
                Target:InvokeServer(string_1, string_2);
            end)
        end                              
    end
end)
page8:Seperator("🛡️")
local Raidslist = {"Flame","Ice","Quake","Light","Dark","String","Rumble","Magma","Human: Buddha","Sand","Bird: Phoenix","Dough"}
page8:Dropdown("Select Raids\nเลือกดันเจี้ยน", Raidslist, function(value)
    _G.SelectRaids = value
end)
page8:Toggle("Auto Raids\nลงดันเจี้ยน", _G.AutoRaids, function(value)
    _G.AutoRaids = value
    if value == false then
        task.wait()
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        task.wait()
    end
end)
page8:Toggle("KillAura(no recommend)\nออร่าฆ่ามอนรอบตัว(ไม่แนะนำ)", _G.KillAura, function(value)
    _G.KillAura = value
end)
page8:Toggle("Auto NextIsland\nออโต้ไปเกาะถัดไป", _G.AutoNextPlace, function(value)
    _G.AutoNextPlace = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
page8:Toggle("Buy AwakenedSkill\nซื้อสกิลตื่น", _G.AutoAwakened, function(value)
    _G.AutoAwakened = value
end)

task.spawn(function()
    while task.wait() do
        if _G.AutoRaids then
            pcall(function()
            if game.Players.LocalPlayer.Backpack:FindFirstChild("Special Microchip") or 
               game.Players.LocalPlayer.Character:FindFirstChild("Special Microchip") or 
               game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") or 
               game:GetService("'
local ifizXwpuctAu = 'Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") or 
               game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") or 
               game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") or 
               game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") then
                if (game.Players.LocalPlayer.Backpack:FindFirstChild("Special Microchip") or 
                    game.Players.LocalPlayer.Character:FindFirstChild("Special Microchip")) and 
                    game:GetService("Players").LocalPlayer.PlayerGui.Main.TopHUDList.RaidTimer.Visible == false then
                  
                    if World3 then
                        if not workspace.Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector then
                            toTarget(CFrame.new(-5058.07715, 314.494354, -2956.26758, 0.954437077, 1.35740275e-09, 0.298412323, -2.5520499e-09, 1, 3.61368535e-09, -0.298412323, -4.21059854e-09, 0.954437077))
                        else
                            fireclickdetector(workspace.Map["Boat Castle"].RaidSummon2.Button.Main.ClickDetector)
                        end
                    end
                    task.wait(0)
                elseif game:GetService("Players").LocalPlayer.PlayerGui.Main.TopHUDList.RaidTimer.Visible == true then
                    pcall(function()
                        repeat
                            task.wait()
                            local character = game.Players.LocalPlayer.Character
                            if not character or not character:FindFirstChild("Humanoid") or not character:FindFirstChild("HumanoidRootPart") then
                                repeat
                                    task.wait()
                                    character = game.Players.LocalPlayer.Character
                                until character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart")
                            end

                            local targetIsland = nil
                            local islandCFrame = nil
                            local islandName = nil

                            for i = 5, 1, -1 do
                                local island = game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island " .. i)
                                if island then
                                    targetIsland = island
                                    islandName = "Island " .. i
                                    islandCFrame = CFrame.new(island.CFrame.X, 60, island.CFrame.Z)
                                    break
                                end
                            end

                            if targetIsland then
                                local distance = (targetIsland.Position - character.HumanoidRootPart.Position).Magnitude
                                if distance > 350 then
                                    Farmtween = toTarget(islandCFrame)
                                elseif distance <= 10 then
                                    if Farmtween then
                                        Farmtween:Stop()
                                    end
                                end
                            end

                            for i, v in pairs(game.Workspace.Enemies:GetChildren()) do
                                if _G.AutoRaids and game:GetService("Players").LocalPlayer.PlayerGui.Main.TopHUDList.RaidTimer.Visible == true and 
                                   v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and 
                                   (v.HumanoidRootPart.Position - character.HumanoidRootPart.Position).Magnitude <= 400 then
                                    repeat
                                        task.wait(.1)
                                        toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                        EquipWeapon(_G.SelectWeapon)
                                        BringMob = true
                                    until v.Humanoid.Health <= 1 or not v.Parent or not _G.AutoRaids 
                                    v:Destroy()
                                end
                            end

                            if _G.AutoAwakened then
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Awakener", "Awaken")
                            end
                        until not game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") and 
                              not game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") and 
                              not game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") and 
                              not game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") and 
                              not game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") or 
                              game:GetService("Players").LocalPlayer.PlayerGui.Main.TopHUDList.RaidTimer.Visible == false
                        if _G.AutoAwakened then
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Awakener", "Awaken")
                        end
                    end)
                end
            else
                if _G.AutoAwakened then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("Awakener", "Awaken")
                end
            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("RaidsNpc","Select",_G.SelectRaids)
                end
            end)
        end
    end
end)
spawn(function()
    while task.wait(0) do
        if _G.KillAura then
            for i,v in pairs(game.Workspace.Enemies:GetChildren()) do
                if  v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart")  then
                    pcall(function()
                        repeat task.wait(.1)
                            sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
                            v.Humanoid.Health = 0
                        until not _G.KillAura or v.Humanoid.Health <= 0 or not v.Parent
                    end)
                end
            end
        end
    end
end)

spawn(function()
    pcall(function()
        while task.wait() do
            if _G.AutoNextPlace then
                if game:GetService("Players")["LocalPlayer"].PlayerGui.Main.Timer.Visible == true and game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") or game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") then
                    if game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 5") then
                        toTarget(game:GetService("Workspace")["_WorldOrigin"].Locations["Island 5"].CFrame * CFrame.new(4, 65, 10))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 4") then
                        toTarget(game:GetService("Workspace")["_WorldOrigin"].Locations["Island 4"].CFrame *  CFrame.new(4, 65, 10))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 3") then
                        toTarget(game:GetService("Workspace")["_WorldOrigin"].Locations["Island 3"].CFrame * CFrame.new(4, 65, 10))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 2") then
                        toTarget(game:GetService("Workspace")["_WorldOrigin"].Locations["Island 2"].CFrame * CFrame.new(4, 65, 10))
                    elseif game:GetService("Workspace")["_WorldOrigin"].Locations:FindFirstChild("Island 1") then
                        toTarget(game:GetService("Workspace")["_WorldOrigin"].Locations["Island 1"].CFrame * CFrame.new(4, 65, 10))
                    end
                elseif World2 then
                    toTarget(CFrame.new(-6438.73535, 250.645355, -4501.50684))
                elseif World3 then
                    toTarget(CFrame.new(-5057.146484375, 314.54132080078, -2934.7995605469))
                end
            end
        end
    end)
end)

local plr = game:GetService("Players").LocalPlayer;
local getplayers = {}
local getitems = {}
local getweb = {}

page13:Seperator("⚔️")
do
    for i, v in pairs(game:GetService("Workspace").Characters:GetChildren()) do
        if v.Name ~= plr.Name then
            table.insert(getplayers, v.Name)
        end
    end
    for i, v in pairs(plr.Backpack:GetChildren()) do
        if v:IsA("Tool") then
            table.insert(getweb, v.Name)
        end
    end
end


local PlayerDrop = page13:Dropdown("Select Players\nเลือกเพลย์เยอร์",getplayers, function(value)
    SelectPlayer = value
end)
page13:Button("Refresh\nรีเฟชร", function()
    PlayerDrop:Clear()
    for i, v in next, game:GetService("Workspace").Characters:GetChildren() do
        if v.Name ~= plr.Name then
            if v:FindFirstChild("HumanoidRootPart") then
                PlayerDrop:Add(v.Name)
            end
        end
    end
end)
    
page13:Toggle("Teleport To Players\nเทเลพอร์ตไปหาเพลย์เยอร์", teleporttop, function(value)
    teleporttop = value
    if value == false then
        task.wait()
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
        task.wait()
    end
end)
page13:Toggle("Spectate Player\nแอบดูเพลย์เยอร์", SpectatePlys, function(value)
    SpectatePlys = value
    local plr1 = game:GetService("Players").LocalPlayer.Character.Humanoid
    local plr2 = game:GetService("Players"):FindFirstChild(SelectPlayer)
    repeat
        wait(.1)
        game:GetService("Workspace").Camera.CameraSubject = game:GetService("Players"):FindFirstChild(SelectPlayer)
            .Character.Humanoid
    until SpectatePlys == false
    game:GetService("Workspace").Camera.CameraSubject = game:GetService("Players").LocalPlayer.Character.Humanoid
end)
spawn(function()
    while task.wait() do
        if teleporttop then
            pcall(function()
                if game.Players:FindFirstChild(SelectPlayer) then
                    toTarget(game.Players[SelectPlayer].Character.HumanoidRootPart.CFrame)
                end
            end)
        end
    end
end)
page13:Toggle("Aimbot Gun\nอิมบอทปืน", false, function(value)
    AimbotGun = value
end)

page13:Toggle("Aimbot Skill\nอิมบอทสกิล", false, function(value)
    Skillaimbot = value
end)

local gg = getrawmetatable(game)
local old = gg.__namecall
setreadonly(gg, false)
gg.__namecall = newcclosure(function(...)
local method = getnamecallmethod()
local args = { ... }
if tostring(method) == "FireServer" then
if tostring(args[1]) == "RemoteEvent" then
    if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
        if Skillaimbot then
            args[2] = AimBotSkillPosition
            return old(unpack(args))
        end
    end
end
end
return old(...)
end)
spawn(function()
while task.wait() do
for i, v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
    if v:IsA("Tool") then
        if v:FindFirstChild("RemoteFunctionShoot") then
            SelectToolWeaponGun = v.Name
        end
    end
end
for i, v in pairs(game.Players.LocalPlayer.Character:GetChildren()) do
    if v:IsA("Tool") then
        if v:FindFirstChild("RemoteFunctionShoot") then
            SelectToolWeaponGun = v.Name
        end
    end
end
end
end)
--[aimbot skill]
task.spawn(function()
while task.wait() do
if Skillaimbot and SelectPlayer then
    if game.Players:FindFirstChild(SelectPlayer) and game.Players:FindFirstChild(SelectPlayer).Character:FindFirstChild("HumanoidRootPart") and game.Players:FindFirstChild(SelectPlayer).Character:FindFirstChild("Humanoid") and game.Players:FindFirstChild(SelectPlayer).Character.Humanoid.Health > 0 then
        AimBotSkillPosition = game.Players:FindFirstChild(SelectPlayer).Character:FindFirstChild("HumanoidRootPart").Position
    end
end
end
end)
task.spawn(function()
while task.wait() do
if Skillaimbot and AllPlayersTableSkipFarm  then
    if game.Players:FindFirstChild(AllPlayersTableSkipFarm) and game.Players:FindFirstChild(AllPlayersTableSkipFarm).Character:FindFirstChild("HumanoidRootPart") and game.Players:FindFirstChild(AllPlayersTableSkipFarm).Character:FindFirstChild("Humanoid") and game.Players:FindFirstChild(AllPlayersTableSkipFarm).Character.Humanoid.Health > 0 then
        AimBotSkillPosition = game.Players:FindFirstChild(AllPlayersTableSkipFarm).Character:FindFirstChild("HumanoidRootPart").Position
    end
end
end
end)
--[aimbot gun]

local lp = game:GetService('Players').LocalPlayer
local mouse = lp:GetMouse()
mouse.Button1Down:Connect(function()
    if AimbotGun then
        local args = {
            [1] = game:GetService("Players"):FindFirstChild(SelectPlayer).Character.HumanoidRootPart.Position,
            [2] = {[1] = game:GetService("Players"):FindFirstChild(SelectPlayer).Character.HumanoidRootPart}
        }
        game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RE/ShootGunEvent"):FireServer(unpack(args))
    end
end)
--[ESP]
local ESPObjects = {} 
local Number = math.random(1, 1000000)

local function isnil(thing)
    return thing == nil
end

local function round(n)
    return math.floor(tonumber(n) + 0.5)
end

local function CreateESP(target, adornee, name, color, distanceFunc, extraTextFunc)
    if ESPObjects[target] then return end

    local bill = Instance.new("BillboardGui")
    bill.Name = "NameEsp" .. Number
    bill.ExtentsOffset = Vector3.new(0, 1, 0)
    bill.Size = UDim2.new(1, 200, 1, 30)
    bill.Adornee = adornee
    bill.AlwaysOnTop = true
    bill.Enabled = false 

    local nameLabel = Instance.new("TextLabel", bill)
    nameLabel.Font = "Code"
    nameLabel.FontSize = "Size14"
    nameLabel.TextWrapped = true
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.TextYAlignment = "Top"
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextStrokeTransparency = 0.5
    nameLabel.TextColor3 = color

    ESPObjects[target] = {
        Billboard = bill,
        Label = nameLabel,
        DistanceFunc = distanceFunc,
        ExtraTextFunc = extraTextFunc,
        Target = target
    }

    bill.Parent = adornee
end

local function RemoveESP(target)
    if ESPObjects[target] then
        if ESPObjects[target].Billboard then
            ESPObjects[target].Billboard:Destroy()
        end
        ESPObjects[target] = nil
    end
end

local function UpdateAllESP()
    for target, esp in pairs(ESPObjects) do
        if not target or not target.Parent then
            RemoveESP(target)
        else
            if not esp.Billboard.Adornee then
                RemoveESP(target)
            end

            local enabled = false
            local labelText = ""

            if target:IsA("Player") and ESPPlayer then
                enabled = true
                local distance = "N/A"
                local healthPercent = "N/A"
                pcall(function()
                    distance = esp.DistanceFunc()
                    if target.Character and target.Character:FindFirstChild("Humanoid") then
                        local humanoid = target.Character.Humanoid
                        healthPercent = round(humanoid.Health * 100 / humanoid.MaxHealth)
                    end
                end)
                labelText = target.Name .. " | " .. distance .. " M\nHealth: " .. healthPercent .. "%"
            elseif target.Parent == Workspace.ChestModels and ChestESP then
                enabled = true
                local distance = "N/A"
                pcall(function()
                    distance = esp.DistanceFunc()
                end)
                labelText = target.Name .. "\n" .. distance .. " M"
                esp.Label.Font = "Arial"
                esp.Label.FontSize = "Size18"
                esp.Label.TextScaled = true
            elseif string.find(target.Name, "Fruit") and DevilFruitESP then
                enabled = true
                local distance = "N/A"
                pcall(function()
                    distance = esp.DistanceFunc()
                end)
                labelText = target.Name .. "\n" .. distance .. " M"
            elseif (target.Name == "Flower1" or target.Name == "Flower2") and FlowerESP then
                enabled = true
                local distance = "N/A"
                pcall(function()
                    distance = esp.DistanceFunc()
                end)
                labelText = (target.Name == "Flower1" and "Blue Flower" or "Red Flower") .. "\n" .. distance .. " M"
            elseif target.Parent == Workspace["_WorldOrigin"].Locations and IslandESP then
                enabled = true
                local distance = "N/A"
                pcall(function()
                    distance = esp.DistanceFunc()
                end)
                labelText = target.Name .. "\n" .. distance .. " M"
            elseif target.Parent == Workspace.SeaBeasts and SeaBeastsESP then
                enabled = true
                local distance = "N/A"
                pcall(function()
                    distance = esp.DistanceFunc()
                end)
                labelText = target.Name .. "\n" .. distance .. " M"
            end

            esp.Billboard.Enabled = enabled
            if enabled then
                esp.Label.Text = labelText
            end
        end
    end
end

local function ScanTargets()
    for i, v in pairs(game:GetService("Players"):GetChildren()) do
        if v ~= LocalPlayer and v.Character and v.Character:FindFirstChild("Head") then
            if not ESPObjects[v] then
                local Playerpart = v.Character.Head
                local color = Color3.new(0, 0, 255)
                if v.Team and LocalPlayer.Team then
                    color = (v.Team == LocalPlayer.Team) and Color3.new(255, 0, 0) or Color3.new(0, 0, 255)
                end
                CreateESP(v, Playerpart, v.Name, color, function()
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") and v.Character and v.Character:FindFirstChild("Head") then
                        return round((LocalPlayer.Character.Head.Position - v.Character.Head.Position).Magnitude / 3)
                    else
                        return "N/A"
                    end
                end, nil)
            end
        else
            if ESPObjects[v] then
                RemoveESP(v)
            end
        end
    end

    local chestFolder = Workspace:FindFirstChild("ChestModels")
    if chestFolder then
        for _, chest in pairs(chestFolder:GetChildren()) do
            local chestPart = chest.PrimaryPart or chest:FindFirstChild("Base") or chest:FindFirstChild("Root") or chest:FindFirstChildWhichIsA("BasePart")
            if chestPart and not ESPObjects[chest] then
                CreateESP(chest, chestPart, chest.Name, Color3.fromRGB(186, 186, 28), function()
                    if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                        return round((LocalPlayer.Character.Head.Position - chestPart.Position).Magnitude / 3)
                    else
                        return "N/A"
                    end
                end, nil)
            end
        end
    end

    for _, fruit in pairs(Workspace:GetChildren()) do
        if string.find(fruit.Name, "Fruit") and fruit:FindFirstChild("Handle") and not ESPObjects[fruit] then
            CreateESP(fruit, fruit.Handle, fruit.Name, Color3.fromRGB(255, 255, 255), function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                    return round((LocalPlayer.Character.Head.Position - fruit.Handle.Position).Magnitude / 3)
                else
                    return "N/A"
                end
            end, nil)
        end
    end

    for _, flower in pairs(Workspace:GetChildren()) do
        if (flower.Name == "Flower1" or flower.Name == "Flower2") and not ESPObjects[flower] then
            local color = flower.Name == "Flower1" and Color3.fromRGB(0, 0, 255) or Color3.fromRGB(255, 0, 0)
            CreateESP(flower, flower, flower.Name == "Flower1" and "Blue Flower" or "Red Flower", color, function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                    return round((LocalPlayer.Character.Head.Position - flower.Position).Magnitude / 3)
                else
                    return "N/A"
                end
            end, nil)
        end
    end

    for _, island in pairs(Workspace["_WorldOrigin"].Locations:GetChildren()) do
        if island.Name ~= "Sea" and not ESPObjects[island] then
            CreateESP(island, island, island.Name, Color3.fromRGB(67, 186, 28), function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                    return round((LocalPlayer.Character.Head.Position - island.Position).Magnitude / 3)
                else
                    return "N/A"
                end
            end, nil)
        end
    end

    for _, seaBeast in pairs(Workspace.SeaBeasts:GetChildren()) do
        if seaBeast.Name ~= "SeaBeast1" and not ESPObjects[seaBeast] then
            CreateESP(seaBeast, seaBeast, seaBeast.Name, Color3.fromRGB(80, 245, 245), function()
                if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Head") then
                    return round((LocalPlayer.Character.Head.Position - seaBeast.Position).Magnitude / 3)
                else
                    return "N/A"
                end
            end, nil)
        end
    end
end

spawn(function()
    while task.wait(0.1) do
        if ESPPlayer or ChestESP or DevilFruitESP or FlowerESP or IslandESP or SeaBeastsESP then
            ScanTargets()
        end
    end
end)

for _, player in pairs(game.Players:GetPlayers()) do
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            if ESPPlayer then
                task.wait(0.1) 
                if character and character:FindFirstChild("Head") then
                    ScanTargets()
                end
            end
        end)
    end
end

game.Players.PlayerAdded:Connect(function(player)
    if player ~= LocalPlayer then
        player.CharacterAdded:Connect(function(character)
            if ESPPlayer then
                task.wait(0.1) 
                if character and character:FindFirstChild("Head") then
                    ScanTargets() 
                end
            end
        end)
    end
end)

local lastUpdate = 0
RunService.RenderStepped:Connect(function(deltaTime)
    lastUpdate = lastUpdate + deltaTime
    if lastUpdate >= 0.1 then 
        UpdateAllESP()
        lastUpdate = 0
    end
end)

page13:Seperator("ESP\nมองทะลุ")
page13:Toggle("ESP Players\nมองทะลุหาเพลย์เยอร์", _G.ESPPlayer, function(value)
    ESPPlayer = value
end)
page13:Toggle("ESP Chest\nมองทะลุหากล่องสมบัติ", _G.ChestEsp, function(value)
    ChestESP = value
end)
page13:Toggle("ESP Devil Fruit\nมองทะลุหาผลปีศาจ", _G.DevilFruitESP, function(value)
    DevilFruitESP = value
end)
page13:Toggle("ESP Real Fruit\nมองทะลุหาผลไม้จริงๆ", _G.DevilFruitRealESP, function(value)
    DevilFruitRealESP = value
end)
page13:Toggle("ESP Flowers\nมองทะลุหาดอกไม้", _G.FlowerESP, function(value)
    FlowerESP = value
end)
page13:Toggle("ESP Island\nมองทะลุหาเกาะ", _G.IslandESP, function(value)
    IslandESP = value
end)
page13:Toggle("ESP SeaBeasts\nมองทะลุหาสัตว์ทะเล", _G.SeaBeastsESP, function(value)
    SeaBeastsESP = value
end)

spawn(function()
    while task.wait() do
        UpdateAllESP()
    end
end)
page9:Seperator("🏝️")
page9:Toggle("Teleport To MirageIsland\nเทเลพอร์ตไปหาเกาะลับ",  _G.Settings.AutoMirageIsland, function(value)
    _G.Mirage = value
    _G.Settings.Mirage = value
    SaveSettings() 
    _G.AutoMirageIsland = value 
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
    
page9:Toggle("Auto MirageIsland [Hop]\nออโต้เทเลพอร์ตไปหาเกาะลับ [ย้ายเซิฟ]", _G.Settings.MirageHop, function(value)
_G.MirageHop = value
_G.Settings.MirageHop = value
_G.AutoMirageIslandHop = value
end)

spawn(function()
    pcall(function()
        while task.wait() do
            if _G.AutoMirageIsland or _G.Mirage then
                if game:GetService("Workspace").Map:FindFirstChild("MysticIsland") then
                    toTarget(workspace.Map.MysticIsland.PrimaryPart.CFrame * CFrame.new(0, 300, 0))
                else
                    game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "เกาะลับไม่เกิด",Icon = "rbxassetid://16129235054",Duration = 1})
                end
            end
        end
    end)
end)
spawn(function()
while task.wait()do
    if _G.MirageHop and not game.Workspace._WorldOrigin.Locations:FindFirstChild('Mirage Island') then
        Hop()
        game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "MirageIsland Not Spawn\nเกาะลับไม่เกิด",Icon = "rbxassetid://16129235054",Duration = 1})
        game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "HopServer\nย้ายเซิฟ",Icon = "rbxassetid://16129235054",Duration = 5})
    elseif _G.MirageHop and game.Workspace._WorldOrigin.Locations:FindFirstChild('Mirage Island') then
        toTarget(workspace.Map.MysticIsland.PrimaryPart.CFrame * CFrame.new(0, 300, 0))
    end
end
end)

local function round(n)
return math.floor(tonumber(n) + 0.5)
end

Number = math.random(1, 1000000)
function ESPMirageIsland()
pcall(function()
    if _G.ESPMirageIsland then
        for i,v in pairs(game:GetService("Workspace").Map.MysticIsland:GetChildren()) do
            pcall(function()
                if v.Name == 'Center' then
                    if not v:FindFirstChild('EspMirage') then
                        local bill = Instance.new('BillboardGui',v)
                        bill.Name = 'EspMirage'
                        bill.ExtentsOffset = Vector3.new(0, 1, 0)
                        bill.Size = UDim2.new(1,200,1,30)
                        bill.Adornee = v
                        bill.AlwaysOnTop = true
                        local name = Instance.new('TextLabel',bill)
                        name.Font = "GothamBold"
                        name.FontSize = "Size14"
                        name.TextWrapped = true
                        name.Size = UDim2.new(1,0,1,0)
                        name.TextYAlignment = 'Top'
                        name.BackgroundTransparency = 1
                        name.TextStrokeTransparency = 0.5
                        name.TextColor3 = Color3.fromRGB(255, 255, 255)
                        name.Text = ("Mirage Island" ..' \n'.." [ "..round((game:GetService('Players').LocalPlayer.Character.Head.Position - v.Position).Magnitude/3) ..' M'.." ] ")
                    else
                        v.EspMirage.TextLabel.Text = ("Mirage Island" ..' \n'.." [ "..round((game:GetService('Players').LocalPlayer.Character.Head.Position - v.Position).Magnitude/3) ..' M'.." ] ")
                        v.EspMirage.TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
                    end
                end
            end)
        end
    else
        for i,v in pairs(game:GetService("Workspace").Map.MysticIsland:GetChildren()) do
            if v.Name == 'Center' then
                if v:FindFirstChild('EspMirage') then
                    v:FindFirstChild('EspMirage'):Destroy()
                end
            end
        end
    end
end)
end

spawn(function()
    while wait() do 
        if _G.ESPMirageIsland then
            ESPMirageIsland()
        end
    end
end)

page9:Toggle("ESP MirageIsland\nมองทะลุหาเกาะลับ", _G.ESPMirageIsland, function(value)
    _G.ESPMirageIsland = value
    ESPMirageIsland()
end)

page9:Toggle("Teleport To AdvancedFruitDealer\nเทเลพอร์ตไปหาคนขายผลไม้ปีศาจเกาะลับ", _G.TPNPCDF, function(value)
    spawn(function()
        pcall(function()
        while wait() do
            if _G.TPNPCDF then
                if game:GetService("Workspace").NPCs:FindFirstChild("Advanced Fruit Dealer") then
                    toTarget(CFrame.new(game:GetService("Workspace").NPCs["Advanced Fruit Dealer"].HumanoidRootPart.Position))
                    end
                end
            end
        end)
    end)
end)
page9:Toggle("Teleport To Gear\nเทเลพอร์ตไปหาฟันเฟือง", _G.Settings.Auto_Gear, function(value)
    _G.Auto_Gear = value
    _G.Settings.Auto_Gear = value
        SaveSettings() 
    task.spawn(function()
        while task.wait(.01) do
            if _G.Auto_Gear then
                for i,v in pairs(game:GetService("Workspace").Map:FindFirstChild('MysticIsland'):GetChildren()) do
                    if v.Name == "Part" then
                        if v.ClassName == "MeshPart" then
                            toTarget(v.CFrame)
                            v.Transparency = 0
                        end
                    end
                end
            end
        end
    end)
end)
function LockMoon()
local Lighting = game:GetService("Lighting")
local Cam = game.Workspace.CurrentCamera
local CFNew, CFAng = CFrame.new, CFrame.Angles
local asin = math.asin

local Camera = workspace.CurrentCamera
local Player = game.Players.LocalPlayer
local Character = Player.Character
local Root = Character:WaitForChild("HumanoidRootPart")
local Neck = Character:FindFirstChild("Neck", true)
local YOffset = Neck.C0.Y
game:GetService("RunService").RenderStepped:Connect(function()
if _G.LockMoon then
    game:GetService("ReplicatedStorage").Remotes.CommE:FireServer("ActivateAbility")

    local pos = Vector3.new(0, 0, 0)
    local lookAt = Lighting:GetMoonDirection()
    local cameraCFrame = CFrame.new(pos, lookAt)
    workspace.CurrentCamera.CFrame = cameraCFrame
    local CameraDirection = Root.CFrame:toObjectSpace(cameraCFrame).lookVector.unit
    if Neck and Lock then
        Neck.C0 = CFNew(0, YOffset, 0) * CFAng(0, -asin(CameraDirection.x), 0) * CFAng(asin(CameraDirection.y), 0, 0)
    end
else
    Cam.FieldOfView = 70
end
end)
end

page9:Toggle("LockMoon\nมองพระจันทร์", _G.LockMoon , function(value)
_G.LockMoon = value
LockMoon()
end)
page10:Seperator("🐰")
page10:Toggle("Auto ActiveRaceV3\nออโต้เปิดใช้งานเผ่าวีสาม",_G.AutoActiveRace,function(value)  
    _G.AutoActiveRace = value
        while _G.AutoActiveRace do wait()
            game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.T,false,game)
            game:GetService("VirtualInputManager"):SendKeyEvent(false,Enum.KeyCode.T,false,game)
        end
    end)
page10:Toggle("AutoActiveRaceV4\nออโต้เปิดใช้งานเผ่าวีสี่", _G.AutoActiveRaceV4, function(value)
_G.AutoActiveRaceV4 = value
    while _G.AutoActiveRaceV4 do wait()
        game:GetService("VirtualInputManager"):SendKeyEvent(true,Enum.KeyCode.Y,false,game)
        game:GetService("VirtualInputManager"):SendKeyEvent(false,Enum.KeyCode.Y,false,game)
    end
end)

page10:Button("Teleport To Top Great Tree\nเทเลพอร์ตไปบนต้นไม้ใหญ่", function()
    toTarget(CFrame.new(2947.556884765625, 2281.630615234375, -7213.54931640625))
end)

page10:Button("Teleport To Timple Of Time\nเทเลพอร์ตไปยังที่ทำเผ่าวีสี่", function()
    Game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(28286.35546875,14895.3017578125, 102.62469482421875)
end)

page10:Button("Teleport To Lever Pull\nเทเลพอร์ตไปที่คันโยก", function()
    toTarget(CFrame.new(28575.181640625, 14936.6279296875, 72.31636810302734))
end)

page10:Button("Unlock Lever\nปลดล็อคคันโยก", function()
    if game:GetService("Workspace").Map["Temple of Time"].Lever.Prompt:FindFirstChild("ProximityPrompt") then
        game:GetService("Workspace").Map["Temple of Time"].Lever.Prompt:FindFirstChild("ProximityPrompt"):Remove()
    else
    end
    wait(0.1)
    local ProximityPrompt = Instance.new("ProximityPrompt")
    ProximityPrompt.Parent = game:GetService("Workspace").Map["Temple of Time"].Lever.Prompt
    ProximityPrompt.MaxActivationDistance = 10
    ProximityPrompt.ActionText = "Secrets Beholds Inside"
    ProximityPrompt.ObjectText = "An unknown lever of time"
    function onProximity()
        local part = game:GetService("Workspace").Map["Temple of Time"].MainDoor1
        local TweenService = game:GetService("TweenService")
        local startPosition = part.Position
        local endPosition = startPosition + Vector3.new(0, -50, 0)
        local tweenInfo = TweenInfo.new(10, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local tween = TweenService:Create(part, tweenInfo, {Position = endPosition})
        tween:Play()
        local partnew = game:GetService("Workspace").Map["Temple of Time"].MainDoor2
        local TweenService = game:GetService("TweenService")
        local startPosition = partnew.Position
        local endPosition = startPosition + Vector3.new(0, -50, 0)
        local tweenInfo = TweenInfo.new(10, Enum.EasingStyle.Linear, Enum.EasingDirection.Out)
        local tween = TweenService:Create(partnew, tweenInfo, {Position = endPosition})
        tween:Play()
        local SoundSFX = Instance.new("Sound")
        SoundSFX.Parent = workspace
        SoundSFX.SoundId = "rbxassetid://1904813041"
        SoundSFX:Play()
        SoundSFX.Name = "POwfpxzxzfFfFF"
        game:GetService("Workspace").Map["Temple of Time"].Lever.Prompt:FindFirstChild("ProximityPrompt"):Remove()
        wait(5)
        workspace:FindFirstChild("POwfpxzxzfFfFF"):Remove()
        game:GetService("Workspace").Map["Temple of Time"].NoGlitching:Remove()
        game:GetService("Workspace").Map["Temple of Time"].NoGlitching:Remove()
        game:GetService("Workspace").Map["Temple of Time"].NoGlitching:Remove()
    end
    ProximityPrompt.Triggered:Connect(onProximity)
end)

page10:Button("Teleport To Race Door\nเทเลพอร์ตไปที่ประตูเผ่า", function()
if game:GetService("Players").LocalPlayer.Data.Race.Value == "Cyborg" then
    toTarget(CFrame.new(28492.4140625, 14894.4267578125, -422.1100158691406))
elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Fishman" then
    toTarget(CFrame.new(28224.056640625, 14889.4267578125, -210.5872039794922))
elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Ghoul" then
    toTarget(CFrame.new(28672.720703125, 14889.1279296875, 454.5961608886719))
elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Human" then
    toTarget(CFrame.new(29237.294921875, 14889.4267578125, -206.94955444335938))
elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Mink" then
    toTarget(CFrame.new(29020.66015625, 14889.4267578125, -379.2682800292969))
elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Skypiea" then
    toTarget(CFrame.new(28967.408203125, 14918.0751953125, 234.31198120117188))
    end
end)

page10:Button("Clock Access\nเข้าถึงห้องนาฬิกาได้", function()
    game:GetService("Workspace").Map["Temple of Time"].DoNotEnter:Remove()
    game:GetService("Workspace").Map["Temple of Time"].ClockRoomExit:Remove()
end)

page10:Button("Disabled Inf Stairs\nปิดบันไดอินฟินิตี้", function()
    game.Players.LocalPlayer.Character.InfiniteStairs.Disabled = true
end)

page10:Button("Teleport To Acient One\nเทเลพอร์ตไปที่ลูกแก้วแดง", function()
    toTarget(CFrame.new(28981.552734375, 14888.4267578125, -120.245849609375))
end)

page10:Button("Buy Ancient One Quest\nซื้อเควสลูกแก้ว", function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer('UpgradeRace','Buy')
end)

page10:Toggle("Auto Trail\nออโต้ผ่านด่าน", false, function(value)
    _G.AutoRaceQuest = value
    if value == false then
        toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    pcall(function()
        while wait() do
            if _G.AutoRaceQuest then
                if game:GetService("Players").LocalPlayer.Data.Race.Value == "Human" then
                    for i,v in pairs(game.Workspace.Enemies:GetDescendants()) do
                        if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            pcall(function()
                                repeat task.wait(0.1)
                                    v.Humanoid.Health = 0
                                    v.HumanoidRootPart.CanCollide = false
                                    sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
                                until not _G.AutoRaceQuest or not v.Parent or v.Humanoid.Health <= 0
                            end)
                        end
                    end
                elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Skypiea" then
                    for i,v in pairs(game:GetService("Workspace").Map.SkyTrial.Model:GetDescendants()) do
                        if v.Name ==  "snowisland_Cylinder.081" then
                            toTarget(v.CFrame* CFrame.new(0,0,0))
                        end
                    end
                elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Fishman" then
                    for i,v in pairs(game:GetService("Workspace").SeaBeasts.SeaBeast1:GetDescendants()) do
                        if v.Name ==  "HumanoidRootPart" then
                            toTarget(v.CFrame* Pos)
                            for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                if v:IsA("Tool") then
                                    if v.ToolTip == "Melee" then
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                    end
                                end
                            end
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                if v:IsA("Tool") then
                                    if v.ToolTip == "Blox Fruit" then 
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                    end
                                end
                            end
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    
                            wait(0.5)
                            for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                if v:IsA("Tool") then
                                    if v.ToolTip == "Sword" then 
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                    end
                                end
                            end
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(0.5)
                            for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                                if v:IsA("Tool") then
                                    if v.ToolTip == "Gun" then
                                        game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                                    end
                                end
                            end
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            wait(.2)
                            game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                        end
                    end
                elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Cyborg" then
                    toTarget(CFrame.new(28654, 14898.7832, -30, 1, 0, 0, 0, 1, 0, 0, 0, 1))
                elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Ghoul" then
                    for i,v in pairs(game.Workspace.Enemies:GetDescendants()) do
                        if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                            pcall(function()
                                repeat wait(.1)
                                    v.Humanoid.Health = 0
                                    v.HumanoidRootPart.CanCollide = false
                                    sethiddenproperty(game.Players.LocalPlayer, "SimulationRadius", math.huge)
                                until not _G.AutoRaceQuest or not v.Parent or v.Humanoid.Health <= 0
                            end)
                        end
                    end
                elseif game:GetService("Players").LocalPlayer.Data.Race.Value == "Mink" then
                    for i,v in pairs(game:GetService("Workspace"):GetDescendants()) do
                        if v.Name == "StartPoint" then
                            toTarget(v.CFrame* CFrame.new(0,10,0))
                            end
                    end
                end
            end
        end
    end)
end)
        
page10:Toggle("Auto Buy Gear\nออโต้ซื้อเกียร์", false, function(value)
    _G.Bg = value
end)
spawn(function()
    pcall(function()
        while wait(0.1) do
            if _G.Bg then
                local args = {
                [1] = true
                }
                local args = {
                    [1] = "UpgradeRace",
                    [2] = "Buy"
                }
                game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer(unpack(args))
            end
        end 
    end)  
end)

page10:Toggle("Auto Ancient One Quest\nออโต้เควสลูกแก้ว", false, function(value)
    _G.AutoTranFrom = value
    _G.AutoAncientOneQuest = value
end)
spawn(function()
    pcall(function()
        while wait() do
            if _G.AutoTranFrom then
                if game.Players.LocalPlayer.Character.RaceTransformed.Value == true then
                    _G.AutoAncientOneQuest = false
                    ATween(CFrame.new(216.211181640625, 126.9352035522461, -12599.0732421875))
                end
            end
        end
    end)
end)
spawn(function()
    while wait() do 
        if _G.AutoAncientOneQuest then
            pcall(function()
                if game:GetService("Workspace").Enemies:FindFirstChild("Cocoa Warrior") or game:GetService("Workspace").Enemies:FindFirstChild("Chocolate Bar Battler") or game:GetService("Workspace").Enemies:FindFirstChild("Sweet Thief") or game:GetService("Workspace").Enemies:FindFirstChild("Candy Rebel") then
                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Cocoa Warrior" or v.Name == "Chocolate Bar Battler" or v.Name == "Sweet Thief" or v.Name == "Candy Rebel" then
                            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and v.Humanoid.Health > 0 then
                                repeat task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                    v.HumanoidRootPart.CanCollide = false
                                    v.Humanoid.WalkSpeed = 0
                                    v.Head.CanCollide = false 
                                    BringMob = true
                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm)
                                    game:GetService("VirtualUser"):CaptureController()
                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                until not _G.AutoAncientOneQuest or not v.Parent or v.Humanoid.Health <= 0
                            end
                        end
                    end
                else
                    BringMob = false
                    toTarget(CFrame.new(216.211181640625, 126.9352035522461, -12599.0732421875))
                    for i,v in pairs(game:GetService("ReplicatedStorage"):GetChildren()) do 
                        if v.Name == "Cocoa Warrior" then
                            toTarget(v.HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        elseif v.Name == "Chocolate Bar Battler" then
                            toTarget(v.HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        elseif v.Name == "Sweet Thief" then
                            toTarget(v.HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        elseif v.Name == "Candy Rebel" then
                            toTarget(v.HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        end
                    end
                end
            end)
        end
    end
end)
spawn(function()
    pcall(function()
        while wait() do
            if _G.AutoTranFrom then
                if game.Players.LocalPlayer.Character.RaceTransformed.Value == false then
                    _G.AutoAncientOneQuest = true
                end
            end
        end
    end)
end)
spawn(function()
    while wait() do
        pcall(function()
            if _G.AutoTranFrom then
                game:GetService("VirtualInputManager"):SendKeyEvent(true,"Y",false,game)
                wait(0.1)
                game:GetService("VirtualInputManager"):SendKeyEvent(false,"Y",false,game)
            end
        end)
    end
end)

page10:Toggle("Auto Kill Player On Trail\nออโต้ฆ่าเพลย์เยอร์", false, function(value)
    _G.AutokillP = value
end)
spawn(function()
    while wait() do
        if _G.AutokillP then
            for i,v in pairs(game:GetService("Workspace").Characters:GetChildren()) do
                if v.Name and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude <= 100 then
                    if v.Humanoid.Health > 0 then
                        repeat wait()
                            EquipWeapon(_G.SelectWeapon)
                            toTarget(v.HumanoidRootPart.CFrame * CFrame.new(0,0,5))
                            _G.Useskill = true
                            v.HumanoidRootPart.CanCollide = false
                            v.HumanoidRootPart.Size = Vector3.new(60, 60, 60)
                        until not _G.AutokillP or not v.Parent or v.Humanoid.Health <= 0 
                        _G.Useskill = false
                    end
                end
            end
        end
    end
end)

page10:Button("Teleport To Area PVP\nเทเลพอร์ตไปที่ต่อสู้", function()
    toTarget(CFrame.new(28766.681640625, 14967.1455078125, -164.13290405273438))
end)
page10:Button("Teleport To Area Safe\nเทเลพอร์ตออกจากที่ต่อสู้", function()
    toTarget(CFrame.new(28273.0859375, 14896.5078125, 157.42063903808594))
end)
page14:Seperator("🌊")
page14:Toggle("Teleport to Kisune Island\nเทเลพอร์ตไปหาเกาะจิ้งจอก", _G.TptoKisuneIsland, function(value)
    _G.TptoKisuneIsland = value
    spawn(function()
        while task.wait() do
            if _G.TptoKisuneIsland then
                local k = toTarget(game.workspace.Map.KitsuneIsland.ShrineActive.WorldPivot * CFrame.new(0,0,20))
            else
                k:Stop()
            end
        end
    end)
end)
        
page14:Toggle("Auto Collect Spirit Fire\nออโต้เก็บลูกไฟวิญญาณ", _G.Ez, function(value)
    _G.Ez = value
    spawn(function()
        while _G.Ez do wait()
            pcall(function()
                if workspace:FindFirstChild("EmberTemplate") then
                    game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.EmberTemplate.Part.CFrame
                end
            end)
        end
    end)
end)

page14:Seperator("FarmSea/ฟาร์มทะเล")

function CheckPirateBoat()
    local checkmmpb = {"PirateGrandBrigade", "PirateBrigade"}
    for r, v in next, game:GetService("Workspace").Enemies:GetChildren() do
        if table.find(checkmmpb, v.Name) and v:FindFirstChild("Health") and v.Health.Value > 0 then
            return v
        end
    end
end

function CheckPirateBoat()
    local checkmmpb = {"FishBoat"}
    for r, v in next, game:GetService("Workspace").Enemies:GetChildren() do
        if table.find(checkmmpb, v.Name) and v:FindFirstChild("Health") and v.Health.Value > 0 then
            return v
        end
    end
end

local checkteam = game:GetService("Players").LocalPlayer.Team
local AllBoat = (checkteam == game.Teams["Marines"] and {"Dinghy", "MarineSloop", "MarineBrigade", "MarineGrandBrigade"}) or {"Dinghy", "PirateSloop", "PirateBrigade", "PirateGrandBrigade"}

local SelectBoat = "MarineGrandBrigade"
page14:Dropdown("เลือกเรือ", AllBoat, function(value)
    SelectBoat = value
    print("Selected boat:", SelectBoat)
end)

local activeTweens = {}
    
page14:Toggle("Auto Find Island Kitsune,Mirage,Volcano\nออโต้หา เกาะลับ,เกาะจิ้งจอก,เกาะภูเขาไฟ", false, function(value)
    _G.AutoFindIsland = value
    _G.Nocliprock = value
    if value == false then
        for _, Tween in pairs(activeTweens) do
            if Tween then Tween:Cancel() end
        end
        activeTweens = {}
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)

spawn(function()
    while wait() do
        if _G.AutoFindIsland and SelectBoat then
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                local boat = game:GetService("Workspace").Boats:FindFirstChild(SelectBoat)
                if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
                    if not game.Workspace._WorldOrigin.Locations:FindFirstChild('Prehistoric Island') or game.Workspace._WorldOrigin.Locations:FindFirstChild('Mirage Island')  or  game.Workspace._WorldOrigin.Locations:FindFirstChild('Kitsune Island') then
                        if not boat or (boat and boat.Owner.Value.Name ~= player.Name) then
                            local buyPos = CFrame.new(-16927.451171875, 9.0863618850708, 433.8642883300781)
                            local buyTween = toTarget(buyPos)
                            if (buyPos.Position - character.HumanoidRootPart.Position).Magnitude <= 10 then
                                if buyTween then buyTween:Stop() end
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBoat", SelectBoat)
                            end
                        elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == false then
                            local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                            if vehicleSeat then
                                toTarget(vehicleSeat.CFrame * CFrame.new(0, 1, 0))
                            end
                        elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == true then
                            local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                            if vehicleSeat then
                                local positions = {CFrame.new(-17040.4434, 12.794693, 506.96225, -0.20991233, 2.76917067e-08, 0.977720201, -1.39848533e-08, 1, -3.13252215e-08, -0.977720201, -2.02488231e-08, -0.20991233) * CFrame.new(0, 0, -9999999),CFrame.new(-17040.4434, 12.794693, 506.96225, -0.20991233, 2.76917067e-08, 0.977720201, -1.39848533e-08, 1, -3.13252215e-08, -0.977720201, -2.02488231e-08, -0.20991233) * CFrame.new(0, 0, -999999)}
                                for i, pos in ipairs(positions) do
                                    if not _G.AutoFindIsland then break end
                                    if game.Workspace._WorldOrigin.Locations:FindFirstChild('PrehistoricIsland') or game.Workspace._WorldOrigin.Locations:FindFirstChild('Mirage Island') or game.Workspace._WorldOrigin.Locations:FindFirstChild('Kitsune Island') then  if game.Workspace._WorldOrigin.Locations:FindFirstChild('PrehistoricIsland') then Vec("<Color=Cyan>Found Vocalno Island\nเจอเกาะภูเขาไฟ<Color=/>") end  if game.Workspace._WorldOrigin.Locations:FindFirstChild('Mirage Island') then Vec("<Color=Cyan>Found Mirage Island\nเจอเกาะลับ<Color=/>") end if  game.Workspace._WorldOrigin.Locations:FindFirstChild('Kitsune Island') then Vec("<Color=Cyan>Found KitsuneIsland\nเจอเกาะจิ้งจอก<Color=/>") end break end
                                    local distance = (vehicleSeat.Position - pos.Position).Magnitude
                                    if distance > 10 then
                                        local boatTween = TPB(pos, vehicleSeat)
                                        repeat wait() until (vehicleSeat.Position - pos.Position).Magnitude <= 10 or not _G.AutoFindIsland
                                        if boatTween then boatTween:Stop() end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
end)
page14:Toggle("Auto Sea Beast\nออโต้ตีเจ้าทะเล", false, function(value)
    _G.AutoSeabestFarm = value
    _G.Nocliprock = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
local activeTweens = {}
page14:Toggle("Auto Farm Sea Event\nออโต้ฟาร์มอีเว้นทะเล", false, function(value)
    _G.farmseaevent = value
    _G.Nocliprock = value
    _G.WalkWater = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
    
spawn(function()
    while wait() do
        if _G.farmseaevent and SelectBoat then
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                local boat = game:GetService("Workspace").Boats:FindFirstChild(SelectBoat)
                if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
                    if not (game:GetService("Workspace").Enemies:FindFirstChild("Shark") or game:GetService("Workspace").Enemies:FindFirstChild("Terrorshark") or game:GetService("Workspace").Enemies:FindFirstChild("Piranha") or game:GetService("Workspace").Enemies:FindFirstChild("Fish Crew Member")) then
                        if not boat or (boat and boat.Owner.Value.Name ~= player.Name) then
                            local buyPos = CFrame.new(-16927.451171875, 9.0863618850708, 433.8642883300781)
                            local buyTween = toTarget(buyPos)
                            if (buyPos.Position - character.HumanoidRootPart.Position).Magnitude <= 10 then
                                if buyTween then buyTween:Stop() end
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBoat", SelectBoat)
                            end
                        elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == false then
                            local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                            if vehicleSeat then
                                toTarget(vehicleSeat.CFrame * CFrame.new(0, 1, 0))
                            end
                        elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == true then
                            local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                            if vehicleSeat then
                                local positions = {CFrame.new(-45155.0977, 4.18204355, -600.933838, 0.083763659, -1.6566848e-05, 0.996485651, 0.000178978109, 0.99999994, 1.58051898e-06, -0.996485591, 0.000178216738, 0.0837636515),CFrame.new(-42250.2227, -0.3221744, 9247.07715, -0.45916447, 6.39043236e-08, 0.888351262, -3.36711423e-08, 1, -8.93395651e-08, -0.888351262, -7.09333605e-08, -0.45916447)}
                                for i, pos in ipairs(positions) do
                                    if not _G.farmseaevent then break end
                                    local distance = (vehicleSeat.Position - pos.Position).Magnitude
                                    if distance > 10 then
                                        local boatTween = TPB(pos, vehicleSeat)
                                        repeat wait() until (vehicleSeat.Position - pos.Position).Magnitude <= 10 or not _G.farmseaevent
                                        if boatTween then boatTween:Stop() end
                                    end
                                end
                            end
                        end
                    end
                end
            end)
        end
    end
end)

spawn(function()
    pcall(function()
        while wait() do
            if _G.farmseaevent then
                if game:GetService("Workspace").Enemies:FindFirstChild("Shark") or game:GetService("Workspace").Enemies:FindFirstChild("Terrorshark") or game:GetService("Workspace").Enemies:FindFirstChild("Piranha") or game:GetService("Workspace").Enemies:FindFirstChild("Fish Crew Member") then
                    game.Players.LocalPlayer.Character.Humanoid.Sit = false
                end
            end
        end
    end)
end)

page14:Toggle("BuyBoat\nซื้อเรือ", false, function(value)
    _G.BuyBoat = value
end)
spawn(function()
    while wait() do
        if _G.BuyBoat and SelectBoat then
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                local boat = game:GetService("Workspace").Boats:FindFirstChild(SelectBoat)
                if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
                    if not boat or (boat and boat.Owner.Value.Name ~= player.Name) then
                        local buyPos = CFrame.new(-16927.451171875, 9.0863618850708, 433.8642883300781)
                        local buyTween = toTarget(buyPos)
                        if (buyPos.Position - character.HumanoidRootPart.Position).Magnitude <= 10 then
                            if buyTween then buyTween:Stop() end
                            game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBoat", SelectBoat)
                        end
                    elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == false then
                        local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                        if vehicleSeat then
                            toTarget(vehicleSeat.CFrame * CFrame.new(0, 1, 0))
                        end
                    end
                end
            end)
        end
    end
end)

page14:Seperator("EnemiesSelect/เลือกศัตรู")
page14:Toggle("Terror Shark\nบอสฉลาม", false, function(value)
    _G.AutoTerrorshark = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    while wait() do
        if  _G.AutoTerrorshark  then
            pcall(function()
                if game:GetService("Workspace").Enemies:FindFirstChild("Terrorshark") then
                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Terrorshark" then
                            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 200 and v.Humanoid.Health > 0 then
                                _G.ncp = true
                                repeat task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm) 
                                    game:GetService("VirtualUser"):CaptureController()
                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                until not  _G.AutoTerrorshark or not v.Parent or v.Humanoid.Health <= 0
                                if v:FindFirstChild("Humanoid") and v.Humanoid.Value <= 0 then
                                    v:Destroy()
                                    _G.ncp = false
                                end
                            end
                        end
                    end
                else
                    if game:GetService("ReplicatedStorage"):FindFirstChild("Terrorshark") then
                        toTarget(game:GetService("ReplicatedStorage"):FindFirstChild("Terrorshark").HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        _G.ncp = true
                    else
                        _G.ncp = false
                        if  _G.AutoTerrorsharkhop then
                            Hop()
                        end
                    end
                end
            end)
        end
    end
end)

page14:Toggle("Shark\nฉลาม", false, function(value)
    FarmShark = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    while wait() do
        if  FarmShark and World3 then
            pcall(function()
                if game:GetService("Workspace").Enemies:FindFirstChild("Shark") then
                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Shark" then
                            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 200 and v.Humanoid.Health > 0 then
                                _G.ncp = true
                                repeat task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm) 
                                    game:GetService("VirtualUser"):CaptureController()
                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                until not  FarmShark or not v.Parent or v.Humanoid.Health <= 0
                                if v:FindFirstChild("Humanoid") and v.Humanoid.Value <= 0 then
                                    v:Destroy()
                                    _G.ncp = false
                                end
                            end
                        end
                    end
                else
                    if game:GetService("ReplicatedStorage"):FindFirstChild("Terrorshark") then
                        toTarget(game:GetService("ReplicatedStorage"):FindFirstChild("Terrorshark").HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        _G.ncp = true
                    else
                        _G.ncp = false
                        if  _G.AutoTerrorsharkhop then
                            Hop()
                        end
                    end
                end
            end)
        end
    end
end)

page14:Toggle("Piranha\nปิรันย่า", false, function(value)
    _G.farmpiranya = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    while wait() do
        if  _G.farmpiranya  then
            pcall(function()
                if game:GetService("Workspace").Enemies:FindFirstChild("Piranha") then
                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Piranha" then
                            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 200 and v.Humanoid.Health > 0 then
                                _G.ncp = true
                                repeat task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm) 
                                    game:GetService("VirtualUser"):CaptureController()
                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                until not  _G.farmpiranya or not v.Parent or v.Humanoid.Health <= 0
                                if v:FindFirstChild("Humanoid") and v.Humanoid.Value <= 0 then
                                    v:Destroy()
                                    _G.ncp = false
                                end
                            end
                        end
                    end
                else
                    if game:GetService("ReplicatedStorage"):FindFirstChild("Piranha") then
                        toTarget(game:GetService("ReplicatedStorage"):FindFirstChild("Piranha").HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        _G.ncp = true
                    else
                        _G.ncp = false
                        if  _G.AutoTerrorsharkhop then
                            Hop()
                        end
                    end
                end
            end)
        end
    end
end)

page14:Toggle("Fish Crew Member\nสมาชิกลูกเรือมนุษย์เงือก", false, function(value)
    _G.Fish_Crew_Member = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    while wait() do
        if  _G.Fish_Crew_Member and World3 then
            pcall(function()
                if game:GetService("Workspace").Enemies:FindFirstChild("Fish Crew Member") then
                    for i,v in pairs(game:GetService("Workspace").Enemies:GetChildren()) do
                        if v.Name == "Fish Crew Member" then
                            if v:FindFirstChild("Humanoid") and v:FindFirstChild("HumanoidRootPart") and (v.HumanoidRootPart.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).magnitude <= 200 and v.Humanoid.Health > 0 then
                                _G.ncp = true
                                repeat task.wait()
                                    EquipWeapon(_G.SelectWeapon)
                                    toTarget(v.HumanoidRootPart.CFrame * MethodFarm) 
                                    game:GetService("VirtualUser"):CaptureController()
                                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                                until not  _G.Fish_Crew_Member or not v.Parent or v.Humanoid.Health <= 0
                                if v:FindFirstChild("Humanoid") and v.Humanoid.Value <= 0 then
                                    v:Destroy()
                                    _G.ncp = false
                                end
                            end
                        end
                    end
                else
                    if game:GetService("ReplicatedStorage"):FindFirstChild("Fish Crew Member") then
                        toTarget(game:GetService("ReplicatedStorage"):FindFirstChild("Fish Crew Member").HumanoidRootPart.CFrame * CFrame.new(2,20,2))
                        _G.ncp = true
                    else
                        _G.ncp = false
                        if  _G.AutoTerrorsharkhop then
                            Hop()
                        end
                    end
                end
            end)
        end
    end
end)

page14:Toggle("Raid Ship\nลูกเรือ", false, function(value)
    _G.KillGhostShip = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    while wait() do
        if _G.KillGhostShip then
            pcall(function()
                if CheckPirateBoat() then
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,32,false,game)
                    wait(.5)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,32,false,game)
                    local v = CheckPirateBoat()
                    repeat
                        wait()
                        spawn(toTarget(v.Engine.CFrame * CFrame.new(0, -20, 0)), 1)
                        AimBotSkillPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -5, 0)
                        _G.ncp = true
                        Skillaimbot = true
                        _G.Useskill = false
                    until not v or not v.Parent or v.Health.Value <= 0 or not CheckPirateBoat()
                    Skillaimbot = true
                    _G.Useskill = false
                    _G.ncp = false
                end
            end)
        end
    end
end)

page14:Toggle("Ghost Ship\nเรือผี", false, function(value)
    _G.bjirFishBoat = value
    if value == false then
        toTarget(game:GetService("Players").LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)
spawn(function()
    while wait() do
        pcall(function()
            if _G.bjirFishBoat then
                if CheckPirateBoat() then
                    game:GetService("VirtualInputManager"):SendKeyEvent(true, 32, false, game)
                    wait(0.5)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false, 32, false, game)
                    local v = CheckPirateBoat()
                    repeat
                        wait()
                        spawn(toTarget(v.Engine.CFrame * CFrame.new(0, -20, 0), 1))
                        _G.ncp = true
                        _G.Useskill = true
                        Skillaimbot = true
                        AimBotSkillPosition = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame * CFrame.new(0, -5, 0)
                    until v.Parent or v.Health.Value <= 0 or not CheckPirateBoat()
                    _G.Useskill = false
                    _G.ncp = false
                    Skillaimbot = false
                end
            end
        end)
    end
end)   
spawn(function()
    while wait() do
        if _G.bjirFishBoat then
               pcall(function()
                if CheckPirateBoat() then
                    game:GetService("VirtualUser"):CaptureController()
                    game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        if v:IsA("Tool") then
                            if v.ToolTip == "Melee" then
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                            end
                        end
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,"C",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        if v:IsA("Tool") then
                            if v.ToolTip == "Blox Fruit" then
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                            end
                        end
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,"V",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,"V",false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(0.6)
                    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        if v:IsA("Tool") then
                            if v.ToolTip == "Sword" then
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                            end
                        end
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(0.5)
                    for i,v in pairs(game.Players.LocalPlayer.Backpack:GetChildren()) do
                        if v:IsA("Tool") then
                            if v.ToolTip == "Gun" then 
                                game.Players.LocalPlayer.Character.Humanoid:EquipTool(v)
                            end
                        end
                    end
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,122,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,120,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    wait(.2)
                    game:GetService("VirtualInputManager"):SendKeyEvent(true,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                    game:GetService("VirtualInputManager"):SendKeyEvent(false,99,false,game.Players.LocalPlayer.Character.HumanoidRootPart)
                end
            end)
        end
    end
end)


local gg = getrawmetatable(game)
local old = gg.__namecall
setreadonly(gg,false)
gg.__namecall = newcclosure(function(...)
	local method = getnamecallmethod()
	local args = {...}
	if tostring(method) == "FireServer" then
		if tostring(args[1]) == "RemoteEvent" then
			if tostring(args[2]) ~= "true" and tostring(args[2]) ~= "false" then
				if Skillaimbot then
					args[2] = AimBotSkillPosition
					return old(unpack(args))
				end
			end
		end
	end
	return old(...)
end)

spawn(function()
    while wait() do
        if _G.AutoSeabestFarm and SelectBoat then
            pcall(function()
                local player = game.Players.LocalPlayer
                local character = player.Character
                local boat = game:GetService("Workspace").Boats:FindFirstChild(SelectBoat)
                if character and character:FindFirstChild("Humanoid") and character:FindFirstChild("HumanoidRootPart") then
                    if not game:GetService("Workspace").SeaBeasts:FindFirstChild("SeaBeast") or game:GetService("Workspace").SeaBeasts:FindFirstChild("SeaBeast1") then 
                        if not boat or (boat and boat.Owner.Value.Name ~= player.Name) then
                            local buyPos = CFrame.new(-16927.451171875, 9.0863618850708, 433.8642883300781)
                            local buyTween = toTarget(buyPos)
                            if (buyPos.Position - character.HumanoidRootPart.Position).Magnitude <= 10 then
                                if buyTween then buyTween:Stop() end
                                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBoat", SelectBoat)
                            end
                        elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == false then
                            local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                            if vehicleSeat then
                                toTarget(vehicleSeat.CFrame * CFrame.new(0, 1, 0))
                            end
                        elseif boat and boat.Owner.Value.Name == player.Name and character.Humanoid.Sit == true then
                            local vehicleSeat = boat:FindFirstChild("VehicleSeat", true)
                            if vehicleSeat then
                                local positions = {CFrame.new(-45155.0977, 4.18204355, -600.933838, 0.083763659, -1.6566848e-05, 0.996485651, 0.000178978109, 0.99999994, 1.58051898e-06, -0.996485591, 0.000178216738, 0.0837636515),CFrame.new(-42250.2227, -0.3221744, 9247.07715, -0.45916447, 6.39043236e-08, 0.888351262, -3.36711423e-08, 1, -8.93395651e-08, -0.888351262, -7.09333605e-08, -0.45916447)}
                                for i, pos in ipairs(positions) do
                                    if not _G.AutoSeabestFarm then break end
                                    local distance = (vehicleSeat.Position - pos.Position).Magnitude
                                    if distance > 10 then
                                        local boatTween = TPB(pos, vehicleSeat)
                                        repeat wait() until (vehicleSeat.Position - pos.Position).Magnitude <= 10 or not _G.AutoSeabestFarm
                                        if boatTween then boatTween:Stop() end
                                    end
                                end
                            end
                        end
                    else
                        for i,v in pairs(game:GetService("Workspace").SeaBeasts:GetChildren()) do
                            if v:FindFirstChild("HumanoidRootPart") then
                                repeat wait()
                                game.Players.LocalPlayer.Character:WaitForChild("Humanoid").Sit = false
                                toTarget(v.HumanoidRootPart.CFrame * CFrame.new(0,500,0))
                                    EquipAllWeapon()  
                                    _G.Useskill = true
                                    _G.ncp = true
                                    AimBotSkillPosition = v.HumanoidRootPart
                                    Skillaimbot = true
                                until not v:FindFirstChild("HumanoidRootPart") or _G.AutoSeabestFarm == false
                                _G.Useskill = false
                                _G.ncp = false
                                Skillaimbot = false
                            end
                        end
                    end
                end
            end)
        end
    end
end)

page14:Toggle("Teleport To Sea Beast\nเทเลพอร์ตไปหาเจ้าทะเล", false, function(value)
    _G.AutoSeaBest = value
end)
spawn(function()
    while wait() do
        if _G.AutoSeaBest then
            pcall(function()
                for i,v in pairs(game:GetService("Workspace").SeaBeasts:GetChildren()) do
                    if v:FindFirstChild("HumanoidRootPart") then
                        _G.ncp = true
                        EquipWeapon(_G.SelectWeapon)
                        toTarget(v.HumanoidRootPart.CFrame * CFrame.new(0,300,0))
                        game:GetService("VirtualUser"):CaptureController()
                        game:GetService("VirtualUser"):Button1Down(Vector2.new(1280,672))
                    else
                        _G.ncp = false
                        if _G.AutoSeaBestHop then
                            Hop()
                        end
                    end
                end
            end)
        end
    end
end)
page14:Seperator("BoatModify/เรือแต่ง")

page14:Toggle("IncreaseBoatSpeed\nเพิ่มความเร็วเรือ",_G.increaseboatspeed, function(value)
_G.increaseboatspeed = value
    local vehicleSeats = {}
    for i, v in pairs(game.Workspace.Boats:GetDescendants()) do
        if v:IsA("VehicleSeat") then
            table.insert(vehicleSeats, v)
        end
    end
    if _G.increaseboatspeed then
        for _, v in pairs(vehicleSeats) do
            v.MaxSpeed = 350
        end
    else
        for _, v in pairs(vehicleSeats) do
            v.MaxSpeed = 100
        end
    end
end)

page14:Toggle("Boat NoclipRock\nเรือทะลุหิน", _G.Nocliprock, function(value)
    _G.Nocliprock = value
end)

spawn(function()
    while wait() do
        if _G.Nocliprock then
            if game.Players.LocalPlayer.Character.Humanoid.Sit == true then
                for _, v in pairs(game.Workspace.Boats:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide == true then
                        v.CanCollide = false
                    end
                end
                for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide == true then
                        v.CanCollide = false
                    end
                end
            elseif game.Players.LocalPlayer.Character.Humanoid.Sit == false then
                for _, v in pairs(game.Workspace.Boats:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide == false then
                        v.CanCollide = true
                    end
                end
                for _, v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
                    if v:IsA("BasePart") and v.CanCollide == false then
                        v.CanCollide = true
                    end
                end
            end
        end
    end
end)
page14:Seperator("OtherBoat/อื่นๆเกี่ยวกับเรือ")
Seatable = {"Sea1[Low]","Sea2[Medium]","Sea3[High]","Sea4[Extreme]","Sea5[Crazy]","Sea6[???]"}
page14:Dropdown("Select Level Sea\nเลือกระดับทะเล",   Seatable , function(value)
    _G.SelectLocalTeleportSea = value
end)

page14:Toggle("Teleport To Select Sea\nเทเลพอร์ตไปยังทะเลที่เลือก", _G.TeleportSea, function(value)
    _G.TeleportSea = value
end)
spawn(function()
    while task.wait() do
        if _G.TeleportSea then
            if SelectBoat then
                local Boat = game.Workspace.Boats[SelectBoat]
                repeat wait()
                if _G.SelectLocalTeleportSea == "Sea1[Low]" then
                    tweenModel(Boat, CFrame.new(-22526.0098, -0.3221744, 1716.89185, -0.210707203, 1.100981e-07, 0.977549195, 2.74631451e-09, 1, -1.12034698e-07, -0.977549195, -2.09218598e-08, -0.210707203))
                elseif _G.SelectLocalTeleportSea == "Sea2[Medium]" then
                    tweenModel(Boat, CFrame.new(-25645.3535, -0.3221744, 2554.41016, -0.334876329, -5.05522451e-08, 0.942262113, -3.13346469e-08, 1, 4.25136619e-08, -0.942262113, -1.52886308e-08, -0.334876329))
                elseif _G.SelectLocalTeleportSea == "Sea3[High]" then
                    tweenModel(Boat, CFrame.new(-29842.2227, -0.3221744, 4070.85767, -0.270609587, 3.60968606e-08, 0.962689161, -4.47193429e-08, 1, -5.00663617e-08, -0.962689161, -5.65992657e-08, -0.270609587))
                elseif _G.SelectLocalTeleportSea == "Sea4[Extreme]" then
                    tweenModel(Boat, CFrame.new(-32654.7188, -0.3221744, 4788.14697, -0.183276221, 2.0033232e-08, 0.983061433, 3.66669433e-08, 1, -1.35424418e-08, -0.983061433, 3.35638504e-08, -0.183276221))
                elseif _G.SelectLocalTeleportSea == "Sea5[Crazy]" then
                    tweenModel(Boat, CFrame.new(-37813.6953, -0.3221744, 6105.16895, -0.252362996, 4.13621581e-09, 0.967632651, 2.87320709e-08, 1, 3.21888249e-09, -0.967632651, 2.86144175e-08, -0.252362996))
                elseif _G.SelectLocalTeleportSea == "Sea6[???]" then
                    tweenModel(Boat, CFrame.new(-42250.2227, -0.3221744, 9247.07715, -0.45916447, 6.39043236e-08, 0.888351262, -3.36711423e-08, 1, -8.93395651e-08, -0.888351262, -7.09333605e-08, -0.45916447))
                    end
                until not _G.TeleportSea
            else
                Vec("<Color=Cyan>SelectBoat เลือกเรือ<Color=/>")
            end
        end
    end
end)
BoatsName = {}
for i,v in pairs(game:GetService("Workspace").Boats:GetChildren()) do  
    table.insert(BoatsName ,v.Name)
end

local Boats = page14:Dropdown("Select Boats Target\nเลือกเรือที่ต้องการ", BoatsName, function(value)
    _G.SelectB = value
end)

page14:Button("Refresh Boats List\nรีเฟรชรายชื่อเรือ", function()
    BoatsName = {}
    Boats:Clear()
    for i,v in pairs(game:GetService("Workspace").Boats:GetChildren()) do  
       Boats:Add(v.Name)
    end
end)

page14:Toggle("Teleport To Selected Boats\nเทเลพอร์ตไปยังเรือที่เลือก", false, function(value)
    _G.TPB = bool       
    StopTween(_G.TPB)
    if _G.TPB then
        _G.Boats = true
        while _G.Boats do wait()
            Distance = (game:GetService("Workspace").Boats[_G.SelectB].VehicleSeat.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            Speed = 220
            tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(Distance/Speed, Enum.EasingStyle.Linear)
            tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = game:GetService("Workspace").Boats[_G.SelectB].VehicleSeat.CFrame})
            tween:Play()
            _G.ncp = true
            wait(Distance/Speed)
        end
    elseif _G.TPB == false then
        _G.Boats = false
        while _G.Boats do wait()
            Distance = (game:GetService("Workspace").Boats[_G.SelectB].VehicleSeat.Position - game.Players.LocalPlayer.Character.HumanoidRootPart.Position).Magnitude
            Speed = 220
            tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(Distance/Speed, Enum.EasingStyle.Linear)
            tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = game:GetService("Workspace").Boats[_G.SelectB].VehicleSeat.CFrame})
            tween:Play()
            _G.ncp = true
            wait(Distance/Speed)
        end
        tweenService, tweenInfo = game:GetService("TweenService"), TweenInfo.new(.1, Enum.EasingStyle.Linear)
        tween = tweenService:Create(game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart, tweenInfo, {CFrame = game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame})
        tween:Play()
        _G.ncp = false
    end
end)

page14:Toggle("Spectate Selected Boats\nแอบส่องเรือที่เลือก", false, function(value)
    Sp = value
end)
spawn(function()
    while task.wait() do
        if Sp then
            local plr1 = game.Players.LocalPlayer.Character.Humanoid
            local plr2 = game:GetService("Workspace").Boats:FindFirstChild(_G.SelectB)
                repeat wait(.1)
                    game.Workspace.Camera.CameraSubject = game:GetService("Workspace").Boats[_G.SelectB].VehicleSeat
                until Sp == false 
            game.Workspace.Camera.CameraSubject = game.Players.LocalPlayer.Character.Humanoid
        end
    end
end)
page14:Button("Bring Selected Boats\nดึงเรือที่เลือกมา", function()
    game:GetService("Players")["LocalPlayer"].Character.HumanoidRootPart.CFrame = game:GetService("Workspace").Boats[_G.SelectB].VehicleSeat.CFrame
end)
page16:Seperator("Dojo Quest\nเควสของโดโช")
page16:Toggle("Teleport To Dojo\nเทเลพอร์ตไปที่โดโจ",_G.ToDojo, function(value)
    _G.ToDojo = value
    if value == false then
        toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)

local positionD = CFrame.new(5866.51807, 1208.25879, 870.250183, -0.436460555, 8.8910447e-08, -0.899723411, -1.03497895e-08, 1, 1.03840499e-07, 0.899723411, 5.46342278e-08, -0.436460555)
spawn(function()
    while task.wait() do
        if _G.ToDojo then
            toTarget(positionD)
        end
    end
end)
page16:Toggle("CheckProgessQuest\nเช็คว่าเควสสำเร็จรึยัง",_G.FinishQ, function(value)
    _G.FinishQ = value
end)
spawn(function()
    while task.wait(.1) do
            if _G.FinishQ then
                repeat task.wait(.1)
                game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame =  CFrame.new(5866.51807, 1208.25879, 870.250183, -0.436460555, 8.8910447e-08, -0.899723411, -1.03497895e-08, 1, 1.03840499e-07, 0.899723411, 5.46342278e-08, -0.436460555)
                local args = { 
                    [1] = {
                        ["NPC"] = "Dojo Trainer",
                        ["Command"] = "ClaimQuest"
                    }
                }
                
                game:GetService("ReplicatedStorage"):WaitForChild("Modules"):WaitForChild("Net"):WaitForChild("RF/InteractDragonQuest"):InvokeServer(unpack(args))
            until not _G.FinishQ 
        end
    end
end)
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local LocalPlayer = Players.LocalPlayer
local Remotes = ReplicatedStorage:WaitForChild("Remotes")
local CommF_ = Remotes:WaitForChild("CommF_")

local currentNotification = nil
local lastNotificationText = nil
function Debug(text)
    if lastNotificationText == text then
        return
    end

    if currentNotification then
        pcall(function()
            currentNotification:Destroy()
        end)
        currentNotification = nil
    end

    local success, Notification = pcall(function()
        return require(game.ReplicatedStorage:FindFirstChild("Notification"))
    end)
    if not success or not Notification then
        warn("Failed to load Notification module: " .. tostring(Notification))
        print("[Debug] " .. text)
        lastNotificationText = text
        return
    end

    local coloredText = text
    local notification
    local success, err = pcall(function()
        notification = Notification.new(coloredText)
        notification.Duration = 99999
        notification:Display()
    end)
    if not success then
        warn("Failed to display notification: " .. tostring(err))
        print("[Debug] " .. text)
        lastNotificationText = text
        return
    end

    currentNotification = notification
    lastNotificationText = text
end

local function RunAutoQuestDojo()
    while task.wait() do 
        if not _G.AutoQuestDojo then
            if currentNotification then
                pcall(function()
                    currentNotification:Destroy()
                end)
                currentNotification = nil
                lastNotificationText = nil
            end
            local notifications = LocalPlayer.PlayerGui:FindFirstChild("Notifications")
            if notifications then
                for _, notification in pairs(notifications:GetChildren()) do
                    if notification.Name == "NotificationTemplate" then
                        pcall(function()
                            notification:Destroy()
                        end)
                    end
                end
            end
            break 
        end

        if not LocalPlayer.Character then
            LocalPlayer.CharacterAdded:Wait()
        end

        local inventoryData = CommF_:InvokeServer("getInventory")
        if not inventoryData then
            warn("Failed to retrieve inventory data.")
            Debug("Error: Cannot retrieve inventory data.")
            _G.AutoQuestDojo = false
        end

        local hasWhite = false
        local hasYellow = false
        local hasOrange = false
        local hasGreen = false
        local hasBlue = false
        local hasPurple = false
        local hasRed = false
        local hasBlack = false

        for _, item in pairs(inventoryData) do
            if item.Name == "Dojo Belt (White)" then
                hasWhite = true
            elseif item.Name == "Dojo Belt (Yellow)" then
                hasYellow = true
            elseif item.Name == "Dojo Belt (Orange)" then
                hasOrange = true
            elseif item.Name == "Dojo Belt (Green)" then
                hasGreen = true
            elseif item.Name == "Dojo Belt (Blue)" then
                hasBlue = true
            elseif item.Name == "Dojo Belt (Purple)" then
                hasPurple = true
            elseif item.Name == "Dojo Belt (Red)" then
                hasRed = true
            elseif item.Name == "Dojo Belt (Black)" then
                hasBlack = true
            end
        end

        if not hasWhite then
            Debug("White Belt Farm 3 Quest\nหาสีขาว..ฟาร์มเวล3เควส")
            if _G.AutoQuestDojo then
                _G.AutoFarm = true
            else
                _G.AutoFarm = false
            end
        elseif hasWhite and not hasYellow then
            Debug("Yellow Belt Kill Fish 5 amount\nหาสีเหลือง..ตีปลาทะ5ตัว")
            if _G.AutoQuestDojo then
                _G.farmseaevent = true
                _G.AutoTerrorshark = true
                _G.FarmShark = true
                _G.farmpiranya = true
            else
                _G.farmseaevent = false
                _G.AutoTerrorshark = false
                _G.FarmShark = false
                _G.farmpiranya = false
            end
        elseif hasWhite and hasYellow and not hasOrange then
            Debug("Orange Belt Trade on your own\nหาสีส้ม..เทรดผลด้วยตัวเอง")
        elseif hasWhite and hasYellow and hasOrange and not hasGreen then
            Debug("Green Belt Drive Boat 5K M\nหาสีเขียว..ขับเรือห่างจากเกาะห้าพันเมตร")
            if _G.AutoQuestDojo then
                _G.AutoFindIsland = true
            else
                _G.AutoFindIsland = false
            end
        elseif hasWhite and hasYellow and hasOrange and hasGreen and not hasBlue then
            Debug("Blue Belt Drop Fruit With Someone\nหาสีน้ำเงิน..โยนผลให้กันด้วยตัวเอง")
        elseif hasWhite and hasYellow and hasOrange and hasGreen and hasBlue and not hasPurple then
            Debug("Purple Belt Kill Elite 3 amount\nหาสีม่วง..ล่าอีลิทฮันเตอร์3ตัว")
            if _G.AutoQuestDojo then
                _G.AutoEliteHunter = true
                _G.AutoEliteHunterHop = true
            else
                _G.AutoEliteHunter = false
                _G.AutoEliteHunterHop = false
            end
        elseif hasWhite and hasYellow and hasOrange and hasGreen and hasBlue and hasPurple and not hasRed then
            Debug("Red Belt Kill Rumbling Waters\nหาสีแดง..ตีเจ้าทะเลที่เกิดเป็นกลุ่ม")
            if _G.AutoQuestDojo then
                 _G.AutoSeabestFarm = true
                _G.Nocliprock = true
            else
                _G.AutoSeabestFarm = false
                _G.Nocliprock = false
            end
        elseif hasWhite and hasYellow and hasOrange and hasGreen and hasBlue and hasPurple and hasRed and not hasBlack then
            Debug("Black Belt Complete the Volcano Event\nหาสีดำ..ผ่านอีเว้นท์ภูเขาไฟ")
            if _G.AutoQuestDojo then
                _G.AutoFindIsland = true
                _G.volcanoRocks = true
                _G.KillAura = true
            else
                _G.AutoFindIsland = false
                _G.volcanoRocks = false
                _G.KillAura = false
            end
        else
            Debug("Complete All Quest\nครบทุกเควสแล้ว!")
            _G.AutoQuestDojo = false
        end
    end
end

local autoQuestEvent = Instance.new("BindableEvent")
local lastAutoQuestState = _G.AutoQuestDojo

spawn(function()
    while task.wait() do
        if _G.AutoQuestDojo ~= lastAutoQuestState then
            lastAutoQuestState = _G.AutoQuestDojo
            if _G.AutoQuestDojo then
                spawn(RunAutoQuestDojo)
            end
        end
    end
end)

page16:Toggle("AutoQuestDojo(Accept Quest on your own)\nออโต้เควสโดโจ(รับเควสด้วยตัวเอง)", _G.AutoQuestDojo, function(value)
    _G.AutoQuestDojo = value
end)

page16:Seperator("Dragon Hunter Quest\nเควสของดราก้อนฮันเตอร์")

page16:Toggle("Teleport To DragonHunter\nเทเลพอร์ตไปที่ Dragon Hunter",_G.ToDragonHunter, function(value)
    _G.ToDragonHunter = value
    if value == false then
        toTarget(game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame)
    end
end)

local positionD = CFrame.new(5867.24414, 1209.43933, 811.202942, 0.704452753, -1.84906739e-08, 0.709750891, 1.24976527e-08, 1, 1.36479832e-08, -0.709750891, -7.44138973e-10, 0.704452753)
spawn(function()
    while task.wait() do
        if _G.ToDragonHunter then
            toTarget(positionD)
        end
    end
end)
_G.CurrentQuest = nil
local activeTween = nil
local check = true
local isQuestActive = false
local taskCompleted = false
page16:Toggle("AutoQuestDragonHunter\nออโต้เควสดราก้อนฮันเตอร์", _G.dragonhunterquest, function(value)
    _G.dragonhunterquest = value
    if not value then
        stopMovement()
        game:GetService("Players").LocalPlayer.PlayerGui.TopbarStandard.Enabled = true
    else
        game:GetService("Players").LocalPlayer.PlayerGui.TopbarStandard.Enabled = false
    end
end)

local dragonHunterNPCPos = CFrame.new(5867.244140625, 1209.4393310546875, 811.2029418945312)
local dragonHunterNPC = Workspace.NPCs:FindFirstChild("Dragon Hunter")

local function waitForCharacter()
    local character = LocalPlayer.Character
    if not character or not character:FindFirstChild("HumanoidRootPart") or not character:FindFirstChild("Humanoid") then
        LocalPlayer.CharacterAdded:Wait()
        character = LocalPlayer.Character
        character:WaitForChild("HumanoidRootPart")
        character:WaitForChild("Humanoid")
    end
    return character
end

local function toTargetD(targetCFrame, isDragonHunter)
    local character = waitForCharacter()
    local rootPart = character.HumanoidRootPart

    if isDragonHunter then
        if not dragonHunterNPC or not dragonHunterNPC:FindFirstChild("HumanoidRootPart") then
            dragonHunterNPC = Workspace.NPCs:FindFirstChild("Dragon Hunter")
            if not dragonHunterNPC then
                targetCFrame = dragonHunterNPCPos
            else
                targetCFrame = dragonHunterNPC.HumanoidRootPart.CFrame
            end
        else
            targetCFrame = dragonHunterNPC.HumanoidRootPart.CFrame
        end
    end

    local distance = (rootPart.Position - targetCFrame.Position).Magnitude
    local info = TweenInfo.new(distance / 300, Enum.EasingStyle.Linear)
    local tween = TweenService:Create(rootPart, info, {CFrame = targetCFrame})
    activeTween = tween
    tween:Play()
    return tween
end

local function stopMovement()
    if activeTween then
        activeTween:Cancel()
        activeTween = nil
    end
end

local function tapScreenAtGuiElement(guiElement)
    if not guiElement then
        return
    end

    local absolutePosition = guiElement.AbsolutePosition
    local absoluteSize = guiElement.AbsoluteSize
    local tapX = absolutePosition.X + (absoluteSize.X / 2)
    local tapY = absolutePosition.Y + (absoluteSize.Y / 2)

    local screenSize = GuiService:GetScreenResolution()
    if tapX < 0 or tapX > screenSize.X or tapY < 0 or tapY > screenSize.Y then
        return
    end

    VirtualInputManager:SendMouseButtonEvent(tapX, tapY, 0, true, game, 0)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(tapX, tapY, 0, false, game, 0)
end

local function tapScreenCenter()
    local screenSize = GuiService:GetScreenResolution()
    local centerX = screenSize.X / 2
    local centerY = screenSize.Y / 2
    VirtualInputManager:SendMouseButtonEvent(centerX, centerY, 0, true, game, 0)
    task.wait(0.1)
    VirtualInputManager:SendMouseButtonEvent(centerX, centerY, 0, false, game, 0)
end


local success, Net = pcall(function()
    return require(ReplicatedStorage.Modules.Net)
end)
if not success then
    warn("Failed to load ReplicatedStorage.Modules.Net:", Net)
    return
end

local dragonHunter
if not Net.RemoteFunction or type(Net.RemoteFunction) ~= "function" then
    dragonHunter = ReplicatedStorage.Modules.Net:FindFirstChild("RF/DragonHunter")
    if not dragonHunter then
        local possibleFolders = {"Util", "Remotes", "RumbleV2", "Assets", "Common", "FX"}
        for _, folderName in ipairs(possibleFolders) do
            local folder = ReplicatedStorage:FindFirstChild(folderName)
            if folder and folder:FindFirstChild("RF/DragonHunter") then
                dragonHunter = folder:FindFirstChild("RF/DragonHunter")
                break
            end
        end
    end
    if not dragonHunter then
        warn("RF/DragonHunter not found in any folder")
        local commF = ReplicatedStorage.Remotes.CommF_
        if commF then
            local success, questStatus = pcall(function()
                return commF:InvokeServer("CheckQuest", "DragonHunter")
            end)
        end
        return
    end
else
    local success, result = pcall(Net.RemoteFunction, "DragonHunter")
    if success and result then
        dragonHunter = result
    else
        dragonHunter = ReplicatedStorage.Modules.Net:FindFirstChild("RF/DragonHunter")
        if not dragonHunter then
            return
        end
    end
end

if not dragonHunter or not dragonHunter:IsA("RemoteFunction") then
    warn("dragonHunter is not a valid RemoteFunction:", dragonHunter)
    return
end

local function checkTaskCompleted()
    for _, v in ipairs(PlayerGui.Notifications:GetChildren()) do
        if v:IsA("TextLabel") and v.Text:find("Task completed!") then
            return true
        end
    end
    return false
end
    
local function submitQuest()
    toTargetD(dragonHunterNPCPos, true)
    task.wait(3)

    local character = waitForCharacter()
    local rootPart = character.HumanoidRootPart
    local distance = dragonHunterNPC and dragonHunterNPC:FindFirstChild("HumanoidRootPart")
        and (rootPart.Position - dragonHunterNPC.HumanoidRootPart.Position).Magnitude
        or (rootPart.Position - dragonHunterNPCPos.Position).Magnitude

    if distance > 10 then
        return false
    end

    tapScreenCenter()
    task.wait(1)

    local dialogue = PlayerGui:FindFirstChild("Main") and PlayerGui.Main:FindFirstChild("Dialogue")
    local option1 = dialogue and dialogue:FindFirstChild("Option1")
    local option1TextLabel = option1 and option1:FindFirstChild("TextLabel")

    if option1TextLabel and (option1TextLabel.Text == "Submit" or option1TextLabel.Text == "Claim") then
        tapScreenAtGuiElement(option1)
        return true
    end
    return false
end

spawn(function()
    while task.wait() do
        if  _G.dragonhunterquest then     

        local character = waitForCharacter()
        local rootPart = character.HumanoidRootPart

        if checkTaskCompleted() then
            taskCompleted = true
        end

        if not isQuestActive then
            local success, questStatus = pcall(function()
                return dragonHunter:InvokeServer({Context = "Check"})
            end)

            if success and type(questStatus) == "table" then
                local questName = questStatus.Text or questStatus["Text"]
                if questName then
                    _G.CurrentQuest = questName
                    isQuestActive = true
                    taskCompleted = false
                    check = true
                else
                    _G.CurrentQuest = nil
                end
            else
                warn("Failed to check quest:", questStatus)
                _G.CurrentQuest = nil
            end
        end

        if not _G.CurrentQuest then
            local distance = dragonHunterNPC and dragonHunterNPC:FindFirstChild("HumanoidRootPart")
                and (rootPart.Position - dragonHunterNPC.HumanoidRootPart.Position).Magnitude
                or (rootPart.Position - dragonHunterNPCPos.Position).Magnitude

            if distance > 10 then
                toTargetD(dragonHunterNPCPos, true)
            end

            local dialogue = PlayerGui:FindFirstChild("Main") and PlayerGui.Main:FindFirstChild("Dialogue")
            local option1 = dialogue and dialogue:FindFirstChild("Option1")
            local option1TextLabel = option1 and option1:FindFirstChild("TextLabel")

            if not dialogue or not dialogue.Visible then
                if check then
                    tapScreenCenter()
                    task.wait(0.5)
                    dialogue = PlayerGui:FindFirstChild("Main") and PlayerGui.Main:FindFirstChild("Dialogue")
                    option1 = dialogue and dialogue:FindFirstChild("Option1")
                    option1TextLabel = option1 and option1:FindFirstChild("TextLabel")
                end
            elseif option1TextLabel and dialogue.Visible then
                local optionText = option1TextLabel.Text
                check = false

                if (optionText == "Hunt" or optionText == "Sure") and option1TextLabel.Visible then
                    local success, err = pcall(function()
                        GuiService.SelectedObject = option1
                    end)
                    if success then
                        VirtualInputManager:SendKeyEvent(true, Enum.KeyCode.Return, false, game)
                        task.wait(0.1)
                        VirtualInputManager:SendKeyEvent(false, Enum.KeyCode.Return, false, game)
                        task.wait(0.5)
                        GuiService.SelectedObject = nil
                        tapScreenCenter()
                    else
                        tapScreenAtGuiElement(option1)
                    end
                end
            end
        elseif _G.CurrentQuest then
            if game:GetService("Players").LocalPlayer.PlayerGui.Main.Dialogue.Visible then 
                tapScreenCenter()
            else
            local questText = tostring(_G.CurrentQuest):lower()
            if questText:find("venomous") then
                local venomousPos = CFrame.new(4879.91992, 1093.68896, 1104.00806, 0.943795443, 0, 0.330530137, 0, 1, 0, -0.330530137, 0, 0.943795443)
                toTargetD(venomousPos)

                local enemiesKilled = 0
                for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
                    if enemy.Name:lower():find("venomous") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                        repeat
                            character = waitForCharacter()
                            toTargetD(enemy.HumanoidRootPart.CFrame * MethodFarm)
                            EquipWeapon(_G.SelectWeapon)
                            BringMob = true
                            FastAttack = true
                            enemy.HumanoidRootPart.CanCollide = false
                            enemy.Humanoid.WalkSpeed = 0
                            enemy.Humanoid:ChangeState(11)
                            enemy.Humanoid:ChangeState(14)
                            enemy.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                            sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                            task.wait()
                        until not enemy.Parent or enemy.Humanoid.Health <= 0 or taskCompleted or checkTaskCompleted()
                        enemiesKilled = enemiesKilled + 1
                        if enemiesKilled >= 3 or taskCompleted or checkTaskCompleted() then
                            _G.CurrentQuest = nil
                            isQuestActive = false
                            taskCompleted = false
                            submitQuest()
                            break
                        end
                    end
                end
            
            elseif questText:find("destroy 10 trees") then

                local position1 = CFrame.new(5237.01562, 1004.13196, 430.84198, 0.560783386, 1.33068712e-08, -0.827962577, -1.11938459e-08, 1, 8.49017656e-09, 0.827962577, 4.50693527e-09, 0.560783386)
                local position2 = CFrame.new(5345.48779, 1004.13196, 357.511261, -0.452544957, 6.52710668e-08, 0.891741574, -2.47005669e-08, 1, -8.57301998e-08, -0.891741574, -6.08232966e-08, -0.452544957)

                local currentTarget = position1
                local isMovingtoTargetition1 = true

                while task.wait(0) do
                    if not _G.dragonhunterquest then break end
                    local disttoTarget1 = (rootPart.Position - position1.Position).Magnitude
                    local disttoTarget2 = (rootPart.Position - position2.Position).Magnitude
                    if disttoTarget1 >= 20 and disttoTarget2 >= 20 then
                        toTargetD(currentTarget)
                    else
                        if disttoTarget1 <= 5 then
                            EquipAllWeapon()
                            _G.Useskill = true
                            if isMovingtoTargetition1 then
                                currentTarget = position2
                                isMovingtoTargetition1 = false
                                toTargetD(currentTarget)
                            end
                        elseif disttoTarget2 <= 5 then
                            EquipAllWeapon()
                            _G.Useskill = true
                            if not isMovingtoTargetition1 then
                                currentTarget = position1
                                isMovingtoTargetition1 = true
                                toTargetD(currentTarget)
                            end
                        end
                    end

                    if taskCompleted or checkTaskCompleted() then
                        _G.CurrentQuest = nil
                        _G.Useskill = false
                        isQuestActive = false
                        taskCompleted = false
                        submitQuest()
                        break
                    end
                end
            
            elseif questText:find("hydra enforcers") then
                local enforcePos = CFrame.new(4547.11523, 1003.10199, 334.195007, 0.388810456, -0, -0.921317935, 0, 1, -0, 0.921317935, 0, 0.388810456)
                toTargetD(enforcePos)

                local enemiesKilled = 0
                for _, enemy in ipairs(Workspace.Enemies:GetChildren()) do
                    if enemy.Name:lower():find("hydra enforcer") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                        repeat
                            character = waitForCharacter()
                            toTargetD(enemy.HumanoidRootPart.CFrame * MethodFarm)
                            EquipWeapon(_G.SelectWeapon)
                            BringMob = true
                            FastAttack = true
                            enemy.HumanoidRootPart.CanCollide = false
                            enemy.Humanoid.WalkSpeed = 0
                            enemy.Humanoid:ChangeState(11)
                            enemy.Humanoid:ChangeState(14)
                            enemy.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                            sethiddenproperty(LocalPlayer, "SimulationRadius", math.huge)
                            task.wait()
                        until not enemy.Parent or enemy.Humanoid.Health <= 0 or taskCompleted or checkTaskCompleted()
                        enemiesKilled = enemiesKilled + 1
                        if enemiesKilled >= 3 or taskCompleted or checkTaskCompleted() then
                            _G.CurrentQuest = nil
                            isQuestActive = false
                            taskCompleted = false
                            submitQuest()
                            break
                        end
                    end
                end
            else
                _G.CurrentQuest = nil
                isQuestActive = false
                taskCompleted = false
            end
        end
        end
    end
    end
    stopMovement()
end)

page16:Toggle("Auto ColletEmberFlame\nออโต้เก็บลูกไฟ", _G.AutoEmber, function(value)
        _G.AutoEmber = value
        spawn(function()
            while _G.AutoEmber do wait()
                pcall(function()
                    if workspace:FindFirstChild("EmberTemplate") then
                        game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame = workspace.EmberTemplate.Part.CFrame
                    end
                end)
            end
        end)
    end)
page16:Button("Craft Volcanic Magnet\nคราฟท์ตะเกียง",function()
game:GetService("ReplicatedStorage"):WaitForChild("Remotes"):WaitForChild("CommF_"):InvokeServer("CraftItem","Craft","Volcanic Magnet")
end)
page16:Seperator("Vocalno/ภูเขาไฟ")
 -- ฟังก์ชันสำหรับกด ProximityPrompt
local function fireProximityPrompt(prompt)
    if prompt and prompt:IsA("ProximityPrompt") then
        if not prompt.Enabled then
            warn("ProximityPrompt ถูกปิดใช้งาน")
            return false
        end
        prompt:InputHoldBegin()
        task.wait(prompt.HoldDuration)
        prompt:InputHoldEnd()
        print("กด ProximityPrompt สำเร็จ")
        return true
    else
        warn("ไม่พบ ProximityPrompt หรือไม่ถูกต้อง")
        return false
    end
end

-- สร้างปุ่มใน UI สำหรับเปิด/ปิดฟังก์ชัน Auto Volcano Island
page16:Toggle("Auto Volcano Island\nออโต้เกาะภูเขาไฟ", _G.volcanoRocks, function(value)
    _G.volcanoRocks = value
    spawn(function()
        while task.wait(0.1) do
            if _G.volcanoRocks then
                local player = game.Players.LocalPlayer
                local isFighting = false
                local volcanoRocksFolder = workspace.Map.PrehistoricIsland.Core:FindFirstChild("VolcanoRocks")
                local hasBrightRedRock = false
                if volcanoRocksFolder then
                    for _, v in pairs(volcanoRocksFolder:GetChildren()) do
                        if (v.Name == "Rock" or v.Name == "volcanorock") and v:IsA("BasePart") then
                            local brickColorName = v.BrickColor.Name
                            local r = math.floor(v.Color.R * 255)
                            local g = math.floor(v.Color.G * 255)
                            local b = math.floor(v.Color.B * 255)
                            local material = v.Material
                            if brickColorName == "Bright red" and r == 185 and g == 53 and b == 56 and material == Enum.Material.Neon then
                                hasBrightRedRock = true
                                break
                            end
                        end
                    end
                end
    
                local hasLavaGolem = false
                for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                    if string.find(enemy.Name, "Lava Golem") then
                        hasLavaGolem = true
                        break
                    end
                end
    
                if not hasBrightRedRock and not hasLavaGolem and not isFighting then
                    print("ไม่มี VolcanoRocks สีแดง และ Lava Golem, ไปกด ProximityPrompt")
                    local relicCFrame = relic.WorldPivot
                    local offset = CFrame.new(0, -50, 30)
                    local newCFrame = relicCFrame * offset
                    humanoidRootPart.CFrame = newCFrame
    
                    local activationPrompt = core:FindFirstChild("ActivationPrompt")
                    local prompt = activationPrompt and activationPrompt:FindFirstChild("ProximityPrompt")
    
                    if prompt then
                        print("พบ ProximityPrompt, กำลังกด...")
                        local success = fireProximityPrompt(prompt)
                        if success then
                            print("รอให้ ProximityPrompt หายไป")
                            repeat
                                task.wait(0.1)
                                game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
                            until not prompt.Parent or not _G.volcanoRocks
                            game:GetService("VirtualInputManager"):SendKeyEvent(true, Enum.KeyCode.E, false, game)
                            game:GetService("VirtualInputManager"):SendKeyEvent(false, Enum.KeyCode.E, false, game)
                            print("อีเวนต์เริ่มแล้ว ProximityPrompt หายไป")
                        end
                    else
                        warn("ไม่พบ ProximityPrompt")
                    end
                end
    
                -- ขั้นตอนที่ 2: หา VolcanoRocks (volcanorock) ที่เป็นสีแดง
                local foundBrightRedRock = false
                if volcanoRocksFolder then
                    for _, v in pairs(volcanoRocksFolder:GetChildren()) do
                        if not _G.volcanoRocks then break end
                        if (v.Name == "Rock" or v.Name == "volcanorock") and v:IsA("BasePart") then
                            local brickColorName = v.BrickColor.Name
                            local r = math.floor(v.Color.R * 255)
                            local g = math.floor(v.Color.G * 255)
                            local b = math.floor(v.Color.B * 255)
                            local material = v.Material
    
                            if brickColorName == "Bright red" and r == 185 and g == 53 and b == 56 and material == Enum.Material.Neon then
                                foundBrightRedRock = true
                                isFighting = true
                                print("พบ volcanorock สีแดง, เริ่มตี")
                                repeat
                                    task.wait()
                                    PositionSkillMasteryDevilFruit = v.Position
                                    toTarget(v.CFrame * CFrame.new(0, 20, 0))
                                    EquipAllWeapon()
                                    _G.Useskill = true
                                until v.BrickColor.Name ~= "Bright red" or not v.Parent or not _G.volcanoRocks
                                _G.Useskill = false
                                isFighting = false
                                print("ตี volcanorock เสร็จแล้ว")
                                break -- ออกจากลูปเมื่อตีหินเสร็จ
                            end
                        end
                    end
                end
    
                -- ขั้นตอนที่ 3: ถ้าไม่มี volcanorock สีแดง ให้หา Lava Golem
                if not foundBrightRedRock then
                    local foundGolem = false
                    for _, enemy in pairs(workspace.Enemies:GetChildren()) do
                        if not _G.volcanoRocks then break end
                        if string.find(enemy.Name, "Lava Golem") then
                            foundGolem = true
                            isFighting = true
                            print("พบ Lava Golem, เริ่มตี")
                            repeat
                                toTarget(enemy.HumanoidRootPart.CFrame * MethodFarm)
                                EquipWeapon(_G.SelectWeapon)
                                BringMob = true
                                FastAttack = true
                                _G.Useskill = false
                                enemy.HumanoidRootPart.CanCollide = false
                                enemy.Humanoid.WalkSpeed = 0
                                enemy.Humanoid:ChangeState(11)
                                enemy.Humanoid:ChangeState(14)
                                enemy.HumanoidRootPart.Size = Vector3.new(80, 80, 80)
                                sethiddenproperty(player, "SimulationRadius", math.huge)
                                task.wait(0.1)
                            until not enemy.Parent or enemy.Humanoid.Health <= 0 or not _G.volcanoRocks
                            BringMob = false
                            FastAttack = false
                            isFighting = false
                            print("ตี Lava Golem เสร็จแล้ว")
                            break -- ออกจากลูปเมื่อตี Lava Golem เสร็จ
                        end
                    end
                    if not foundGolem then
                        print("ไม่พบ Lava Golem, รอ VolcanoRocks ต่อไป...")
                    end
                end
            else
                print("ปิด Auto Volcano Island")
                _G.Useskill = false
                BringMob = false
                FastAttack = false
                break
            end
        end
    end)    
end)

        
page16:Toggle("Auto Collect Bone\nเก็บกระดูกไดโนเสาร์",false,function(value)
    _G.CollectBone = value
end)
spawn(function()
    while task.wait() do
        if _G.CollectBone then
            for _, v in pairs(game.Workspace:GetChildren()) do
                if v.Name == "DinoBone" then
                    toTarget(v.CFrame * CFrame.new(0, 2, 0))
                end
            end
        end
    end
end)

page16:Toggle("Telport To NPC Fossil Expert\nเทเลพอร์ตไปหาตัวละครคราฟของ",false,function(value)
    _G.Tnpc = value
end)
spawn(function()
    while task.wait() do
        if _G.Tnpc then
            if workspace.Map.PrehistoricIsland.Core:FindFirstChild("FossilExpertSpawn") then
                toTarget(workspace.Map.PrehistoricIsland.Core.FossilExpertSpawn.CFrame * CFrame.new(0,5,0))
            end
        end
    end
end)

page11:Seperator("Haki,LegendSword/ฮาคิ,ดาบโซโล")
page11:Toggle("AutoBuyLegendarySword\nออโต้ซื้อดาบโซโล", _G.AutoBuyLegendarySword, function(value)
    _G.AutoBuyLegendarySword = value
    task.spawn(function()
        while task.wait() do
            pcall(function()
                if _G.AutoBuyLegendarySword then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LegendarySwordDealer", "1")
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LegendarySwordDealer", "2")
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LegendarySwordDealer", "3")
                end
            end)
        end
    end)
end) 
page11:Toggle("AutoBuyLegendarySwordHop\nออโต้ซื้อดาบโซโลย้ายซิฟ", _G.Settings.AutoBuyLegendarySwordHop, function(value)
_G.AutoBuyLegendarySwordHop = value
_G.Settings.AutoBuyLegendarySwordHop = value
    SaveSettings()
end)
spawn(function()
    while task.wait() do
        pcall(function()
                if _G.Settings.AutoBuyLegendarySwordHop then
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LegendarySwordDealer", "1")
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LegendarySwordDealer", "2")
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("LegendarySwordDealer", "3")
                    game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "HopServer...",Icon = "rbxassetid://16129235054",Duration = 5})
                    while _G.AutoBuyLegendarySwordHop do task.wait()
                    wait(7)
                    Hop()
                end
            end
        end)
    end
end)

page11:Toggle("AutoBuyEnchanmentHaki\nออโต้ซื้อสีฮาคิ", true, function(value)
    _G.AutoBuyEnchanmentHaki = value
    task.spawn(function()
        while task.wait() do
            pcall(function()
                if _G.AutoBuyEnchanmentHaki then
                    local args = {
                        [1] = "ColorsDealer",
                        [2] = "2"
                    }
                    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                end
            end)
        end
    end)
end)
page11:Toggle("AutoBuyEnchanmentHakiHop\nออโต้ซื้อสีฮาคิย้ายเซิฟ", _G.Settings.AutoBuyEnchanmentHakiHop, function(value)
_G.AutoBuyEnchanmentHakiHop = value
_G.Settings.AutoBuyEnchanmentHakiHop = value
SaveSettings()
task.spawn(function()
    while task.wait() do
        pcall(function()
            if _G.Settings.AutoBuyEnchanmentHakiHop then
                local args = {
                    [1] = "ColorsDealer",
                    [2] = "2"
                }
                game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
                game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "HopServer...",Icon = "rbxassetid://16129235054",Duration = 5})
                        while _G.AutoBuyEnchanmentHakiHop do task.wait()
                        wait(7)
                        Hop()
                    end
                end
            end)
        end
    end)
end)
page11:Seperator("Fragment/เงินม่วง")
page11:Button("Refund Stat [2,500F]\nรีค่าสเตตัส [2,500 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "Refund", "1")
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "Refund", "2")
end)
page11:Button("Reroll Race [3,000F]\nรีโรลเผ่าพันธุ์ [3,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "Reroll", "1")
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "Reroll", "2")
end)
page11:Seperator("Abilities\nทักษะ")
page11:Button("Haki [25,00$]\nฮาคิ [25,00 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyHaki", "Buso")
end)
page11:Button("Geppo [10,000$]\nเดินชมจันทร์ [10,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyHaki", "Geppo")
end)
page11:Button("Soru [100,000$]\nโซล [100,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyHaki", "Soru")
end)
page11:Button("ObservationHaki [750,000$]\nฮาคิสังเกต [750,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("KenTalk", "Buy")
end)
page11:Seperator("Fighting Style\nทักษะการต่อสู้")
page11:Button("Black Leg [150,000$]\nขาดำ [150,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyBlackLeg")
end)
page11:Button("Electro [500,000$]\nหมัดสายฟ้า [500,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectro")
end)
page11:Button("Fishman Karate [750,000$]\nหมัดมนุษย์เงือก [750,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyFishmanKarate")
end)
page11:Button("Dragon Claw [1,500F]\nหมัดมังกร [1,500 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "DragonClaw", "1")
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "DragonClaw", "2")
end)
page11:Button("Superhuman [3,000,000]\nชุปเปอรฮิวแมน [3,000,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySuperhuman")
end)
page11:Button("Death Step [2,500,000/5,000F]\nขาดำขั้นสอง [2,500,000 เงินเขียว/5,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDeathStep")
end)
page11:Button("Sharkman Karate [2,500,000/5,000F]\nหมัดมนุษย์เงือกขั้นสอง [2,500,000 เงินเขียว/5,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate", true)
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySharkmanKarate")
end)
page11:Button("Electric Claw [3,000,000/5,000F]\nหมัดสายฟ้าขั้นสอง [3,000,000 เงินเขียว/5,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw", true)
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyElectricClaw")
end)
page11:Button("Dragon Talon [3,000,000/5,000F]\nหมัดมังกรขั้นสอง [3,000,000 เงินเขียว/5,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon", true)
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyDragonTalon")
end)
page11:Button("Godhuman [5,000,000/5,000F]\nชุปเปอรฮิวแมนขั้นสอง [5,000,000 เงินเขียว/5,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman", true)
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyGodhuman")
end)
page11:Button("SanguineArt [5,000,000/5,000F]\nหมัดแวมไพร์ [5,000,000 เงินเขียว/5,000 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySanguineArt", true)
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuySanguineArt")
end)
page11:Seperator("Weapon\nอาวุธ")
page11:Button("Katana [1,000]\nคาตานะ [1,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Katana")
end)
page11:Button("Cutlass [1,000]\nคัตลาส [1,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Cutlass")
end)
page11:Button("Duel Katana [12,000]\nคาตานะคู่ [12,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Duel Katana")
end)
page11:Button("Iron Mace [25,000]\nกระบอง [25,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Iron Mace")
end)
page11:Button("Pipe [100,000]\nท่อซาโบ้ [100,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Pipe")
end)
page11:Button("Triple Katana [60,000]\nคาตานะสามเล่ม [60,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Triple Katana")
end)
page11:Button("Dual-Headed Blade [400,000]\nทวนสองด้าน [400,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Dual-Headed Blade")
end)
page11:Button("Bisento [1,000,000]\nทวนขนาดใหญ่ [1,000,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Bisento")
end)
page11:Button("Soul Cane [750,000]\nไม้เท้าบรู๊ค [750,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Soul Cane")
end)
page11:Seperator("Gun\nปืน")
page11:Button("Slingshot [5,000]\nหนังสติ๊ก [5,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Slingshot")
end)
page11:Button("Musket [8,000]\nปืนไม้ด้ามยาว [8,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Musket")
end)
page11:Button("Flintlock [10,500]\nปืนเหล็กด้ามสั้น [10,500 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Flintlock")
end)
page11:Button("Refined Flintlock [65,000]\nปืนเหล็กด้ามยาว [65,000]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Refined Flintlock")
end)
page11:Button("Cannon [100,000]\nปืนใหญ่ [100,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Cannon")
end)
page11:Button("Kabucha [1500F]\nหนังสติ๊กขนาดใหญ่ [1500 เงินม่วง]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "Slingshot", "1")
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BlackbeardReward", "Slingshot", "2")
end)
page11:Seperator("Accessory\nของแต่งกาย")
page11:Button("Black Cape [50,000]\nผ้าคลุมสีดำ [50,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Black Cape")
end)
page11:Button("Toemo Ring [500,000]\nกลองเอเนล [500,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Tomoe Ring")
end)
page11:Button("Swordsman Hat [150,000]\nหมวกนักดาบ [150,000 เงินเขียว]", function()
game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("BuyItem", "Swordsman Hat")
end)

page12:Seperator("Team/ทีม")
page12:Button("Join Pirates Team\nเข้าร่วมทีมโจรสลัด", function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", "Pirates")
end)

page12:Button("Join Marines Team\nเข้าร่วมทีมทหารเรือ", function()
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer("SetTeam", "Marines")
end)
        
page12:Seperator("Server/เซิฟเวอร์")
local TPS = game:GetService("TeleportService")
local LP = game:GetService("Players").LocalPlayer

page12:Textbox("JobID\nจ็อบไอดี","",function(x)
JobId_Textbox = x
end)
page12:Button("Join JobID\nเข้าร่วมจ็อบไอดี", function()
    TPS:TeleportToPlaceInstance(game.PlaceId, JobId_Textbox, LP)
    game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "Success JobID Please Wait",Icon = "rbxassetid://16129235054",Duration = 3}) 
end)

page12:Button("Copy JobID\nก็อปปี้จ็อบไอดี",function()
    setclipboard(game.JobId)
    game:GetService("StarterGui"):SetCore("SendNotification",{Title = "VectorHub",Text = "Success Copy JobID",Icon = "rbxassetid://16129235054",Duration = 3})   
end)
page12:Button("JoinServer Hop\nเข้าเซิฟคนเยอะ", function()
    repeat wait() until game:IsLoaded() and game.Players.LocalPlayer
        local HttpService, TPService = game:GetService "HttpService", game:GetService "TeleportService";
        local OtherServers = HttpService:JSONDecode(game:HttpGet("https://games.roblox.com/v1/games/" ..
            game.PlaceId .. "/servers/Public?sortOrder=Asc&limit=100"))
        function joinNew()
            if not isfile('servers.sss') then
                writefile('servers.sss', HttpService:JSONEncode({}))
            end
            local dontJoin = readfile('servers.sss')
            dontJoin = HttpService:JSONDecode(dontJoin)

            for Index, Server in next, OtherServers["data"] do
                if Server ~= game.JobId then
                    local j = true
                    for a, c in pairs(dontJoin) do
                        if c == Server.id then
                            j = false
                        end
                    end
                    if j then
                        table.insert(dontJoin, Server["id"])
                        writefile("servers.sss", HttpService:JSONEncode(dontJoin))
                        wait()
                        return Server['id']
                    end
                end
            end
        end

    local server = joinNew()
    if not server then
        writefile("servers.sss", HttpService:JSONEncode({}))
        local server = joinNew()
        TPService:TeleportToPlaceInstance(game.PlaceId, server)
    else
        TPService:TeleportToPlaceInstance(game.PlaceId, server)
    end
end)
page12:Button("RejoinServer\nเข้าเซิฟเดิม", function()
    local ts = game:GetService("TeleportService")
    local p = game.Players.LocalPlayer
    ts:Teleport(game.PlaceId, p)
end)
page12:Seperator("Other/อื่นๆ")
page12:Button("Kaitun Capture\nถ่ายภาพไก่ตัน", function()
kaituncap()
end)
page12:Button("Show SkillDevilFruisAwaked\nแสดงสกิลผลไม้ปีศาจตื่น", function()
    local args = {
    [1] = "getAwakenedAbilities"
    }

    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    game.Players.LocalPlayer.PlayerGui.Main.AwakeningToggler.Visible = true
end)
page12:Button("Show Titles\nแสดงฉายา", function()
    local args = {
    [1] = "getTitles"
    }
    game:GetService("ReplicatedStorage").Remotes.CommF_:InvokeServer(unpack(args))
    game.Players.localPlayer.PlayerGui.Main.Titles.Visible = true
end)
page12:Button("Show ColorHaki\nแสดงสีฮาคิ", function()
    game.Players.localPlayer.PlayerGui.Main.Colors.Visible = true
end)
function FullBright()
pcall(function()
local lighting = game:GetService("Lighting")
lighting.Ambient = Color3.fromRGB(255, 255, 255)
lighting.Brightness = 1
lighting.FogEnd = 1e10
for i, v in pairs(lighting:GetDescendants()) do
    if
        v:IsA("BloomEffect") or v:IsA("BlurEffect") or v:IsA("ColorCorrectionEffect") or v:IsA("SunRaysEffect")
        then
        v.Enabled = false
    end
end
lighting.Changed:Connect(function()
        lighting.Ambient = Color3.fromRGB(255, 255, 255)
        lighting.Brightness = 1
        lighting.FogEnd = 1e10
    end)
spawn(function()
        local character = game:GetService("Players").LocalPlayer.Character
        while wait() do
            repeat
                wait()
            until character ~= nil
            if not character.HumanoidRootPart:FindFirstChildWhichIsA("PointLight") then
                local headlight = Instance.new("PointLight", character.HumanoidRootPart)
                headlight.Brightness = 1
                headlight.Range = 60
            end
        end
    end)
end)
repeat
    task.wait()
until game:IsLoaded()
wait(5)
for i, v in pairs(game.Lighting:GetChildren()) do
    if v:IsA("") or v:IsA("Sky") or v:IsA("BlurEffect") or v:IsA("BloomEffect") or v:IsA("SunRaysEffect") then
        v:Destroy()
    end
end
    game.Lighting.Ambient = Color3.fromRGB(255, 255, 255)
    game.Lighting.Brightness = 1
    game.Lighting.ClockTime = 14
    game.Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
    game.Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
    game.Lighting.ExposureCompensation = 0
    game.Lighting.FogColor = Color3.fromRGB(255, 255, 255)
    game.Lighting.FogEnd = 999999999
    game.Lighting.GeographicLatitude = 41.733
    game.Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
    game.Lighting.GlobalShadows = true
    game.Lighting.Changed:Connect(function()
    game.Lighting.Ambient = Color3.fromRGB(255, 255, 255)
    game.Lighting.Brightness = 1
    game.Lighting.ClockTime = 14
    game.Lighting.ColorShift_Bottom = Color3.fromRGB(255, 255, 255)
    game.Lighting.ColorShift_Top = Color3.fromRGB(255, 255, 255)
    game.Lighting.ExposureCompensation = 0
    game.Lighting.FogColor = Color3.fromRGB(255, 255, 255)
    game.Lighting.FogEnd = 999999999
    game.Lighting.GeographicLatitude = 41.733
    game.Lighting.OutdoorAmbient = Color3.fromRGB(255, 255, 255)
    game.Lighting.GlobalShadows = true
end)
game.Lighting.DescendantAdded:Connect(function(obj)
if obj:IsA("") or obj:IsA("Sky") or obj:IsA("BlurEffect") or obj:IsA("BloomEffect") or obj:IsA("SunRaysEffect") then
    obj:Destroy()
end
end)
end
page12:Button("FullBright\nแมพสว่าง", function()
    FullBright()
end)
page12:Toggle("Walk On Water\nเดินบนน้ำ",fasle,function(value)
    _G.WalkWater = value
end)
spawn(function()
    while task.wait() do
        pcall(function()
            if _G.WalkWater then
                game:GetService("Workspace").Map["WaterBase-Plane"].Size = Vector3.new(1000,112,1000)
            else
                game:GetService("Workspace").Map["WaterBase-Plane"].Size = Vector3.new(1000,80,1000)
            end
        end)
    end
end)
_G.AutoRejoin = true
spawn(function()
    while task.wait() do
        if _G.AutoRejoin  then
            _G.AutoRejoin  = game:GetService("CoreGui").RobloxPromptGui.promptOverlay.ChildAdded:Connect(function(child)
                    if child.Name == 'ErrorPrompt' and child:FindFirstChild('MessageArea') and child.MessageArea:FindFirstChild("ErrorFrame") then
                    game:GetService("TeleportService"):Teleport(game.PlaceId)
                end
            end)
        end
    end
end)
Vec("<Color=Cyan>Vector Hub(BETA) Loading Success<Color=/>")   '
local hcQjHBAmIyYT = apnvRXUtjxXs .. runjvdupAemE .. ifizXwpuctAu
local zdwutwMJnrJb = 8193
local PyCxkglfKuJy = 1674

-- Simple Base64 Decoder ที่ทำงานใน Roblox
local function simpleBase64Decode(data)
    local chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
    local result = ""
    
    -- ทำความสะอาดข้อมูล
    data = data:gsub('[^' .. chars .. '=]', '')
    
    local function indexOf(str, char)
        for i = 1, #str do
            if str:sub(i, i) == char then
                return i - 1
            end
        end
        return -1
    end
    
    -- แปลง base64 โดยไม่ใช้ bit operations
    for i = 1, #data, 4 do
        local a = indexOf(chars, data:sub(i, i))
        local b = indexOf(chars, data:sub(i+1, i+1))
        local c = indexOf(chars, data:sub(i+2, i+2))
        local d = indexOf(chars, data:sub(i+3, i+3))
        
        if a >= 0 and b >= 0 then
            -- ใช้ math operations แทน bit operations
            local byte1 = (a * 4) + math.floor(b / 16)
            result = result .. string.char(byte1)
            
            if c >= 0 then
                local byte2 = ((b % 16) * 16) + math.floor(c / 4)
                result = result .. string.char(byte2)
                
                if d >= 0 then
                    local byte3 = ((c % 4) * 64) + d
                    result = result .. string.char(byte3)
                end
            end
        end
    end
    
    return result
end

-- ฟังก์ชันสำหรับ execute script
local function executeDecodedScript()
    print("🔄 กำลังถอดรหัสสคริปต์...")
    
    -- ได้ข้อมูลที่ encode แล้วจากตัวแปร obfuscated
    local encodedData = hcQjHBAmIyYT
    
    -- ถอดรหัส base64
    local originalScript = simpleBase64Decode(encodedData)
    
    print("✅ ถอดรหัสสำเร็จ!")
    print("📊 ขนาดสคริปต์: " .. #originalScript .. " characters")
    
    -- ตรวจสอบว่าได้สคริปต์ที่ถูกต้องหรือไม่
    if #originalScript > 0 and originalScript:find("print") then
        print("✅ สคริปต์ดูถูกต้อง")
        
        -- Execute สคริปต์ต้นฉบับ
        local success, result = pcall(function()
            local func, err = loadstring(originalScript)
            if func then
                return func()
            else
                error("Loadstring error: " .. tostring(err))
            end
        end)
        
        if success then
            print("🚀 Execute สคริปต์สำเร็จ!")
            return result
        else
            warn("❌ Execute ล้มเหลว: " .. tostring(result))
            print("📝 สคริปต์ที่ถอดรหัสได้ (100 ตัวอักษรแรก):")
            print(originalScript:sub(1, 100) .. "...")
            return nil
        end
    else
        warn("❌ สคริปต์ที่ถอดรหัสได้ผิดปกติ")
        print("📝 ข้อมูลที่ได้ (50 ตัวอักษรแรก):")
        print(originalScript:sub(1, 50) .. "...")
        return nil
    end
end

-- Debug mode: แสดงข้อมูลเพิ่มเติม
local DEBUG_MODE = false  -- เปลี่ยนเป็น true ถ้าต้องการ debug

if DEBUG_MODE then
    print("🐛 Debug Mode เปิดอยู่")
    print("📊 ข้อมูลที่ encode:")
    print("   ความยาว encoded data: " .. #hcQjHBAmIyYT)
    print("   ตัวอักษร 50 ตัวแรก: " .. hcQjHBAmIyYT:sub(1, 50))
end

-- เรียกใช้งานทันที
return executeDecodedScript()
